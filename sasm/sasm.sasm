;; enum Token {
;;     LeftParen,
;;     RightParen,
;;     Symbol(u64),
;;     Integer(i32),
;;     Char(char),
;;     String(startptr, length),
;;     Pound,
;; }
(module Token
    (define LeftParen #'(')
    (define RightParen #')')
    (define Symbol #'s')
    (define Integer #'i')
    (define Char #'c')
    (define String #'t')
    (define Pound #'#')
)

(module Unit
    (define Module 0b010)
    (define Bytes 0b100)
    (define Constant 0b110)
    (define import 0b1000)
    (define mask 0b110)
)

(import (sasm-strings *))
(import (syscalls *))
(import alloc)
(import (alloc malloc))
(import (alloc calloc))
(import (alloc realloc))
(import (alloc free))
(import symbol-table)
(import (symbol-table string->symbol))
(import (symbol-table symbol->string))
(import (util *))

start
    ;; Init malloc
    (jal x1 (alloc init))

    (add x20 x0 x2)
    ;; argc
    (lw x21 x20)
    (subi x21 x21 1)
    ;; prog
    (ld x22 (+ x20 8))
    (addi x20 x20 16)
    ;; input_file
    (add x23 x0 x0)
    ;; output_file
    (add x24 x0 x0)
    ;; debug
    (add x25 x0 x0)
    ;; usage?
    (add x26 x0 x0)

    args-loop
        (beq x21 x0 after-args)
        (subi x21 x21 1)
        (ld x5 x20)
        (addi x20 x20 8)
        (lb x6 x5)
        (subi x6 x6 #'-')
        (beq x6 x0 args-flag)
        (bne x23 x0 args-output)
        (add x23 x0 x5)
        (jal x0 args-loop)

        args-flag
        (lb x6 (+ x5 1))
        (subi x7 x6 #'V')
        (beq x7 x0 args-flag-version)
        (subi x7 x6 #'d')
        (bne x7 x0 args-flag-err)
        (lb x6 (+ x5 2))
        (bne x6 x0 args-flag-err)
        (addi x25 x0 1)
        (jal x0 args-loop)

        args-flag-version
            (lb x6 (+ x5 2))
            (bne x6 x0 args-flag-err)
            (defcon version-str "S-Assembler v2.0 - The Arcadian State (Sasm version)\nWritten by Hunter Praska\n")
            ;; write(STDOUT, _, _)
            (addi x10 x0 STDOUT)
            (la x11 version-str)
            (addi x12 x0 (len version-str))
            (addi x17 x0 SYS_WRITE)
            (ecall)
            ;; exit(0)
            (add x10 x0 x0)
            (addi x17 x0 SYS_EXIT)
            (ecall)

        args-flag-err
        (addi x26 x0 1)
        (defcon flag-err-1 "Unknown flag `")
        (defcon flag-err-2 "`.\n")
        ;; write(stdout, _, _)
        (addi x10 x0 STDOUT)
        (la x11 flag-err-1)
        (addi x12 x0 (len flag-err-1))
        (addi x17 x0 SYS_WRITE)
        (ecall)
        ;; write(stdout, flag, flag.len)
        (addi x10 x0 STDOUT)
        (add x11 x0 x5)
        (addi x12 x0 -1)
        args-flag-err-loop
            (addi x12 x12 1)
            (lb x6 x5)
            (addi x5 x5 1)
            (bne x6 x0 args-flag-err-loop)
        (ecall)
        ;; write(stdout, _, _)
        (addi x10 x0 STDOUT)
        (la x11 flag-err-2)
        (addi x12 x0 (len flag-err-2))
        (ecall)
        (jal x0 args-loop)


        args-output
        (bne x24 x0 args-err)
        (add x24 x0 x5)
        (jal x0 args-loop)

        args-err
        ;; write(stdout, _, _)
        (defcon args-err-str "Too many arguments.\n")
        (addi x10 x0 STDOUT)
        (la x11 args-err-str)
        (addi x12 x0 (len args-err-str))
        (addi x17 x0 SYS_WRITE)
        (ecall)
        (jal x1 print-usage)
        ;; exit(1)
        (addi x10 x0 1)
        (addi x17 x0 SYS_EXIT)
        (ecall)

    print-usage
        (defcon usage-1 "USAGE: ")
        (defcon usage-2 " <INPUT> [OUTPUT]\n    -d: Include debug info.\n")
        ;; write(STDOUT, _, _)
        (addi x10 x0 STDOUT)
        (la x11 usage-1)
        (addi x12 x0 (len usage-1))
        (addi x17 x0 SYS_WRITE)
        (ecall)
        ;; write(STDOUT, prog, prog.len)
        (addi x10 x0 STDOUT)
        (add x11 x0 x22)
        (addi x12 x0 -1)
        print-usage-loop
            (addi x12 x12 1)
            (lb x5 x22)
            (addi x22 x22 1)
            (bne x5 x0 print-usage-loop)
        (ecall)
        ;; write(STDOUT, _, _)
        (addi x10 x0 STDOUT)
        (la x11 usage-2)
        (addi x12 x0 (len usage-2))
        (ecall)
        (jalr x0 x1)

    after-args
        (bne x23 x0 after-args-output)
        (jal x1 print-usage)
        ;; exit(1)
        (addi x10 x0 1)
        (addi x17 x0 SYS_EXIT)
        (ecall)
    after-args-output
        (bne x24 x0 after-args-usage)
        (defcon default-output "bin.elf\0")
        (la x24 default-output)
    after-args-usage
        (beq x26 x0 after-args-done)
        (jal x1 print-usage)
        ;; write(stdout, "\n", 1);
        (addi x10 x0 STDOUT)
        (defcon newline "\n")
        (la x11 newline)
        (addi x12 x0 (len newline))
        (addi x17 x0 SYS_WRITE)
        (ecall)
    after-args-done

    (subi x2 x2 24)
    ;; input
    (sd x2 x23)
    ;; output
    (sd (+ x2 8) x24)
    ;; debug?
    (sd (+ x2 16) x25)
    (jal x1 (symbol-table init))

    ;; Open input file
    (ld x11 x2)
    (jal x1 read-file)
    (bne x12 x0 read-err)
    ;; filename
    (ld x12 x2)
    (add x6 x0 x12)
    (subi x13 x0 1)
    filename-length
        (lb x5 x6)
        (addi x13 x13 1)
        (addi x6 x6 1)
        (bne x5 x0 filename-length)
    (jal x1 (Tokenizer new))
    (add x21 x0 x10)
    (jal x1 (Asm new))

    asm-loop
        (jal x1 assemble)
        (beq x10 x0 asm-after)
        (ld x5 (+ x21 24))
        (addi x5 x5 16)
        (sd (+ x21 24) x5)
        (defcon msg "Unexpected closing parenthesis")
        (la x5 msg)
        (addi x6 x0 (len msg))
        (add x7 x0 x0)
        (jal x1 (assemble print-err))
        (jal x0 asm-loop)
    asm-after
        (jal x1 (assemble finish))
        (ld x5 (+ x21 120))
        (bne x5 x0 exit)

    (subi x2 x2 32)
    (sd x2 x10)
    (sd (+ x2 8) x11)
    (sd (+ x2 16) x12)
    (sd (+ x2 24) x13)

    ;; openat(AT_FDCWD, output-name, O_WRONLY|O_CREAT|O_TRUNC, 0o777)
    (addi x10 x0 AT_FDCWD)
    (ld x11 (+ x2 40))
    (addi x12 x0 577)
    (addi x13 x0 511)
    (addi x17 x0 SYS_OPENAT)
    (ecall)
    (blt x10 x0 error-open)
    (add x18 x0 x10)
    (ld x10 x2)
    (ld x11 (+ x2 8))
    (ld x16 (+ x2 16))
    (ld x17 (+ x2 24))
    (addi x2 x2 24)
    (sd x2 x18)
    ;; data
    (ld x12 (+ x20 32))
    (ld x13 (+ x20 40))
    ;; rodata
    (ld x14 (+ x20 56))
    (ld x15 (+ x20 64))
    (jal x1 elf)
    ;; close(fd)
    (ld x10 x2)
    (addi x2 x2 8)
    (addi x17 x0 SYS_CLOSE)
    (ecall)

    ;; exit(0)
    (add x10 x0 x0)
    (addi x17 x0 SYS_EXIT)
    (ecall)

    error-open
        (addi x10 x0 2)
        (addi x17 x0 SYS_EXIT)
        (ecall)
    read-err
        (defcon read-err-msg "Error: ")
        (subi x2 x2 16)
        (sd x2 x10)
        (sd (+ x2 8) x11)
        (addi x10 x0 STDERR)
        (la x11 read-err-msg)
        (addi x12 x0 (len read-err-msg))
        (addi x17 x0 SYS_WRITE)
        (ecall)
        (addi x10 x0 STDERR)
        (ld x11 x2)
        (ld x12 (+ x2 8))
        ;; skip over \t
        (addi x11 x11 1)
        (subi x12 x12 1)
        (ecall)
        (ld x10 x2)
        ;; free(msg)
        (jal x1 free)

        (defcon msg-end ".\n")
        (addi x10 x0 STDERR)
        (la x11 msg-end)
        (addi x12 x0 (len msg-end))
        (addi x17 x0 SYS_WRITE)
        (ecall)
    exit
        (addi x10 x0 1)
        (addi x17 x0 SYS_EXIT)
        (ecall)

;; Args:
;;  x11 - filename
;;
;; Ret:
;;  x10 - input: String
;;  x11 - input.end : pointer to end of input
;;  x12 - err?
;;  x10 - msg: String
;;  x11 - msg.len
(module read-file
    ;; openat(AT_FDCWD, input-name, O_RDONLY|O_DIRECTORY, 0)
    (addi x10 x0 AT_FDCWD)
    (addi x12 x0 1)
    (slli x12 x12 16)
    (add x13 x0 x0)
    (addi x17 x0 SYS_OPENAT)
    (ecall)
    (bge x10 x0 error-dir)

    ;; openat(AT_FDCWD, input-name, O_RDONLY, 0)
    (addi x10 x0 AT_FDCWD)
    (add x12 x0 x0)
    (add x13 x0 x0)
    (addi x17 x0 SYS_OPENAT)
    (ecall)
    (addi x5 x10 ENOENT)
    (beq x5 x0 error-notfound)
    (blt x10 x0 error-open)

    (add x30 x0 x10)
    ;; lseek(fd, 0, SEEK_END)
    (add x11 x0 x0)
    (addi x12 x0 SEEK_END)
    (addi x17 x0 SYS_LSEEK)
    (ecall)
    (add x31 x0 x10)
    ;; lseek(fd, 0, SEEK_SET)
    (add x10 x0 x30)
    (add x11 x0 x0)
    (addi x12 x0 SEEK_SET)
    (addi x17 x0 SYS_LSEEK)
    (ecall)

    ;; Read input file to buffer
    ;; mmap(NULL, len, PROT_RW, MAP_PRIVATE, fd, 0)
    (add x14 x0 x30)
    (add x10 x0 x0)
    (add x11 x0 x31)
    (addi x12 x0 PROT_RW)
    (addi x13 x0 MAP_PRIVATE)
    (add x15 x0 x0)
    (addi x17 x0 SYS_MMAP)
    (ecall)
    (bge x0 x10 error-read-input)

    (add x30 x0 x10)

    ;; close(fd)
    (add x10 x0 x14)
    (addi x17 x0 SYS_CLOSE)
    (ecall)

    (add x10 x0 x30)
    (add x11 x30 x31)
    (add x12 x0 x0)

    (jalr x0 x1)
    error-dir
        (defcon dir "\tExpected file, got directory `")
        ;; close(fd)
        (addi x17 x0 SYS_CLOSE)
        (ecall)

        (la x5 dir)
        (addi x6 x0 (len dir))
        (jal x0 error-format)
    error-notfound
        (defcon notfound "\tNo such file `")
        (la x5 notfound)
        (addi x6 x0 (len notfound))
        (jal x0 error-format)
    error-open
        (defcon open "\tUnable to open file `")
        (la x5 open)
        (addi x6 x0 (len open))
        (jal x0 error-format)
    error-read-input
        (defcon read "\tError reading file `")
        (la x5 read)
        (addi x6 x0 (len read))
    error-format
        (subi x2 x2 40)
        (sd x2 x1)
        (sd (+ x2 8) x5)
        (sd (+ x2 16) x6)
        (sd (+ x2 24) x11)
        (add x10 x0 x0)
        file-len
            (lb x5 x11)
            (addi x11 x11 1)
            (addi x10 x10 1)
            (bne x5 x0 file-len)
        (sd (+ x2 32) x10)
        (addi x10 x10 1)
        (add x10 x10 x6)
        (jal x1 malloc)
        (ld x11 (+ x2 8))
        (ld x12 (+ x2 16))
        (sd (+ x2 8) x10)
        (jal x1 strdup)
        (ld x11 (+ x2 24))
        (ld x12 (+ x2 32))
        (jal x1 strdup)
        (addi x11 x0 #'`')
        (sb x10 x11)
        (ld x1 x2)
        (ld x12 (+ x2 8))
        (addi x2 x2 40)
        (sub x11 x10 x12)
        (addi x11 x11 1)
        (add x10 x0 x12)

        (addi x12 x0 1)
        (jalr x0 x1)
)

;; Tokenizer {
;;  0   - input.start: Vec<u8>
;;  8   - input: Vec<u8>
;;  16  - input.end
;;  24  - token_pos: Vec<Token>
;;  32  - tokens.start: Vec<Token> - 16
;;  40  - tokens
;;  48  - tokens.capacity
;;  56  - token_info.start: Vec<TokenInfo> line: 0, end: 4, start: 8 - 16
;;  64  - token_info
;;  72  - token_info.capacity
;;  80  - lines.start: Vec<(usize, usize)>
;;  88  - lines
;;  96  - lines.capacity
;;  104 - filename: String
;;  112 - filename.len
;;  120 - err: bool
;; } 128
(module Tokenizer
    (define input.start 0)
    (define input 8)
    (define input.end 16)
    (define token_pos 24)
    (define tokens.start 32)
    (define tokens 40)
    (define tokens.capacity 48)
    (define token_info.start 56)
    (define token_info 64)
    (define token_info.capacity 72)
    (define lines.start 80)
    (define lines 88)
    (define lines.capacity 96)
    (define filename 104)
    (define filename.len 112)
    (define err 120)
    (define size 128)

    ;; ARGS:
    ;;  x10 - input: Vec<u8>
    ;;  x11 - input.end
    ;;  x12 - filename: String
    ;;  x13 - filename.len
    ;; RET:
    ;;  x10 - *Tokenizer
    (module new
        (subi x2 x2 40)
        (sd x2 x1)
        (sd (+ x2 8) x10)
        (sd (+ x2 16) x11)
        (sd (+ x2 24) x12)
        (sd (+ x2 32) x13)
        ;; Tokenizer
        (addi x10 x0 size)
        (jal x1 malloc)
        ;; input
        (ld x5 (+ x2 8))
        (ld x6 (+ x2 16))
        (sd (+ x10 input.start) x5)
        (sd (+ x10 input) x5)
        (sd (+ x10 input.end) x6)
        ;; filename
        (ld x5 (+ x2 24))
        (ld x6 (+ x2 32))
        (sd (+ x10 filename) x5)
        (sd (+ x10 filename.len) x6)
        (sd (+ x2 8) x10)
        ;; tokens
        (addi x10 x0 128)
        (jal x1 malloc)
        (ld x11 (+ x2 8))
        (sd (+ x11 token_pos) x10)
        (sd (+ x11 tokens.start) x10)
        (sd (+ x11 tokens) x10)
        (addi x10 x10 128)
        (sd (+ x11 tokens.capacity) x10)
        ;; token_info
        (addi x10 x0 128)
        (jal x1 malloc)
        (ld x11 (+ x2 8))
        (sd (+ x11 token_info.start) x10)
        (sd (+ x11 token_info) x10)
        (addi x10 x10 128)
        (sd (+ x11 token_info.capacity) x10)
        ;; token_lines
        (addi x10 x0 128)
        (jal x1 malloc)
        (ld x11 (+ x2 8))
        (sd (+ x11 lines.start) x10)
        (sd (+ x11 lines) x10)
        (addi x10 x10 128)
        (sd (+ x11 lines.capacity) x10)
        (sd (+ x11 err) x0)
        (add x10 x0 x11)
        (ld x1 x2)
        (addi x2 x2 40)
        (jalr x0 x1)
    )

    ;; ARGS:
    ;;  x10 - *Tokenizer
    (module free
        (subi x2 x2 16)
        (sd x2 x1)
        (sd (+ x2 8) x10)
        ;; tokens
        (ld x10 (+ x10 tokens.start))
        (jal x1 (alloc free))
        ;; token_info
        (ld x10 (+ x2 8))
        (ld x10 (+ x10 token_info.start))
        (jal x1 (alloc free))
        ;; lines
        (ld x10 (+ x2 8))
        (ld x10 (+ x10 lines.start))
        (jal x1 (alloc free))
        ;; Tokenizer
        (ld x10 (+ x2 8))
        (jal x1 (alloc free))
        (ld x1 x2)
        (addi x2 x2 16)
        (jalr x0 x1)
    )
)

;; ARGS:
;;  x21: Tokenizer
;; RET:
;;  x10: TokenType
;;  x11: Token value 1
;;  x12: Token value 2
;; LOCALS:
;;  x10: input
;;  x11: input.end
;;  x14: token start
;;  x15: token line
;;  x30: token type
;;  x31: item start/value 1
(module tokenize
    (ld x5 (+ x21 (Tokenizer token_pos)))
    (ld x6 (+ x21 (Tokenizer tokens)))
    (beq x5 x6 continue)
    (lb x10 x5)
    (ld x11 (+ x5 8))
    (lw x12 (+ x5 4))
    (addi x5 x5 16)
    (sd (+ x21 (Tokenizer token_pos)) x5)
    (jalr x0 x1)

    continue
    (subi x2 x2 8)
    (sd x2 x1)
    (ld x10 (+ x21 (Tokenizer input)))
    (ld x11 (+ x21 (Tokenizer input.end)))
    (module loop
        (beq x10 x11 after-loop)
        (lb x28 x10)
        (add x31 x0 x10)
        (add x14 x0 x10)
        (ld x5 (+ x21 (Tokenizer lines.start)))
        (ld x6 (+ x21 (Tokenizer lines)))
        (sub x15 x6 x5)
        (srai x15 x15 4)
        (addi x10 x10 1)

        (subi x29 x28 #'(')
        (addi x30 x0 (Token LeftParen))
        (beq x29 x0 push-token)

        (subi x29 x28 #')')
        (addi x30 x0 (Token RightParen))
        (beq x29 x0 push-token)

        (subi x29 x28 #'"')
        (beq x29 x0 string)

        (subi x29 x28 #'#')
        (beq x29 x0 literal)

        (subi x29 x28 #';')
        (beq x29 x0 comment)

        ;; Skip whitespace
        (subi x29 x28 #' ')
        (beq x29 x0 loop)
        (subi x29 x28 #'\t')
        (beq x29 x0 loop)
        (subi x29 x28 #'\r')
        (beq x29 x0 loop)
        (subi x29 x28 #'\n')
        (beq x29 x0 newline)

        ;; Ambiguous, could be a symbol or an integer
        ;; 0-9
        (subi x29 x28 #'0')
        (addi x6 x0 11)
        (bltu x29 x6 ambiguous)
        ;; a-f
        (subi x29 x28 #'a')
        (addi x6 x0 7)
        (bltu x29 x6 ambiguous)
        ;; A-F
        (subi x29 x28 #'A')
        (addi x6 x0 7)
        (bltu x29 x6 ambiguous)
        (subi x29 x28 #'+')
        (beq x29 x0 ambiguous)
        (subi x29 x28 #'-')
        (beq x29 x0 ambiguous)
        (subi x29 x28 #'_')
        (beq x29 x0 ambiguous)
        (subi x29 x28 #'o')
        (beq x29 x0 ambiguous)
        (subi x29 x28 #'x')
        (beq x29 x0 ambiguous)
        (jal x0 identifier)

        after-loop
            (jal x1 (^ newline))
            (sd (+ x21 (Tokenizer input)) x10)
            (addi x10 x0 0)
            (ld x1 x2)
            (addi x2 x2 8)
            (jalr x0 x1)
        newline
            (jal x1 (^ newline))
            (jal x0 loop)
    )

    (module identifier
        loop
            (beq x10 x11 push-symbol)

            (lb x28 x10)
            (addi x10 x10 1)

            ;; delimiters
            (subi x29 x28 #'\r')
            (beq x29 x0 after-loop)
            (subi x29 x28 #'\n')
            (beq x29 x0 after-loop)
            (subi x29 x28 #'\t')
            (beq x29 x0 after-loop)
            (subi x29 x28 #' ')
            (beq x29 x0 after-loop)
            (subi x29 x28 #'#')
            (beq x29 x0 after-loop)
            (subi x29 x28 #'"')
            (beq x29 x0 after-loop)
            (subi x29 x28 #'(')
            (beq x29 x0 after-loop)
            (subi x29 x28 #')')
            (beq x29 x0 after-loop)
            (subi x29 x28 #';')
            (beq x29 x0 after-loop)

            (jal x0 loop)
        after-loop
            (subi x10 x10 1)
            (jal x0 push-symbol)
    )

    (module push-symbol
            (subi x2 x2 16)
            (sd x2 x10)
            (sd (+ x2 8) x11)

            (sub x11 x10 x31)
            (add x10 x0 x31)
            (jal x1 string->symbol)
            (add x31 x0 x10)

            (ld x10 x2)
            (ld x11 (+ x2 8))
            (addi x2 x2 16)

            (addi x30 x0 (Token Symbol))
            (jal x0 push-token)
    )

    (module newline
        (ld x5 (+ x21 (Tokenizer lines)))
        (ld x6 (+ x21 (Tokenizer lines.capacity)))
        (bne x5 x6 after-resize)
        (subi x2 x2 40)
        (sd x2 x1)
        (sd (+ x2 8) x10)
        (sd (+ x2 16) x11)
        (sd (+ x2 24) x14)
        (sd (+ x2 32) x15)
        (addi x10 x21 (Tokenizer lines.start))
        (jal x1 resize-array)
        (add x5 x0 x10)
        (ld x1 x2)
        (ld x10 (+ x2 8))
        (ld x11 (+ x2 16))
        (ld x14 (+ x2 24))
        (ld x15 (+ x2 32))
        (addi x2 x2 40)

        after-resize
        (ld x6 (+ x21 (Tokenizer lines.start)))
        (ld x7 (+ x21 (Tokenizer input.start)))
        (beq x5 x6 newline-first)
        (ld x7 (- x5 8))
        newline-first
        (beq x7 x10 ret)
        (sd x5 x7)
        (sd (+ x5 8) x10)
        (addi x5 x5 16)
        (sd (+ x21 (Tokenizer lines)) x5)
        ret
        (jalr x0 x1)
    )

    ;; ARGS:
    ;;  x10 - input
    ;;  x11 - input.end
    ;;  x14 - start
    ;;  x15 - line
    ;;  x30 - Token type
    ;;  x31 - Token value
    (module push-token
        (subi x2 x2 40)
        (sd x2 x10)
        (sd (+ x2 8) x14)
        (sd (+ x2 16) x15)
        (sd (+ x2 24) x30)
        (sd (+ x2 32) x31)

        (ld x5 (+ x21 (Tokenizer token_info)))
        (ld x6 (+ x21 (Tokenizer token_info.capacity)))
        (bne x5 x6 after-resize-info)
        (addi x10 x21 (Tokenizer token_info.start))
        (jal x1 resize-array)
        (add x5 x0 x10)

        after-resize-info
        (ld x10 x2)
        (ld x14 (+ x2 8))
        (ld x15 (+ x2 16))
        (sw x5 x15)
        (sd (+ x5 8) x14)
        (sub x14 x10 x14)
        (sw (+ x5 4) x14)
        (addi x5 x5 16)
        (sd (+ x21 (Tokenizer token_info)) x5)
        (sd (+ x21 (Tokenizer input)) x10)

        (ld x10 (+ x21 (Tokenizer tokens)))
        (ld x17 (+ x21 (Tokenizer tokens.capacity)))
        (bne x10 x17 after-resize)
        (addi x10 x21 (Tokenizer tokens.start))
        (jal x1 resize-array)

        after-resize
        (ld x30 (+ x2 24))
        (ld x31 (+ x2 32))
        (ld x29 x2)
        (sb x10 x30)
        (sd (+ x10 8) x31)
        (subi x28 x30 (Token String))
        (bne x28 x0 done)
        (sub x29 x29 x31)
        (subi x29 x29 1)
        (sw (+ x10 4) x29)
        done
        (addi x10 x10 16)
        (sd (+ x21 (Tokenizer tokens)) x10)
        (sd (+ x21 (Tokenizer token_pos)) x10)
        (add x10 x0 x30)
        (add x11 x0 x31)
        (add x12 x0 x29)
        (ld x1 (+ x2 40))
        (addi x2 x2 48)
        (jalr x0 x1)
    )

    (module comment
        (addi x29 x0 #'\n')
        loop
            (beq x10 x11 (^ loop))

            (lb x28 x10)
            (beq x28 x29 (^ loop))
            (addi x10 x10 1)
            (jal x0 loop)
    )

    (module block-comment
        (addi x10 x10 1)
        (add x5 x0 x0)
        loop
            (beq x10 x11 err)
            (lb x6 x10)
            (addi x10 x10 1)
            (subi x7 x6 #'\n')
            (beq x7 x0 newline)
            (subi x7 x6 #'#')
            (beq x7 x0 nested)
            (subi x7 x6 #'|')
            (bne x7 x0 loop)
            (beq x10 x11 err)
            (lb x6 x10)
            (subi x6 x6 #'#')
            (bne x6 x0 loop)
            (addi x10 x10 1)
            (beq x5 x0 (^ loop))
            (subi x5 x5 1)
            (jal x0 loop)
        err
            (defcon unclosed-msg "Unclosed block comment")
            (subi x2 x2 8)
            (sd x2 x5)
            (la x5 unclosed-msg)
            (addi x6 x0 (len unclosed-msg))
            (add x7 x0 x0)
            (sd (+ x21 (Tokenizer input)) x10)
            (jal x1 print-err)
            (ld x5 x2)
            (addi x2 x2 8)
            (ld x10 (+ x21 (Tokenizer input)))
            (ld x11 (+ x21 (Tokenizer input.end)))
            (jal x0 (^ loop))
        nested
            (beq x10 x11 err)
            (lb x6 x10)
            (subi x6 x6 #'|')
            (bne x6 x0 loop)
            (addi x10 x10 1)
            (addi x5 x5 1)
            (jal x0 loop)
        newline
            (subi x2 x2 8)
            (sd x2 x5)
            (jal x1 (^ newline))
            (ld x5 x2)
            (addi x2 x2 8)
            (jal x0 loop)
    )


    (module literal
        (addi x30 x0 (Token Pound))
        (beq x10 x11 push-token)
        (lb x5 x10)
        (subi x6 x5 #'|')
        (beq x6 x0 block-comment)
        (subi x6 x5 #'\'')
        (bne x6 x0 push-token)
        (addi x10 x10 1)
        (beq x10 x11 unclosed-literal)
        (lb x31 x10)
        (addi x10 x10 1)
        (subi x6 x31 #'\'')
        (beq x6 x0 empty-err)
        (subi x6 x31 #'\n')
        (beq x6 x0 newline)
        (subi x6 x31 #'\\')
        (bne x6 x0 literal-close)

        (beq x10 x11 unclosed-literal)
        (lb x28 x10)
        (addi x10 x10 1)
        (addi x31 x0 #'\\')
        (beq x28 x31 literal-close)
        (addi x31 x0 #'\'')
        (beq x28 x31 literal-close)
        (subi x29 x28 #'r')
        (addi x31 x0 #'\r')
        (beq x29 x0 literal-close)
        (subi x29 x28 #'n')
        (addi x31 x0 #'\n')
        (beq x29 x0 literal-close)
        (subi x29 x28 #'t')
        (addi x31 x0 #'\t')
        (beq x29 x0 literal-close)
        (subi x29 x28 #'0')
        (addi x31 x0 #'\0')
        (beq x29 x0 literal-close)

        (jal x0 literal-escape)

        unclosed-literal
            (defcon unclosed-msg "Unclosed character literal")
            (la x5 unclosed-msg)
            (addi x6 x0 (len unclosed-msg))
            (add x7 x0 x0)
            (sd (+ x21 (Tokenizer input)) x10)
            (jal x1 print-err)
            (ld x10 (+ x21 (Tokenizer input)))
            (ld x11 (+ x21 (Tokenizer input.end)))
            (jal x0 (^ loop))
        newline
            (jal x1 (^ newline))
            (addi x31 x0 #'\n')
        literal-close
            (beq x10 x11 literal-close-err)
            (lb x28 x10)
            (addi x10 x10 1)
            (subi x28 x28 #'\'')
            (bne x28 x0 literal-close-err)
            (addi x30 x0 (Token Char))
            (jal x0 push-token)
        literal-close-err
            (la x5 unclosed-msg)
            (addi x6 x0 (len unclosed-msg))
            (add x7 x0 x0)
            (sd (+ x21 (Tokenizer input)) x10)
            (subi x2 x2 8)
            (sd x2 x31)
            (jal x1 print-err)
            (ld x31 x2)
            (addi x2 x2 8)
            (ld x10 (+ x21 (Tokenizer input)))
            (ld x11 (+ x21 (Tokenizer input.end)))
            (addi x30 x0 (Token Char))
            (jal x0 push-token)
        empty-err
            (defcon empty-msg "Empty character literal")
            (la x5 empty-msg)
            (addi x6 x0 (len empty-msg))
            (add x7 x0 x0)
            (sd (+ x21 (Tokenizer input)) x10)
            (jal x1 print-err)
            (ld x10 (+ x21 (Tokenizer input)))
            (ld x11 (+ x21 (Tokenizer input.end)))
            (add x31 x0 x0)
            (addi x30 x0 (Token Char))
            (jal x0 push-token)
        literal-escape
            (subi x29 x28 #'\n')
            (bne x29 x0 literal-escape-continue)
            (jal x1 (^ newline))
        literal-escape-continue
            (defvar escape-msg "Bad escape sequence `\\\0` in character literal")
            (la x5 escape-msg)
            (addi x6 x5 22)
            (sb x6 x28)
            (addi x6 x0 (len escape-msg))
            (add x7 x0 x0)
            (sd (+ x21 (Tokenizer input)) x10)
            (jal x1 print-err)
            (ld x10 (+ x21 (Tokenizer input)))
            (ld x11 (+ x21 (Tokenizer input.end)))
            (add x31 x0 x0)
            (jal x0 literal-close)
    )

    (module string
        (addi x31 x31 1)
        loop
            (beq x10 x11 err)
            (lb x28 x10)
            (addi x10 x10 1)

            (subi x29 x28 #'\\')
            (beq x29 x0 escape)
            (subi x29 x28 #'\n')
            (beq x29 x0 newline)
            (subi x29 x28 #'"')
            (bne x29 x0 loop)
        done
            (addi x30 x0 (Token String))
            (jal x0 push-token)
        newline
            (subi x2 x2 8)
            (sd x2 x31)
            (jal x1 (^ newline))
            (ld x31 x2)
            (addi x2 x2 8)
            (jal x0 loop)
        escape
            (beq x10 x11 err)
            (lb x28 x10)
            (addi x10 x10 1)

            (subi x29 x28 #'r')
            (beq x29 x0 loop)
            (subi x29 x28 #'n')
            (beq x29 x0 loop)
            (subi x29 x28 #'t')
            (beq x29 x0 loop)
            (subi x29 x28 #'0')
            (beq x29 x0 loop)
            (subi x29 x28 #'\\')
            (beq x29 x0 loop)
            (subi x29 x28 #'"')
            (beq x29 x0 loop)
            (subi x29 x28 #'\n')
            (bne x29 x0 escape-err)
            (subi x2 x2 8)
            (sd x2 x31)
            (jal x1 (^ newline))
            (ld x31 x2)
            (addi x2 x2 8)
            (addi x28 x0 #'\n')
        escape-err
            (defvar invalid-msg "Invalid string escape code `\\\0`")
            (la x5 invalid-msg)
            (addi x5 x5 (len invalid-msg))
            (sb (- x5 2) x28)
            (subi x5 x5 (len invalid-msg))
            (addi x6 x0 (len invalid-msg))
            (add x7 x0 x0)
            (sd (+ x21 (Tokenizer input)) x10)
            (subi x2 x2 16)
            (sd x2 x31)
            (sd (+ x2 8) x30)
            (jal x1 print-err)
            (ld x31 x2)
            (ld x30 (+ x2 8))
            (addi x2 x2 16)
            (ld x10 (+ x21 (Tokenizer input)))
            (ld x11 (+ x21 (Tokenizer input.end)))
            (jal x0 loop)
        err
            (defcon unclosed-str-msg "Unclosed string beginning")
            (la x5 unclosed-str-msg)
            (addi x6 x0 (len unclosed-str-msg))
            (add x7 x0 x0)
            (sd (+ x21 (Tokenizer input)) x10)
            (subi x2 x2 8)
            (sd x2 x31)
            (jal x1 print-err)
            (ld x31 x2)
            (addi x2 x2 8)
            (ld x10 (+ x21 (Tokenizer input)))
            (ld x11 (+ x21 (Tokenizer input.end)))
            (addi x30 x0 (Token String))

            (ld x5 (+ x21 (Tokenizer lines.start)))
            (ld x6 (+ x21 (Tokenizer lines)))
            (sub x7 x6 x5)
            (srai x7 x7 4)
            (bge x15 x7 push-token)
            ;; truncate
            (slli x6 x15 4)
            (add x6 x6 x5)
            (ld x10 (+ x6 8))
            (addi x6 x6 16)
            (sd (+ x21 (Tokenizer lines)) x6)
            (jal x0 push-token)
    )

    (module ambiguous
        (beq x10 x11 distinguish)
        (lb x28 x10)

        ;; Delimiter
        (subi x29 x28 #')')
        (beq x29 x0 distinguish)
        (subi x29 x28 #'(')
        (beq x29 x0 distinguish)
        (subi x29 x28 #'#')
        (beq x29 x0 distinguish)
        (subi x29 x28 #';')
        (beq x29 x0 distinguish)
        (subi x29 x28 #'"')
        (beq x29 x0 distinguish)
        (subi x29 x28 #' ')
        (beq x29 x0 distinguish)
        (subi x29 x28 #'\t')
        (beq x29 x0 distinguish)
        (subi x29 x28 #'\r')
        (beq x29 x0 distinguish)
        (subi x29 x28 #'\n')
        (beq x29 x0 distinguish)

        (addi x10 x10 1)
        ;; Still ambiguous
        ;; 0-9
        (subi x29 x28 #'0')
        (addi x6 x0 11)
        (bltu x29 x6 ambiguous)
        ;; a-f
        (subi x29 x28 #'a')
        (addi x6 x0 7)
        ;; A-F
        (bltu x29 x6 ambiguous)
        (subi x29 x28 #'A')
        (addi x6 x0 7)
        (bltu x29 x6 ambiguous)
        (subi x29 x28 #'+')
        (beq x29 x0 ambiguous)
        (subi x29 x28 #'-')
        (beq x29 x0 ambiguous)
        (subi x29 x28 #'_')
        (beq x29 x0 ambiguous)
        (subi x29 x28 #'o')
        (beq x29 x0 ambiguous)
        (subi x29 x28 #'x')
        (beq x29 x0 ambiguous)

        (jal x0 identifier)

        distinguish
            (add x28 x0 x31)
        intp
            (lb x6 x28)
            (subi x7 x6 #'+')
            (add x16 x0 x0)
            (beq x7 x0 intp-skip-sign)
            (subi x7 x6 #'-')
            (bne x7 x0 intp-skip-underscore)
            (addi x16 x0 1)
            intp-skip-sign
                (addi x28 x28 1)
                ;; Needed in case the ambiguous input is just a sign.
                (beq x28 x10 push-symbol)
            intp-skip-underscore
                (lb x6 x28)
                (subi x6 x6 #'_')
                (beq x6 x0 push-symbol)

            (add x8 x0 x0)
            ;; 0 => decimal, 1 => binary, 2 => octal, 3 => hex
            (add x5 x0 x0)
            (lb x6 x28)
            (subi x6 x6 #'0')
            (bne x6 x0 decimal-loop)
            (addi x28 x28 1)
            (beq x28 x10 int)
            (lb x6 x28)
            (addi x28 x28 1)
            (subi x7 x6 #'b')
            (addi x5 x0 1)
            (beq x7 x0 intp-underscore)
            (subi x7 x6 #'o')
            (addi x5 x0 2)
            (beq x7 x0 intp-underscore)
            (subi x7 x6 #'x')
            (addi x5 x0 3)
            (beq x7 x0 intp-underscore)
            (add x5 x0 x0)
            (subi x28 x28 2)
            (jal x0 decimal-loop)

            intp-underscore
                (beq x28 x10 push-symbol)
                (lb x6 x28)
                (addi x28 x28 1)
                (subi x6 x6 #'_')
                (beq x6 x0 intp-underscore)
                (subi x28 x28 1)
                (beq x5 x0 decimal-loop)
                (subi x5 x5 1)
                (beq x5 x0 binary-loop)
                (subi x5 x5 1)
                (beq x5 x0 octal-loop)
                (jal x0 hex-loop)

            binary-loop
                (beq x28 x10 int)
                (lb x6 x28)
                (addi x28 x28 1)
                (subi x7 x6 #'_')
                (beq x7 x0 binary-loop)
                (subi x7 x6 #'2')
                (bge x7 x0 push-symbol)
                (subi x7 x6 #'0')
                (blt x7 x0 push-symbol)
                (slli x8 x8 1)
                (add x8 x8 x7)
                (jal x0 binary-loop)
            octal-loop
                (beq x28 x10 int)
                (lb x6 x28)
                (addi x28 x28 1)
                (subi x7 x6 #'_')
                (beq x7 x0 octal-loop)
                (subi x7 x6 #'8')
                (bge x7 x0 push-symbol)
                (subi x7 x6 #'0')
                (blt x7 x0 push-symbol)
                (slli x8 x8 3)
                (add x8 x8 x7)
                (jal x0 octal-loop)
            decimal-loop
                (beq x28 x10 int)
                (lb x6 x28)
                (addi x28 x28 1)
                (subi x7 x6 #'_')
                (beq x7 x0 decimal-loop)
                (subi x7 x6 #':')
                (bge x7 x0 push-symbol)
                (subi x7 x6 #'0')
                (blt x7 x0 push-symbol)
                ;; mul 10
                (slli x6 x8 3)
                (slli x8 x8 1)
                (add x8 x8 x6)
                (add x8 x8 x7)
                (jal x0 decimal-loop)
            hex-loop
                (beq x28 x10 int)
                (lb x6 x28)
                (addi x28 x28 1)
                (subi x7 x6 #'_')
                (beq x7 x0 hex-loop)
                (subi x6 x6 #'0')
                (addi x17 x0 11)
                (bltu x6 x17 hex-int)
                (addi x6 x6 #'0')
                ;; a-f
                (subi x7 x6 #'a')
                (addi x6 x7 10)
                (addi x17 x0 7)
                (bltu x7 x17 hex-int)
                (subi x6 x6 10)
                (addi x6 x6 #'a')
                ;; A-F
                (subi x7 x6 #'A')
                (addi x6 x7 10)
                (addi x17 x0 7)
                (bltu x7 x17 hex-int)
                (jal x0 push-symbol)
            hex-int
                (slli x8 x8 4)
                (add x8 x8 x6)
                (jal x0 hex-loop)
            int
                (addi x30 x0 (Token Integer))
                (add x31 x0 x8)
                (beq x16 x0 push-token)
                (sub x31 x0 x31)
                (jal x0 push-token)
    )

    ;; ARGS:
    ;;  x5  - msg
    ;;  x6  - msg.len
    ;;  x7  - note
    ;;  x8  - note.len
    ;;  x14 - start
    ;;  x15 - line
    (module print-err
        (subi x2 x2 40)
        (sd x2 x1)
        (sd (+ x2 8) x7)
        (sd (+ x2 16) x8)
        (sd (+ x2 24) x14)
        (sd (+ x2 32) x15)

        ;; eprintln("{} at {}:{}:{}.\n{}: {}", x5, x21+104_, x15+1, _, x15+1, line)
        ;; write(STDERR, msg, msg.len)
        (addi x10 x0 STDERR)
        (add x11 x0 x5)
        (add x12 x0 x6)
        (addi x17 x0 SYS_WRITE)
        (ecall)

        (defcon at " at ")
        (addi x10 x0 STDERR)
        (la x11 at)
        (addi x12 x0 (len at))
        (ecall)

        ;; filename
        (addi x10 x0 STDERR)
        (ld x11 (+ x21 (Tokenizer filename)))
        (ld x12 (+ x21 (Tokenizer filename.len)))
        (ecall)

        (defcon colon ": ")
        (addi x10 x0 STDERR)
        (la x11 colon)
        (addi x12 x0 1)
        (ecall)

        ;; line+1
        (subi x10 x2 24)
        (ld x11 (+ x2 32))
        (addi x11 x11 1)
        (jal x1 format-int)
        (subi x11 x2 24)
        (sub x12 x10 x11)
        (addi x10 x0 STDERR)
        (ecall)

        (addi x10 x0 STDERR)
        (la x11 colon)
        (addi x12 x0 1)
        (ecall)

        ;; i+1
        (ld x10 (+ x2 24))
        (ld x5 (+ x21 (Tokenizer lines.start)))
        (ld x6 (+ x21 (Tokenizer lines)))
        (add x11 x0 x0)
        (beq x5 x6 print-i)
        idx-in-line
            (ld x7 (+ x5 8))
            (blt x10 x7 idx-after)
            (addi x5 x5 16)
            (bne x5 x6 idx-in-line)
        (subi x5 x6 8)
        idx-after
        (ld x7 x5)
        (sub x11 x10 x7)
        print-i
        (addi x11 x11 1)
        (subi x10 x2 24)
        (jal x1 format-int)
        (subi x11 x2 24)
        (sub x12 x10 x11)
        (addi x10 x0 STDERR)
        (ecall)

        (defcon period ".\n")
        (addi x10 x0 STDERR)
        (la x11 period)
        (addi x12 x0 (len period))
        (ecall)

        ;; note?
        (ld x11 (+ x2 8))
        (beq x11 x0 after-note)
        (ld x12 (+ x2 16))
        (addi x10 x0 STDERR)
        (ecall)

        ;; \n
        (addi x10 x0 STDERR)
        (la x11 period)
        (addi x11 x11 1)
        (addi x12 x0 1)
        (ecall)

        after-note
        ;; line+1
        (subi x10 x2 24)
        (ld x11 (+ x2 32))
        (addi x11 x11 1)
        (jal x1 format-int)
        (subi x11 x2 24)
        (sub x12 x10 x11)
        (addi x10 x0 STDERR)
        (ecall)

        (addi x10 x0 STDERR)
        (la x11 colon)
        (addi x12 x0 (len colon))
        (ecall)

        ;; l
        (ld x11 (+ x21 (Tokenizer input.start)))
        (ld x5 (+ x21 (Tokenizer lines.start)))
        (ld x6 (+ x21 (Tokenizer lines)))
        (beq x5 x6 line-end)
        (sub x7 x6 x5)
        (srai x7 x7 4)
        (ld x10 (+ x2 32))
        (ld x11 (- x6 8))
        (bge x10 x6 line-end)
        (slli x10 x10 4)
        (add x10 x10 x5)
        (ld x11 x10)

        line-end
        (ld x5 (+ x2 24))
        (ld x6 (+ x21 (Tokenizer input.end)))
        (sub x12 x6 x11)
        (beq x5 x6 print-line)
        line-end-loop
            (lb x7 x5)
            (addi x5 x5 1)
            (subi x7 x7 #'\n')
            (beq x7 x0 line-end-loop-after)
            (bne x5 x6 line-end-loop)
        line-end-loop-after
        (sub x12 x5 x11)

        print-line
        (addi x10 x0 STDERR)
        (ecall)
        ;; \n
        (addi x10 x0 STDERR)
        (la x11 period)
        (addi x11 x11 1)
        (addi x12 x0 1)
        (ecall)

        (ld x1 x2)
        (ld x14 (+ x2 24))
        (ld x15 (+ x2 32))
        (addi x2 x2 40)

        (addi x5 x0 1)
        (sd (+ x21 (Tokenizer err)) x5)
        (jalr x0 x1)
    )
)

;; Module {
;;  0 parent: Ptr<Module>,
;;  8 children.start: Map<Symbol, (bool, Unit)>, - 24 iuuc
;;  16 children
;;  24 children.capacity
;;  32 filep/location: usize,
;;  40 path: String
;;  48 path.len
;;  56 code.start: Vec<u8>
;;  64 code
;;  72 code.capacity
;;  80 labels: Map<Symbol, usize> - 16
;;  88 labels.len
;;  96 labels.capacity
;;  104 jumps.start: Vec<(Symbol, usize, JumpType)> - 16
;;  112 jumps
;;  120 jumps.capacity
;;  128 refs.start: Vec<(Path, usize, JumpType)> - 24
;;  136 refs
;;  144 refs.capacity
;;  152 rewrites.start: Vec<(usize, (usize << 1) | bool)> - 16
;;  160 rewrites
;;  168 rewrites.capacity
;; } 176
(module Module
    (define parent 0)
    (define children 8)
    (define children.len 16)
    (define children.capacity 24)
    (define filep 32)
    (define location 36)
    (define path 40)
    (define path.len 48)
    (define code.start 56)
    (define code 64)
    (define code.capacity 72)
    (define labels 80)
    (define labels.len 88)
    (define labels.capacity 96)
    (define jumps.start 104)
    (define jumps 112)
    (define jumps.capacity 120)
    (define refs.start 128)
    (define refs 136)
    (define refs.capacity 144)
    (define rewrites.start 152)
    (define rewrites 160)
    (define rewrites.capacity 168)
    (define size 176)

    ;; ARGS:
    ;;  x10 - parent
    ;;  x11 - filep
    ;; RET:
    ;;  x10 - *Module
    (module new
        (subi x2 x2 24)
        (sd x2 x1)
        (sd (+ x2 8) x10)
        (sd (+ x2 16) x11)
        (addi x10 x0 size)
        (jal x1 malloc)
        (ld x11 (+ x2 8))
        (ld x12 (+ x2 16))
        (sd (+ x10 parent) x11)
        (sw (+ x10 filep) x12)
        (sd (+ x2 8) x10)
        ;; children
        (addi x10 x0 384)
        (jal x1 calloc)
        (ld x11 (+ x2 8))
        (sd (+ x11 children) x10)
        (sd (+ x11 children.len) x0)
        (addi x10 x0 16)
        (sd (+ x11 children.capacity) x10)
        ;; code
        (addi x10 x0 64)
        (jal x1 malloc)
        (ld x11 (+ x2 8))
        (sd (+ x11 code.start) x10)
        (sd (+ x11 code) x10)
        (addi x10 x10 64)
        (sd (+ x11 code.capacity) x10)
        ;; labels
        (addi x10 x0 256)
        (jal x1 calloc)
        (ld x11 (+ x2 8))
        (sd (+ x11 labels) x10)
        (sd (+ x11 labels.len) x0)
        (addi x10 x0 16)
        (sd (+ x11 labels.capacity) x10)
        ;; jumps
        (addi x10 x0 128)
        (jal x1 malloc)
        (ld x11 (+ x2 8))
        (sd (+ x11 jumps.start) x10)
        (sd (+ x11 jumps) x10)
        (addi x10 x10 128)
        (sd (+ x11 jumps.capacity) x10)
        ;; refs
        (addi x10 x0 384)
        (jal x1 malloc)
        (ld x11 (+ x2 8))
        (sd (+ x11 refs.start) x10)
        (sd (+ x11 refs) x10)
        (addi x10 x10 384)
        (sd (+ x11 refs.capacity) x10)
        ;; rewrites
        (addi x10 x0 128)
        (jal x1 malloc)
        (ld x11 (+ x2 8))
        (sd (+ x11 rewrites.start) x10)
        (sd (+ x11 rewrites) x10)
        (addi x10 x10 128)
        (sd (+ x11 rewrites.capacity) x10)

        (add x10 x0 x11)
        (ld x1 x2)
        (addi x2 x2 24)
        (jalr x0 x1)
    )

    ;; ARGS:
    ;;  x10 - *Module
    ;; RET:
    ;;  x10 - jumps: Vec<(Symbol, usize, JumpType)>
    ;;  x11 - jumps.end
    ;;  x12 - err
    (module finish
        (subi x2 x2 56)
        (sd x2 x1)
        (sd (+ x2 8) x10)
        (sd (+ x2 48) x0)
        (ld x11 (+ x10 (Module jumps.start)))
        (ld x10 (+ x10 (Module jumps)))
        (sub x10 x10 x11)
        (jal x1 malloc)
        (sd (+ x2 16) x10)
        (sd (+ x2 24) x10)
        (ld x5 (+ x2 8))
        (ld x6 (+ x5 (Module jumps.start)))
        (ld x7 (+ x5 (Module jumps)))
        (sd (+ x2 32) x6)
        (sd (+ x2 40) x7)

        jumps-loop
            (beq x6 x7 done)
            (addi x10 x5 (Module labels))
            (ld x11 x6)
            (addi x6 x6 16)
            (sd (+ x2 32) x6)
            (jal x1 (symbol-map16 get))
            (ld x5 (+ x2 8))
            (ld x6 (+ x2 32))
            (beq x11 x0 add-jump)
            (ld x11 (+ x5 (Module code.start)))
            (ld x12 (- x6 8))
            (ld x13 (- x6 16))
            (add x14 x0 x0)
            (jal x1 rewrite-instruction)
            (ld x5 (+ x2 8))
            (ld x6 (+ x2 32))
            (ld x7 (+ x2 40))
            (beq x10 x0 jumps-loop)
            (sd (+ x2 48) x10)
            (jal x0 jumps-loop)

        add-jump
            (ld x7 (+ x2 40))
            (ld x9 (+ x2 24))
            (ld x8 (- x6 16))
            (sd x9 x8)
            (ld x8 (- x6 8))
            (sd (+ x9 8) x8)
            (addi x9 x9 16)
            (sd (+ x2 24) x9)
            (jal x0 jumps-loop)

        done
            (ld x10 (+ x2 16))
            (ld x11 (+ x2 24))
            (ld x12 (+ x2 48))
            (ld x1 x2)
            (addi x2 x2 56)
            (jalr x0 x1)
    )
)

;; ARGS:
;;  x10 - p
;;  x11 - code.start
;;  x12 - i
;;  x13 - label
;;  x14 - label.len
;; RET:
;;  x10 - err
(module rewrite-instruction
    (andi x31 x12 1)
    (andi x12 x12 -2)
    (sub x30 x10 x12)
    (bne x31 x0 branch)

    jump
        ;; 1048576
        (addi x31 x0 1)
        (slli x31 x31 20)
        (bge x30 x31 jrange)
        (sub x31 x0 x31)
        (blt x30 x31 jrange)

        ;; (imm & 0x10_00_00) >> 1
        (addi x31 x0 1)
        (slli x31 x31 20)
        (and x31 x30 x31)
        (srai x31 x31 1)

        ;;(imm >> 1) & 0x3ff) << 9
        (srai x29 x30 1)
        (andi x29 x29 1023)
        (slli x29 x29 9)
        (or x31 x31 x29)

        ;; ((imm >> 11) & 1) << 8
        (srai x29 x30 11)
        (andi x29 x29 1)
        (slli x29 x29 8)
        (or x31 x31 x29)

        ;; (imm >> 12) & 0xff
        (srai x29 x30 12)
        (andi x29 x29 255)
        (or x31 x31 x29)

        (slli x31 x31 12)
        (add x29 x11 x12)
        (lw x30 x29)
        (or x30 x30 x31)
        (sw x29 x30)
        (add x10 x0 x0)
        (jalr x0 x1)

    branch
        (addi x31 x0 1)
        (slli x31 x31 12)
        (bge x30 x31 brange)
        (sub x31 x0 x31)
        (blt x30 x31 brange)
        ;; imm1
        (andi x29 x30 0x1e)
        (srai x31 x30 11)
        (andi x31 x31 1)
        (or x31 x31 x29)
        (slli x31 x31 7)
        ;; imm2
        (srai x29 x30 6)
        (andi x29 x29 0x40)
        (srai x30 x30 5)
        (andi x30 x30 0x3f)
        (or x30 x30 x29)
        (slli x30 x30 25)

        (add x29 x11 x12)
        (lw x28 x29)
        (or x28 x28 x31)
        (or x28 x28 x30)
        (sw x29 x28)
        (add x10 x0 x0)
        (jalr x0 x1)

    jrange
        (defcon j-msg "Jump to `")
        (defcon j-msg2 "` too far.")
        (la x5 j-msg)
        (addi x6 x0 (len j-msg))
        (jal x0 print)
    brange
        (defcon b-msg "Branch to `")
        (la x5 b-msg)
        (addi x6 x0 (len b-msg))
    print
        (la x7 j-msg2)
        (addi x8 x0 (len j-msg2))
        (subi x2 x2 56)
        (sd (+ x2 48) x1)
        (sd x2 x5)
        (sd (+ x2 8) x6)
        (sd (+ x2 16) x7)
        (sd (+ x2 24) x8)
        (add x10 x0 x13)
        (beq x14 x0 print-sym)
        (add x11 x0 x14)
        (sd (+ x2 32) x10)
        (jal x1 (assemble path->string))
        (sd (+ x2 40) x10)
        ;; free path
        (ld x10 (+ x2 32))
        (sd (+ x2 32) x11)
        (jal x1 free)
        (ld x11 (+ x2 32))
        (ld x10 (+ x2 40))
        (jal x0 print-print)
        print-sym
        (jal x1 symbol->string)
        print-print
        (sd (+ x2 32) x10)
        (sd (+ x2 40) x11)
        (add x10 x0 x11)
        (ld x11 (+ x2 8))
        (add x10 x10 x11)
        (ld x11 (+ x2 24))
        (add x10 x10 x11)
        (jal x1 malloc)
        (ld x11 x2)
        (ld x12 (+ x2 8))
        (sd x2 x10)
        (jal x1 strdup)
        (ld x11 (+ x2 32))
        (ld x12 (+ x2 40))
        (jal x1 strdup)
        (ld x11 (+ x2 16))
        (ld x12 (+ x2 24))
        (jal x1 strdup)
        (ld x11 x2)
        (sub x12 x10 x11)
        (addi x10 x0 STDERR)
        (addi x17 x0 SYS_WRITE)
        (ecall)
        ;; free string
        (ld x10 x2)
        (jal x1 free)
        ;; free path string
        (ld x10 (+ x2 32))
        (jal x1 free)
        (ld x1 (+ x2 48))
        (addi x2 x2 56)
        (addi x10 x0 1)
        (jalr x0 x1)
)

;; Asm {
;;  0   - modules.start: Vec<*Module>
;;  8   - modules
;;  16  - modules.capacity
;;  24  - module: *Module
;;  32  - data.start: Vec<u8>
;;  40  - data
;;  48  - data.capacity
;;  56  - rodata.start: Vec<u8>
;;  64  - rodata
;;  72  - rodata.capacity
;;  80  - import_files.start: Vec<PathBuf, *Module>
;;  88  - import_files
;;  96  - import_files.capacity
;; } 104
(module Asm
    (define modules.start 0)
    (define modules 8)
    (define modules.capacity 16)
    (define module 24)
    (define data.start 32)
    (define data 40)
    (define data.capacity 48)
    (define rodata.start 56)
    (define rodata 64)
    (define rodata.capacity 72)
    (define import_files.start 80)
    (define import_files 88)
    (define import_files.capacity 96)
    (define size 104)

    (module new
        (subi x2 x2 32)
        (sd x2 x1)
        ;; Assembler
        (addi x10 x0 size)
        (jal x1 malloc)
        (add x20 x0 x10)
        ;; modules
        (addi x10 x0 256)
        (jal x1 malloc)
        (sd (+ x20 modules.start) x10)
        (sd (+ x20 modules) x10)
        (addi x10 x10 256)
        (sd (+ x20 modules.capacity) x10)
        ;; data
        (addi x10 x0 1024)
        (jal x1 malloc)
        (sd (+ x20 data.start) x10)
        (sd (+ x20 data) x10)
        (addi x10 x10 1024)
        (sd (+ x20 data.capacity) x10)
        ;; rodata
        (addi x10 x0 1024)
        (jal x1 malloc)
        (sd (+ x20 rodata.start) x10)
        (sd (+ x20 rodata) x10)
        (addi x10 x10 1024)
        (sd (+ x20 rodata.capacity) x10)
        ;; import_files
        (addi x10 x0 1024)
        (jal x1 malloc)
        (sd (+ x20 import_files.start) x10)
        (sd (+ x20 import_files) x10)
        (addi x10 x10 1024)
        (sd (+ x20 import_files.capacity) x10)

        (ld x5 (+ x21 (Tokenizer filename)))
        (ld x7 (+ x21 (Tokenizer filename.len)))
        (add x6 x5 x7)
        root-path
            (lb x8 (- x6 1))
            (subi x8 x8 #'/')
            (beq x8 x0 root-path-after)
            (subi x6 x6 1)
            (subi x7 x7 1)
            (bne x5 x6 root-path)
        root-path-after
        (sd (+ x2 8) x5)
        (sd (+ x2 16) x7)
        ;; room for null byte
        (addi x10 x7 1)
        (jal x1 malloc)
        (ld x11 (+ x2 8))
        (ld x12 (+ x2 16))
        (sd (+ x2 24) x10)
        (jal x1 strdup)

        (add x10 x0 x0)
        (addi x11 x0 1)
        (jal x1 (Module new))
        (ld x5 (+ x20 modules))
        (sd x5 x10)
        (ld x6 (+ x2 24))
        (ld x7 (+ x2 16))
        (sd (+ x10 (Module path)) x6)
        (sd (+ x10 (Module path.len)) x7)
        (sd (+ x2 24) x10)

        (ld x5 (+ x2 8))
        (ld x6 (+ x21 (Tokenizer filename.len)))
        (add x6 x6 x5)
        (add x8 x0 x6)
        (subi x6 x6 1)
        (add x5 x5 x7)
        modname-loop
            (lb x7 x6)
            (subi x7 x7 #'.')
            (beq x7 x0 modname-loop-after)
            (subi x6 x6 1)
            (bne x5 x6 modname-loop)
        (add x6 x0 x8)
        modname-loop-after
        (sub x11 x6 x5)
        (add x10 x0 x5)
        (jal x1 string->symbol)
        (sd (+ x2 8) x10)

        (ld x10 (+ x2 24))
        (addi x11 x0 1)
        (jal x1 (Module new))
        (ld x5 (+ x20 modules))
        (sd (+ x5 8) x10)
        (sd (+ x20 module) x10)
        (addi x5 x5 16)
        (sd (+ x20 modules) x5)
        (ld x5 (+ x10 (Module parent)))
        (add x13 x0 x10)
        (addi x10 x5 (Module children))
        (ld x11 (+ x2 8))
        (addi x12 x0 (Unit Module))
        (jal x1 (symbol-map24 insert))

        (ld x1 x2)
        (addi x2 x2 32)
        (jalr x0 x1)
    )
)

;; ARGS:
;;  x20 - *Asm
;;  x21 - *Tokenizer
;; RET:
;;  x10: done? - bool
(module assemble
    (subi x2 x2 8)
    (sd x2 x1)
    (module loop
        (jal x1 tokenize)
        ;; Doing this makes working with add-label easier.
        (subi x1 x1 4)
        (beq x10 x0 done)
        (subi x5 x10 (Token Symbol))
        (beq x5 x0 add-label)
        (subi x5 x10 (Token RightParen))
        (beq x5 x0 rparen)
        (subi x5 x10 (Token LeftParen))
        (bne x5 x0 expr-err)

        (jal x1 tokenize)
        (beq x10 x0 opening-err)
        (subi x5 x10 (Token RightParen))
        (beq x5 x0 empty)
        (subi x5 x10 (Token Symbol))
        (bne x5 x0 expr-value-err)

        (subi x5 x11 Instr::include!)
        (beq x5 x0 handle-include)
        (subi x5 x11 Instr::define)
        (beq x5 x0 handle-define)
        (subi x10 x11 Instr::defvar)
        (addi x5 x0 2)
        (bltu x10 x5 handle-defcon/var)
        (subi x5 x11 Instr::module)
        (beq x5 x0 handle-module)
        (subi x5 x11 Instr::import)
        (beq x5 x0 handle-import)
        (jal x0 handle-opcode)

        rparen
            (ld x5 (+ x21 (Tokenizer token_pos)))
            (subi x5 x5 16)
            (sd (+ x21 (Tokenizer token_pos)) x5)
            (ld x1 x2)
            (addi x2 x2 8)
            (addi x10 x0 1)
            (jalr x0 x1)
        done
            (ld x1 x2)
            (addi x2 x2 8)
            (add x10 x0 x0)
            (jalr x0 x1)
        empty
            (defcon empty-err "Empty expression ending")
            (la x5 empty-err)
            (addi x6 x0 (len empty-err))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 loop)
        opening-err
            (defcon opening-err "Unexpected opening parenthesis")
            (la x5 opening-err)
            (addi x6 x0 (len opening-err))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 done)
        expr-value-err
            (defcon expr-value-err "Unexpected value in expression")
            (la x5 expr-value-err)
            (addi x6 x0 (len expr-value-err))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x1 skip-opcode)
            (jal x0 loop)
        expr-err
            (defcon expr-err "Expression must be a label or an S-Expression")
            (la x5 expr-err)
            (addi x6 x0 (len expr-err))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 loop)
    )

    ;; ARGS:
    ;;  x11: symbol
    (module add-label
        (subi x2 x2 16)
        (sd x2 x1)
        (sd (+ x2 8) x11)

        (ld x10 (+ x20 (Asm module)))
        (addi x10 x10 (Module labels))
        (jal x1 (symbol-map16 entry))
        (ld x6 x5)
        (bne x6 x0 duplicate-err)
        (subi x10 x10 (Module labels))
        (addi x10 x10 (Module children))
        (jal x1 (symbol-map24 entry))
        (ld x6 x5)
        (bne x6 x0 conflict-err)
        (subi x10 x10 (Module children))
        (ld x5 (+ x10 (Module code.start)))
        (ld x6 (+ x10 (Module code)))
        (sub x12 x6 x5)
        (addi x10 x10 (Module labels))
        (ld x11 (+ x2 8))
        (add x13 x0 x0)
        (jal x1 (symbol-map16 insert))
        ret
        (ld x1 x2)
        (addi x2 x2 16)
        (jalr x0 x1)

        duplicate-err
            (defcon duplicate "Duplicate label `")
            (la x5 duplicate)
            (addi x6 x0 (len duplicate))
            (add x7 x5 x6)
            (subi x7 x7 1)
            (addi x8 x0 1)
            (jal x0 print)
        conflict-err
            (defcon conflict "Label `")
            (defcon conflict2 "` conflicts with module/definition")
            (la x5 conflict)
            (addi x6 x0 (len conflict))
            (la x7 conflict2)
            (addi x8 x0 (len conflict2))
        print
            (add x10 x0 x11)
            (add x11 x0 x0)
            (jal x1 print-err-symbol)
            (jal x0 ret)
    )

    (module handle-include
        (subi x2 x2 16)
        (jal x1 tokenize)
        (beq x10 x0 eof)
        (subi x5 x10 (Token RightParen))
        (beq x5 x0 parenthesis-err)
        (subi x5 x10 (Token String))
        (bne x5 x0 string-err)
        (jal x1 get-string)
        (sd x2 x10)
        (sd (+ x2 8) x11)
        (ld x12 (+ x21 (Tokenizer filename)))
        (ld x13 (+ x21 (Tokenizer filename.len)))
        (jal x1 str-eq?)
        (bne x10 x0 recursive-err)

        (jal x1 tokenize)
        (beq x10 x0 eof-free)
        (subi x5 x10 (Token String))
        (beq x5 x0 multiple-err)
        (subi x5 x10 (Token RightParen))
        (bne x5 x0 expr-err)

        (ld x10 x2)
        (ld x11 (+ x2 8))
        ;; room for null terminator
        (addi x11 x11 1)
        (jal x1 realloc)
        (sd x2 x10)
        (add x11 x0 x10)
        (jal x1 read-file)
        (bne x12 x0 read-err)
        (ld x12 x2)
        (ld x13 (+ x2 8))
        (jal x1 (Tokenizer new))
        (sd x2 x21)
        (add x21 x0 x10)
        asm-loop
            (jal x1 assemble)
            (beq x10 x0 asm-after)
            (ld x5 (+ x21 (Tokenizer token_pos)))
            (addi x5 x5 16)
            (sd (+ x21 (Tokenizer token_pos)) x5)
            (defcon paren-msg "Unexpected closing parenthesis")
            (la x5 paren-msg)
            (addi x6 x0 (len paren-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 asm-loop)
        asm-after

        (ld x10 (+ x21 (Tokenizer filename)))
        (jal x1 free)
        ;; munmap file
        (ld x10 (+ x21 (Tokenizer input.start)))
        (ld x11 (+ x21 (Tokenizer input.end)))
        (sub x11 x11 x10)
        (addi x17 x0 SYS_MUNMAP)
        (ecall)
        (ld x5 (+ x21 (Tokenizer err)))
        (add x10 x0 x21)
        (ld x21 x2)
        (ld x6 (+ x21 (Tokenizer err)))
        (or x6 x5 x6)
        (sd (+ x21 (Tokenizer err)) x6)
        (jal x1 (Tokenizer free))
        (addi x2 x2 16)
        (jal x0 loop)

        eof-free
            (ld x10 x2)
            (jal x1 free)
        eof
            (defcon eof-msg "Unexpected EOF in `include!`")
            (la x5 eof-msg)
            (addi x6 x0 (len eof-msg))
        print
            (add x7 x0 x0)
            (jal x1 print-err)
            (addi x2 x2 16)
            (jal x0 loop)
        parenthesis-err
            (defcon parenthesis-msg "Unexpected parenthesis")
            (la x5 parenthesis-msg)
            (addi x6 x0 (len parenthesis-msg))
            (jal x0 print)
        string-err
            (defcon string-msg "`include!` file must be a string")
            (la x5 string-msg)
            (addi x6 x0 (len string-msg))
        print-skip
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x1 skip-opcode)
            (addi x2 x2 16)
            (jal x0 loop)
        recursive-err
            (defcon recursive-msg "Recursive include")
            (ld x10 x2)
            (jal x1 free)
            (la x5 recursive-msg)
            (addi x6 x0 (len recursive-msg))
            (jal x0 print-skip)
        multiple-err
            (defcon multiple-msg "Each file needs its own include statement")
            (ld x10 x2)
            (jal x1 free)
            (la x5 multiple-msg)
            (addi x6 x0 (len multiple-msg))
            (jal x0 print-skip)
        expr-err
            (defcon expr-msg "Unexpected expression in include statement")
            (ld x10 x2)
            (jal x1 free)
            (la x5 expr-msg)
            (addi x6 x0 (len expr-msg))
            (jal x0 print-skip)
        read-err
            (defcon read-msg "Error executing `include!`")
            (la x5 read-msg)
            (addi x6 x0 (len read-msg))
            (add x7 x0 x10)
            (add x8 x0 x11)
            (sd (+ x2 8) x10)
            (jal x1 print-err)
            ;; free(msg)
            (ld x10 (+ x2 8))
            (jal x1 free)
            ;; free filename
            (ld x10 x2)
            (jal x1 free)
            (addi x2 x2 16)
            (jal x0 loop)
    )

    (module handle-define
        (jal x1 unwrap-ident)
        (beq x10 x0 loop)
        (subi x2 x2 16)
        (sd x2 x10)
        (jal x1 tokenize)
        (beq x10 x0 eof)
        (subi x5 x10 (Token RightParen))
        (beq x5 x0 empty-def)
        (subi x5 x10 (Token Pound))
        (beq x5 x0 constant-err-note)
        (subi x5 x10 (Token String))
        (beq x5 x0 constant-err-note)
        (subi x5 x10 (Token Integer))
        (beq x5 x0 define-imm)
        (subi x5 x10 (Token Char))
        (bne x5 x0 constant-err)
        define-imm
        (sd (+ x2 8) x11)
        (ld x10 x2)
        (jal x1 in-scope?)
        (bne x10 x0 conflict)
        (ld x11 x2)
        (addi x12 x0 (Unit Constant))
        (ld x13 (+ x2 8))
        (add x14 x0 x0)
        (ld x10 (+ x20 (Asm module)))
        (addi x10 x10 (Module children))
        (jal x1 (symbol-map24 insert))

        ret
        (jal x1 tokenize)
        (subi x10 x10 (Token RightParen))
        (beq x10 x0 retret)
        ;; backtrack
        (ld x5 (+ x21 (Tokenizer token_pos)))
        (subi x5 x5 16)
        (sd (+ x21 (Tokenizer token_pos)) x5)
        (ld x6 (+ x21 (Tokenizer tokens.start)))
        (sub x5 x5 x6)
        (ld x6 (+ x21 (Tokenizer token_info.start)))
        (add x6 x6 x5)
        (lw x6 x6)
        (sw x2 x6)
        (defcon unclosed-msg "Unclosed definition")
        (la x5 unclosed-msg)
        (addi x6 x0 (len unclosed-msg))
        (add x7 x0 x0)
        (jal x1 print-err)
        ;; same_line?
        (lw x5 x2)
        (ld x6 (+ x21 (Tokenizer token_pos)))
        (addi x6 x6 16)
        (ld x7 (+ x21 (Tokenizer tokens.start)))
        (sub x6 x6 x7)
        (ld x7 (+ x21 (Tokenizer token_info.start)))
        (add x6 x6 x7)
        (lw x6 x6)
        (bne x5 x6 retret)
        ;; next
        (ld x5 (+ x21 (Tokenizer token_pos)))
        (addi x5 x5 16)
        (sd (+ x21 (Tokenizer token_pos)) x5)
        (jal x1 skip-opcode)
        retret
        (addi x2 x2 16)
        (jal x0 loop)

        eof
            (defcon eof-msg "Unexpected EOF in definition `")
            (defcon eof-msg2 "` at end of file")
            (la x5 eof-msg)
            (addi x6 x0 (len eof-msg))
            (la x7 eof-msg2)
            (addi x8 x0 (len eof-msg2))
        print-sym
            (ld x10 x2)
            (addi x2 x2 16)
            (add x11 x0 x0)
            (jal x1 print-err-symbol)
            (jal x0 loop)
        empty-def
            (defcon empty-msg "Definition `")
            (defcon empty-msg2 "` must have a value")
            (la x5 empty-msg)
            (addi x6 x0 (len empty-msg))
            (la x7 empty-msg2)
            (addi x8 x0 (len empty-msg2))
            (jal x0 print-sym)
        constant-err-note
            (defcon constant-msg "` must be a constant")
            (defcon constant-note "\tNote: Define is only for build-time constants, did you mean `defcon`/`defvar`?")
            (la x5 empty-msg)
            (addi x6 x0 (len empty-msg))
            (la x7 constant-msg)
            (addi x8 x0 (len constant-msg))
            (ld x10 x2)
            (la x11 constant-note)
            (addi x12 x0 (len constant-note))
            (jal x1 print-err-symbol)
            (jal x0 ret)
        constant-err
            (la x5 empty-msg)
            (addi x6 x0 (len empty-msg))
            (la x7 constant-msg)
            (addi x8 x0 (len constant-msg))
            (jal x0 conflict-print)
        conflict
            (defcon conflict-msg "` conflicts with existing module/definition in scope")
            (la x5 empty-msg)
            (addi x6 x0 (len empty-msg))
            (la x7 conflict-msg)
            (addi x8 x0 (len conflict-msg))
        conflict-print
            (ld x10 x2)
            (add x11 x0 x0)
            (jal x1 print-err-symbol)
            (jal x0 ret)
    )

    ;; ARGS:
    ;; x10 - defcon?
    (module handle-defcon/var
        (subi x2 x2 48)
        (sd x2 x10)
        (jal x1 unwrap-ident)
        (beq x10 x0 retret)
        (sd (+ x2 8) x10)
        (jal x1 tokenize)
        (beq x10 x0 eof)
        (subi x5 x10 (Token RightParen))
        (beq x5 x0 empty-def)
        (subi x5 x10 (Token Integer))
        (beq x5 x0 imm)
        (subi x5 x10 (Token Char))
        (beq x5 x0 imm)
        (subi x5 x10 (Token String))
        (beq x5 x0 string)
        (subi x5 x10 (Token Pound))
        (bne x5 x0 constant)

            (jal x1 unwrap-array)
            (bne x10 x0 array-empty?)
            (addi x2 x2 48)
            (jal x0 loop)
            array-empty?
            (sd (+ x2 16) x10)
            (sd (+ x2 24) x11)
            (bne x11 x0 string-push)
            (defcon array-msg "Definition of empty array literal")
            (la x5 array-msg)
            (addi x6 x0 (len array-msg))
            (jal x0 string-warn)

        string
            (jal x1 get-string)
            (sd (+ x2 16) x10)
            (sd (+ x2 24) x11)
            (bne x11 x0 string-push)
            (defcon string-msg "Definition of empty string literal")
            (la x5 string-msg)
            (addi x6 x0 (len string-msg))
        string-warn
            (ld x7 (+ x21 (Tokenizer err)))
            (sd (+ x2 32) x7)
            (add x7 x0 x0)
            (jal x1 print-err)
            (ld x5 (+ x2 32))
            (sd (+ x21 (Tokenizer err)) x5)

            string-push
            (ld x8 x2)
            (addi x5 x20 (Asm data))
            (beq x8 x0 string-ptr)
            (addi x5 x20 (Asm rodata))
            string-ptr
            (sd (+ x2 32) x5)
            (ld x6 (+ x5 8))
            (ld x5 x5)
            string-align
                (andi x8 x5 7)
                (beq x8 x0 string-align-done)
                (sb x5 x0)
                (addi x5 x5 1)
                (jal x0 string-align)
            string-align-done
            (ld x11 (+ x2 24))
            (add x10 x11 x5)
            (bge x6 x10 string-resize-after)
                (ld x10 (+ x2 32))
                (sd x10 x5)
                (subi x10 x10 8)
                (jal x1 resize-array)
                (add x5 x0 x10)
                (ld x11 (+ x2 24))
            string-resize-after
            (ld x6 (+ x2 32))
            (ld x6 (- x6 8))
            (sub x6 x5 x6)
            (sd (+ x2 40) x6)
            (ld x10 (+ x2 16))
            (beq x11 x0 string-loop-after)
            (add x11 x11 x10)
            string-loop
                (lb x7 x10)
                (sb x5 x7)
                (addi x10 x10 1)
                (addi x5 x5 1)
                (bne x10 x11 string-loop)
            string-loop-after
            (ld x6 (+ x2 32))
            (sd x6 x5)
            (ld x10 (+ x2 16))
            (jal x1 free)
            (ld x10 (+ x2 8))
            (jal x1 in-scope?)
            (bne x10 x0 conflict)

            (ld x5 (+ x20 (Asm module)))
            (addi x10 x5 (Module children))
            (ld x11 (+ x2 8))
            (ld x12 (+ x2 24))
            (slli x12 x12 4)
            (ori x12 x12 (Unit Bytes))
            (ld x8 x2)
            (or x12 x12 x8)
            (ld x13 (+ x2 40))
            (add x14 x0 x0)
            (jal x1 (symbol-map24 insert))
            (jal x0 closer)

        imm
            (sd (+ x2 16) x10)
            (sd (+ x2 24) x11)
            (ld x10 (+ x2 8))
            (jal x1 in-scope?)
            (bne x10 x0 conflict)
            (ld x5 x2)
            (addi x6 x20 (Asm data))
            (beq x5 x0 imm-ptr)
            (addi x6 x20 (Asm rodata))
            imm-ptr
            (sd (+ x2 32) x6)
            (ld x7 (+ x6 8))
            (ld x6 x6)
            imm-align
                (andi x8 x6 7)
                (beq x8 x0 imm-align-done)
                (sb x6 x0)
                (addi x6 x6 1)
                (jal x0 imm-align)
            imm-align-done
            (bne x6 x7 imm-resize-after)
                (ld x10 (+ x2 32))
                (subi x10 x10 8)
                (jal x1 resize-array)
                (add x6 x0 x10)
            imm-resize-after
            (ld x10 (+ x2 16))
            (ld x11 (+ x2 24))
            (ld x5 (+ x2 32))
            (ld x5 (- x5 8))
            (sub x5 x6 x5)
            (sd (+ x2 16) x5)
            (subi x10 x10 (Token Char))
            (beq x10 x0 imm-char)
            (sd x6 x11)
            (addi x6 x6 8)
            (addi x12 x0 0b1000_0000)
            (jal x0 imm-add)

            imm-char
            (sb x6 x11)
            (addi x6 x6 1)
            (addi x12 x0 0b1_0000)

            imm-add
            (ld x5 (+ x2 32))
            (sd x5 x6)
            (ld x5 (+ x20 (Asm module)))
            (addi x10 x5 (Module children))
            (ld x11 (+ x2 8))
            (ori x12 x12 (Unit Bytes))
            ;; constant?
            (ld x6 x2)
            (or x12 x12 x6)
            ;; start
            (ld x13 (+ x2 16))
            (add x14 x0 x0)
            (jal x1 (symbol-map24 insert))

        closer
        (jal x1 tokenize)
        (subi x10 x10 (Token RightParen))
        (beq x10 x0 retret)
        ;; backtrack
        (ld x5 (+ x21 (Tokenizer token_pos)))
        (subi x5 x5 16)
        (sd (+ x21 (Tokenizer token_pos)) x5)
        (ld x6 (+ x21 (Tokenizer tokens.start)))
        (sub x5 x5 x6)
        (ld x6 (+ x21 (Tokenizer token_info.start)))
        (add x6 x6 x5)
        (lw x6 x6)
        (sw x2 x6)
        (defcon unclosed-msg "Unclosed definition")
        (la x5 unclosed-msg)
        (addi x6 x0 (len unclosed-msg))
        (add x7 x0 x0)
        (jal x1 print-err)
        ;; same_line?
        (lw x5 x2)
        (ld x6 (+ x21 (Tokenizer token_pos)))
        (addi x6 x6 16)
        (ld x7 (+ x21 (Tokenizer tokens.start)))
        (sub x6 x6 x7)
        (ld x7 (+ x21 (Tokenizer token_info.start)))
        (add x6 x6 x7)
        (lw x6 x6)
        (bne x5 x6 retret)
        ;; next
        (ld x5 (+ x21 (Tokenizer token_pos)))
        (addi x5 x5 16)
        (sd (+ x21 (Tokenizer token_pos)) x5)
        (jal x1 skip-opcode)
        retret
        (addi x2 x2 48)
        (jal x0 loop)

        eof
            (defcon eof-msg "Unexpected EOF in definition `")
            (defcon eof-msg2 "` at end of file")
            (la x5 eof-msg)
            (addi x6 x0 (len eof-msg))
            (la x7 eof-msg2)
            (addi x8 x0 (len eof-msg2))
        ret-err
            (ld x10 (+ x2 8))
            (addi x2 x2 48)
            (add x11 x0 x0)
            (jal x1 print-err-symbol)
            (jal x0 loop)
        empty-def
            (defcon empty-msg "Definition `")
            (defcon empty-msg2 "` must have a value")
            (la x5 empty-msg)
            (addi x6 x0 (len empty-msg))
            (la x7 empty-msg2)
            (addi x8 x0 (len empty-msg2))
            (jal x0 ret-err)
        constant
            (defcon constant-msg "` must be a constant")
            (la x7 constant-msg)
            (addi x8 x0 (len constant-msg))
            (jal x0 conflict-print)
        conflict
            (defcon conflict-msg "` conflicts with existing module/definition in scope")
            (la x7 conflict-msg)
            (addi x8 x0 (len conflict-msg))
        conflict-print
            (la x5 empty-msg)
            (addi x6 x0 (len empty-msg))
            (ld x10 (+ x2 8))
            (add x11 x0 x0)
            (jal x1 print-err-symbol)
            (jal x0 closer)
    )

    (module handle-module
        (jal x1 tokenize)
        (beq x10 x0 unfinished-err)
        (subi x5 x10 (Token RightParen))
        (beq x5 x0 unfinished-err)
        (subi x5 x10 (Token LeftParen))
        (beq x5 x0 declaration-err-backtrack)
        (subi x5 x10 (Token Symbol))
        (bne x5 x0 declaration-err)

        continue
        (subi x2 x2 16)
        (sd x2 x11)
        (ld x10 (+ x20 (Asm module)))
        (add x11 x0 x0)
        (jal x1 (Module new))
        (sd (+ x2 8) x10)
        ;; add to modules
        (ld x5 (+ x20 (Asm modules)))
        (ld x6 (+ x20 (Asm modules.capacity)))
        (bne x5 x6 resize-modules-after)
            (addi x10 x20 (Asm modules.start))
            (jal x1 resize-array)
            (add x5 x0 x10)
            (ld x10 (+ x2 8))
        resize-modules-after
        (sd x5 x10)
        (addi x5 x5 8)
        (sd (+ x20 (Asm modules)) x5)

        ;; add label
        (addi x10 x10 (Module labels))
        (ld x11 x2)
        (add x12 x0 x0)
        (jal x1 (symbol-map16 insert))
        (ld x10 (+ x2 8))

        ;; add to children
        (add x13 x0 x10)
        (ld x10 (+ x20 (Asm module)))
        (addi x10 x10 (Module children))
        (ld x11 x2)
        (addi x12 x0 (Unit Module))
        (add x14 x0 x0)
        (jal x1 (symbol-map24 insert))
        (bne x10 x0 conflict)
        after-conflict
        (ld x10 (+ x2 8))
        (sd (+ x20 (Asm module)) x10)
        (jal x1 assemble)
        (jal x1 tokenize)
        (subi x5 x10 (Token RightParen))
        (bne x5 x0 unclosed-err)
        ret
        (ld x10 (+ x2 8))
        (ld x10 (+ x10 (Module parent)))
        (sd (+ x20 (Asm module)) x10)
        (addi x2 x2 16)
        (jal x0 loop)

        unfinished-err
            (defcon unfinished-msg "Unfinished module declaration")
            (la x5 unfinished-msg)
            (addi x6 x0 (len unfinished-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 loop)
        declaration-err
            (defcon declaration-msg "Invalid module declaration, expected identifier")
            (la x5 declaration-msg)
            (addi x6 x0 (len declaration-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (add x11 x0 x0)
            (jal x0 continue)
        declaration-err-backtrack
            (la x5 declaration-msg)
            (addi x6 x0 (len declaration-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            ;; backtrack
            (ld x5 (+ x21 24))
            (subi x5 x5 16)
            (sd (+ x21 24) x5)
            (add x11 x0 x0)
            (jal x0 continue)
        conflict
            (defcon conflict-msg "Module `")
            (defcon conflict-msg2 "` conflicts with existing module/definition in scope")
            (la x5 conflict-msg)
            (addi x6 x0 (len conflict-msg))
            (la x7 conflict-msg2)
            (addi x8 x0 (len conflict-msg2))
            (ld x10 x2)
            (add x11 x0 x0)
            (jal x1 print-err-symbol)
            (jal x0 after-conflict)
        unclosed-err
            (defcon unclosed-msg "Unclosed module `")
            (la x5 unclosed-msg)
            (addi x6 x0 (len unclosed-msg))
            (add x7 x5 x6)
            (subi x7 x7 1)
            (addi x8 x0 1)
            (ld x10 x2)
            (add x11 x0 x0)
            (jal x1 print-err-symbol)
            (jal x0 ret)
    )

    ;; ARGS:
    ;;  x5 - *msg1
    ;;  x6 - msg1.len
    ;;  x7 - *msg2
    ;;  x8 - msg2.len
    ;;  x10 - symbol
    ;; RET:
    ;;  x5 - msg
    ;;  x6 - msg.len
    (module format-symbol
        (subi x2 x2 56)
        (sd x2 x1)
        (sd (+ x2 8) x5)
        (sd (+ x2 16) x6)
        (sd (+ x2 24) x7)
        (sd (+ x2 32) x8)
        (jal x1 symbol->string)
        (sd (+ x2 40) x10)
        (sd (+ x2 48) x11)
        (ld x10 (+ x2 16))
        (add x10 x10 x11)
        (ld x11 (+ x2 32))
        (add x10 x10 x11)
        (jal x1 malloc)
        (ld x11 (+ x2 8))
        (ld x12 (+ x2 16))
        (sd (+ x2 8) x10)
        (jal x1 strdup)
        (ld x11 (+ x2 40))
        (ld x12 (+ x2 48))
        (jal x1 strdup)
        (ld x11 (+ x2 24))
        (ld x12 (+ x2 32))
        (jal x1 strdup)
        (ld x5 (+ x2 8))
        (sub x6 x10 x5)
        (ld x1 x2)
        (addi x2 x2 56)
        (jalr x0 x1)
    )

    ;; ARGS:
    ;;  x5 - *msg1
    ;;  x6 - msg1.len
    ;;  x7 - *msg2
    ;;  x8 - msg2.len
    ;;  x10 - symbol
    ;;  x11 - *note
    ;;  x12 - *note.len
    (module print-err-symbol
        (subi x2 x2 32)
        (sd x2 x1)
        (sd (+ x2 8) x11)
        (sd (+ x2 16) x12)
        (jal x1 format-symbol)
        (sd (+ x2 24) x5)
        (ld x7 (+ x2 8))
        (ld x8 (+ x2 16))
        (jal x1 print-err)
        (ld x10 (+ x2 24))
        (jal x1 free)
        (ld x1 x2)
        (addi x2 x2 16)
        (jalr x0 x1)
    )

    (module handle-import
        (jal x1 tokenize)
        (beq x10 x0 eof)
        (subi x5 x10 (Token RightParen))
        (beq x5 x0 empty)
        (subi x5 x10 (Token String))
        (beq x5 x0 string)
        (subi x5 x10 (Token Symbol))
        (beq x5 x0 get-path)
        (subi x5 x10 (Token LeftParen))
        (bne x5 x0 bad-arg)
        get-path
        (jal x1 unwrap-path)
        (subi x2 x2 16)
        (sd x2 x10)
        (sd (+ x2 8) x11)
        (jal x1 tokenize)
        (beq x10 x0 eof-closer)
        (subi x7 x10 (Token RightParen))
        (bne x7 x0 forgot-closer)

        closer-after
        (ld x5 x2)
        (ld x6 (+ x2 8))
        (beq x5 x0 empty-path)
        (addi x7 x5 8)
        (bne x7 x6 preloop)
        (ld x7 x5)
        (subi x8 x7 Instr::^)
        (beq x8 x0 invalid)
        (subi x8 x7 Instr::*)
        (beq x8 x0 invalid)

        preloop
        (ld x7 (+ x20 (Asm module)))
        carat-loop
            (ld x8 x5)
            (subi x8 x8 Instr::^)
            (bne x8 x0 loop)
            (addi x5 x5 8)
            (ld x7 (+ x7 (Module parent)))
            (beq x7 x0 root-err)
            (bne x5 x6 carat-loop)
        loop
            ;; TODO: remove?
            (beq x5 x6 (^ loop))
            (ld x11 x5)
            (addi x5 x5 8)
            (subi x9 x11 Instr::^)
            (beq x9 x0 ^-err)
            (subi x9 x11 Instr::*)
            (bne x9 x0 children)
            (bne x5 x6 *-err)

            (addi x10 x7 (Module children))
            (jal x1 (symbol-map24 iter))
            (subi x2 x2 40)
            *-loop
                (jal x1 (symbol-map24 next))
                (beq x12 x0 *-loop-after)
                (andi x5 x13 (Unit import))
                (bne x5 x0 *-loop)
                (sd x2 x10)
                (sd (+ x2 8) x11)
                (sd (+ x2 16) x12)
                (sd (+ x2 24) x13)
                (sd (+ x2 32) x14)
                (add x10 x0 x12)
                (jal x1 in-scope?)
                (bne x10 x0 *-defined)
                (ld x10 (+ x20 (Asm module)))
                (addi x10 x10 (Module children))
                (ld x11 (+ x2 16))
                (ld x12 (+ x2 24))
                (ld x13 (+ x2 32))
                (ori x12 x12 (Unit import))
                (jal x1 (symbol-map24 insert))
                (ld x10 x2)
                (ld x11 (+ x2 8))
                (jal x0 *-loop)
            *-loop-after
            ;; free path
            (ld x10 (+ x2 40))
            (jal x1 free)
            (addi x2 x2 56)
            (jal x0 (^ loop))

            *-defined
                (defcon *def-msg "` is already defined in this scope from import statement")
                (la x5 *def-msg)
                (addi x6 x0 1)
                (add x7 x0 x5)
                (addi x8 x0 (len *def-msg))
                (ld x10 (+ x2 16))
                (add x11 x0 x0)
                (jal x1 print-err-symbol)
                (ld x10 x2)
                (ld x11 (+ x2 8))
                (jal x0 *-loop)

        children
            (subi x2 x2 24)
            (sd x2 x5)
            (sd (+ x2 8) x6)
            (sd (+ x2 16) x7)
            (addi x10 x7 (Module children))
            (jal x1 (symbol-map24 get))
            (ld x5 x2)
            (ld x6 (+ x2 8))
            (beq x12 x0 check-parent)
            (andi x8 x10 (Unit mask))
            (subi x9 x8 (Unit Module))
            (bne x9 x0 imm)
            (srai x8 x10 3)
            (bne x8 x0 check-parent)
            (ld x9 (+ x20 (Asm module)))
            (beq x9 x11 self-err)
            (beq x5 x6 import-mod)
            (add x7 x0 x11)
            (addi x2 x2 24)
            (jal x0 loop)

        import-mod
            (sd (+ x2 16) x11)
            (ld x10 (- x5 8))
            (jal x1 in-scope?)
            (ld x11 x2)
            (ld x11 (- x11 8))
            (ld x13 (+ x2 16))
            (bne x10 x0 scope-err)
            (ld x10 (+ x20 (Asm module)))
            (addi x10 x10 (Module children))
            (addi x12 x0 (Unit Module))
            (ori x12 x12 (Unit import))
            (jal x1 (symbol-map24 insert))
            (ld x10 (+ x2 24))
            ;; free path
            (jal x1 free)
            (addi x2 x2 40)
            (jal x0 (^ loop))

        check-parent
        (ld x7 (+ x2 16))
        (add x23 x0 x0)
        filep-loop
            (lw x8 (+ x7 (Module filep)))
            (bne x8 x0 filep-loop-after)
            (addi x10 x7 (Module children))
            (ld x7 (+ x7 (Module parent)))
            (sd (+ x2 16) x7)
            (ld x11 (- x5 8))
            (jal x1 (symbol-map24 get))
            (ld x7 (+ x2 16))
            (ld x5 x2)
            (beq x10 x0 filep-loop)
            (ori x23 x0 1)
            (jal x0 filep-loop)
        filep-loop-after
        (ld x8 (+ x7 (Module parent)))
        (beq x8 x0 filep-ptr)
        (add x7 x0 x8)
        filep-ptr
        (sd (+ x2 16) x7)
        (ld x10 (- x5 8))
        (jal x1 symbol->string)
        (ld x7 (+ x2 16))
        (ld x8 (+ x7 (Module path.len)))
        (subi x2 x2 24)
        (sd x2 x10)
        (sd (+ x2 8) x11)
        (add x10 x11 x8)
        ;; need room for potentially adding '/', ".sasm", and null terminator
        (addi x10 x10 7)
        (jal x1 malloc)
        (sd (+ x2 16) x10)
        (ld x7 (+ x2 40))
        (ld x11 (+ x7 (Module path)))
        (ld x12 (+ x7 (Module path.len)))
        (beq x12 x0 path-push)
        (jal x1 strdup)
        (lb x7 (- x10 1))
        (subi x7 x7 #'/')
        (beq x7 x0 path-push)
        (addi x7 x0 #'/')
        (sb x10 x7)
        (addi x10 x10 1)
        path-push
        (ld x11 x2)
        (ld x12 (+ x2 8))
        (jal x1 strdup)
        (sb x10 x0)
        (ld x11 (+ x2 16))
        (sd (+ x2 8) x10)

        ;; openat(AT_FDCWD, file_path, O_RDONLY|O_DIRECTORY)
        (addi x10 x0 AT_FDCWD)
        (addi x12 x0 1)
        (slli x12 x12 16)
        (addi x17 x0 SYS_OPENAT)
        (ecall)
        (bge x10 x0 import-dir)
        (defcon file-extension ".sasm")
        (ld x10 (+ x2 8))
        (la x11 file-extension)
        (addi x12 x0 (len file-extension))
        (jal x1 strdup)
        (sb x10 x0)
        (ld x11 (+ x2 16))
        (sd (+ x2 8) x10)
        ;; openat(AT_FDCWD, file_path+.sasm, O_RDONLY)
        (addi x10 x0 AT_FDCWD)
        (add x12 x0 x0)
        (addi x17 x0 SYS_OPENAT)
        (ecall)
        (blt x10 x0 no-file)
        ;; close(fd);
        (addi x17 x0 SYS_CLOSE)
        (ecall)
        (add x10 x0 x11)
        (ld x11 (+ x2 8))
        (sub x11 x11 x10)
        (ld x12 (+ x2 40))
        (ld x13 (+ x2 24))
        (ld x13 (- x13 8))
        (jal x1 import-file)
        (jal x0 import-file-cont)

        import-dir
            (ld x12 (+ x2 8))
            (sub x12 x12 x11)
            (ld x13 (+ x2 40))
            (jal x1 (^ import-dir))
        import-file-cont
            (bne x10 x0 import-dir-add)
            (addi x10 x0 1)
            (sd (+ x21 (Tokenizer err)) x10)
            ;; free path
            (ld x10 (+ x2 48))
            (jal x1 free)
            (addi x2 x2 64)
            (jal x0 (^ loop))
        import-dir-add
            (sd x2 x10)
            (ld x5 (+ x2 24))
            (ld x6 (+ x2 32))
            (bne x5 x6 import-dir-cont)
            (add x13 x0 x10)
            (ld x10 (+ x20 (Asm module)))
            (addi x10 x10 (Module children))
            (ld x11 (- x5 8))
            (addi x12 x0 (Unit Module))
            (ori x12 x12 (Unit import))
            (jal x1 (symbol-map24 insert))
            ;; free path
            (ld x10 (+ x2 48))
            (jal x1 free)
            (addi x2 x2 64)
            (jal x0 (^ loop))
        import-dir-cont
            (ld x7 x2)
            (addi x2 x2 48)
            (jal x0 loop)

        imm
            (andi x9 x10 (Unit import))
            (bne x9 x0 import-import)
        imm-continue
            (bne x5 x6 imm-partial)
            (subi x2 x2 16)
            (sd x2 x10)
            (sd (+ x2 8) x11)
            (ld x10 (- x5 8))
            (jal x1 in-scope?)
            (ld x12 x2)
            (ld x13 (+ x2 8))
            (addi x2 x2 16)
            (bne x10 x0 scope-err)
            (ld x10 (+ x20 (Asm module)))
            (addi x10 x10 (Module children))
            (ld x13 (+ x2 8))
            (ld x11 x2)
            (ld x11 (- x11 8))
            (ori x12 x12 (Unit import))
            (jal x1 (symbol-map24 insert))
            ;; free path
            (ld x10 (+ x2 24))
            (jal x1 free)
            (addi x2 x2 40)
            (jal x0 (^ loop))

        no-file
            (defcon no-file-msg "File `")
            (defcon no-file-msg2 "` does not exist in import statement")
            (bne x23 x0 unnecessary-import)
            (ld x10 (+ x2 8))
            (sub x10 x10 x11)
            (addi x10 x10 (len no-file-msg))
            (addi x10 x10 (len no-file-msg2))
            (jal x1 malloc)
            (subi x2 x2 8)
            (sd x2 x10)
            (la x11 no-file-msg)
            (addi x12 x0 (len no-file-msg))
            (jal x1 strdup)
            (ld x11 (+ x2 24))
            (ld x12 (+ x2 16))
            (sub x12 x12 x11)
            (jal x1 strdup)
            (la x11 no-file-msg2)
            (addi x12 x0 (len no-file-msg2))
            (jal x1 strdup)
            (ld x5 x2)
            (sub x6 x10 x5)
            (add x7 x0 x0)
            (jal x1 print-err)
            ;; free msg
            (ld x10 x2)
            (jal x1 free)
            (addi x2 x2 8)
        no-file-free
            ;; free filename
            (ld x10 (+ x2 16))
            (jal x1 free)
            ;; free path
            (ld x10 (+ x2 48))
            (jal x1 free)
            (addi x2 x2 64)
            (jal x0 (^ loop))
        unnecessary-import
            (defcon unnecessary-msg "Unnecessary import statement")
            (la x5 unnecessary-msg)
            (addi x6 x0 (len unnecessary-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 no-file-free)

        forgot-closer
            (defcon forgot-msg "Forgot closing parenthesis in import statement")
            (defcon forgot-note "\tNote: each import requires its own import statement.")
            (subi x2 x2 8)
            (sd x2 x10)
            (la x5 forgot-msg)
            (addi x6 x0 (len forgot-msg))
            (la x7 forgot-note)
            (addi x8 x0 (len forgot-note))
            (jal x1 print-err)
            (ld x10 x2)
            (addi x2 x2 8)
            (subi x10 x10 (Token LeftParen))
            (bne x10 x0 forgot-closer-skip)
            ;; backtrack
            (ld x5 (+ x21 (Tokenizer token_pos)))
            (subi x5 x5 16)
            (sd (+ x21 (Tokenizer token_pos)) x5)
        forgot-closer-skip
            (jal x1 skip-opcode)
            (jal x0 closer-after)
        eof
            (defcon eof-msg "Unexpected EOF in import statement")
            (la x5 eof-msg)
            (addi x6 x0 (len eof-msg))
        print
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 (^ loop))
        eof-closer
            (la x5 eof-msg)
            (addi x6 x0 (len eof-msg))
            (jal x1 print-err)
            (jal x0 closer-after)
        empty-path
            (defcon empty-path-msg "Empty path in import statement")
            (la x5 empty-path-msg)
            (addi x6 x0 (len empty-path-msg))
            (addi x2 x2 16)
            (jal x0 print)
        invalid
            (defcon invalid-msg "Invalid path in import statement")
            (la x5 invalid-msg)
            (addi x6 x0 (len invalid-msg))
            (jal x0 print-free)
        empty
            (defcon empty-msg "Empty import statement")
            (la x5 empty-msg)
            (addi x6 x0 (len empty-msg))
            (jal x0 print)
        string
            (defcon string-msg "Import path should consist of identifiers, not strings")
            (la x5 string-msg)
            (addi x6 x0 (len string-msg))
        print-skip
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x1 skip-opcode)
            (jal x0 (^ loop))
        bad-arg
            (defcon badarg-msg "Bad argument in import statement")
            (la x5 badarg-msg)
            (addi x6 x0 (len badarg-msg))
            (jal x0 print-skip)
        import-import
            (defcon import-import-msg "Cannot import an import from import statement")
            (la x5 import-import-msg)
            (addi x6 x0 (len import-import-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 imm-continue)
        self-err
            (defcon self-msg "Cannot import self")
            (la x5 self-msg)
            (addi x6 x0 (len self-msg))
            (addi x2 x2 24)
            (jal x0 print-free)
        print-free
            (jal x1 print-err)
            ;; free path
            (ld x10 x2)
            (jal x1 free)
            (addi x2 x2 16)
            (jal x0 (^ loop))
        root-err
            (defcon root-msg "Path `")
            (defcon root-msg2 "` jumped past root in import statement")
            (la x5 root-msg)
            (addi x6 x0 (len root-msg))
            (la x7 root-msg2)
            (addi x8 x0 (len root-msg2))
            (jal x0 root-cont)
        ^-err
            (defcon ^-err-msg "Invalid path `")
            (defcon ^-err-msg2 "` in import statement")
            (defcon ^-err-note "\tNote: can only move up (`^`) at beginning of path in expression.")
            (la x12 ^-err-note)
            (addi x13 x0 (len ^-err-note))
            (jal x0 ^-err-cont)
        *-err
            (defcon *-err-note "\tNote: can only import all (`*`) at the end of path in expression.")
            (la x12 *-err-note)
            (addi x13 x0 (len *-err-note))
        ^-err-cont
            (la x5 ^-err-msg)
            (addi x6 x0 (len ^-err-msg))
            (la x7 ^-err-msg2)
            (addi x8 x0 (len ^-err-msg2))
        root-cont
            (ld x10 x2)
            (ld x11 (+ x2 8))
            (jal x1 print-err-path)
        free-path
            ;; free path
            (ld x10 x2)
            (jal x1 free)
            (addi x2 x2 16)
            (jal x0 (^ loop))
        scope-err
            (defcon scope-msg "` is already defined in this scope from import statement")
            (la x5 scope-msg)
            (addi x6 x0 1)
            (la x7 scope-msg)
            (addi x8 x0 (len scope-msg))
            (ld x10 x2)
            (ld x10 (- x10 8))
            (add x11 x0 x0)
            (jal x1 print-err-symbol)
            (jal x0 free-path)
        imm-partial
            (defcon imm-partial-msg "` resolved to variable/global partway in import statement")
            (la x5 root-msg)
            (addi x6 x0 (len root-msg))
            (la x7 imm-partial-msg)
            (addi x8 x0 (len imm-partial-msg))
            (addi x2 x2 24)
            (jal x0 root-cont)
    )

    ;; ARGS:
    ;;  x10 - dir-fd
    ;;  x11 - file-path: String
    ;;  x12 - file-path.len
    ;;  x13 - parent: *Module
    ;; RET:
    ;;  x10 - *Module
    (module import-dir
        (subi x2 x2 1096)
        (sd x2 x1)
        (sd (+ x2 8) x10)
        (sd (+ x2 16) x13)

        (add x24 x0 x11)
        (add x25 x0 x12)
        (ld x26 (+ x20 (Asm import_files.start)))
        (ld x27 (+ x20 (Asm import_files)))
        lookup-loop
            (beq x26 x27 read)
            (add x10 x0 x24)
            (add x11 x0 x25)
            (ld x12 x26)
            (ld x13 (+ x26 8))
            (addi x26 x26 24)
            (jal x1 str-eq?)
            (beq x10 x0 lookup-loop)
        ;; close(dir-fd)
        (ld x10 (+ x2 8))
        (addi x17 x0 SYS_CLOSE)
        (ecall)
        ;; free filepath
        (add x10 x0 x24)
        (jal x1 free)
        (ld x1 x2)
        (addi x2 x2 1096)
        (ld x10 (- x26 8))
        (jalr x0 x1)

        read
        (ld x10 (+ x2 16))
        ;; TODO: should filep be set?
        (add x11 x0 x0)
        (jal x1 (Module new))
        (sd (+ x10 (Module path)) x24)
        (sd (+ x10 (Module path.len)) x25)
        (sd (+ x2 16) x10)

        (ld x5 (+ x20 (Asm modules)))
        (ld x6 (+ x20 (Asm modules.capacity)))
        (bne x5 x6 push-modules)
        (addi x10 x20 (Asm modules.start))
        (jal x1 resize-array)
        (add x5 x0 x10)
        push-modules
        (ld x10 (+ x2 16))
        (sd x5 x10)
        (addi x5 x5 8)
        (sd (+ x20 (Asm modules)) x5)

        dirent-loop
            (ld x10 (+ x2 8))
            (addi x11 x2 72)
            (addi x12 x0 1024)
            (addi x17 x0 SYS_GETDENTS64)
            (ecall)
            (blt x10 x0 getdents-err)
            (beq x10 x0 done)
            (add x10 x10 x11)
            (sd (+ x2 24) x11)
            (sd (+ x2 32) x10)
            dents-loop
                (lh x12 (+ x11 (dirent64 d_reclen)))
                (add x10 x11 x12)
                (sd (+ x2 24) x10)
                (lb x10 (+ x11 (dirent64 d_type)))
                (subi x5 x10 (dirent64 DT_DIR))
                (bne x5 x0 file?)
                (addi x10 x11 (dirent64 d_name))
                ;; ignore `.` and `..` directories
                (lb x5 x10)
                (subi x5 x5 #'.')
                (bne x5 x0 dir-cont)
                (lb x5 (+ x10 1))
                (beq x5 x0 cont)
                (subi x5 x5 #'.')
                (bne x5 x0 dir-cont)
                (lb x5 (+ x10 2))
                (beq x5 x0 cont)
                dir-cont
                (add x5 x0 x0)
                (sd (+ x2 40) x10)
                dir-name-len
                    (lb x6 x10)
                    (addi x10 x10 1)
                    (addi x5 x5 1)
                    (bne x6 x0 dir-name-len)
                (subi x5 x5 1)
                (sd (+ x2 48) x5)
                (add x10 x5 x25)
                ;; room for '/' and '\0'
                (addi x10 x10 2)
                (jal x1 malloc)
                (sd (+ x2 56) x10)
                (add x11 x0 x24)
                (add x12 x0 x25)
                (jal x1 strdup)
                (lb x5 (- x10 1))
                (subi x5 x5 #'/')
                (beq x5 x0 dir-push-cont)
                (addi x5 x0 #'/')
                (sb x10 x5)
                (addi x10 x10 1)
                dir-push-cont
                (ld x11 (+ x2 40))
                (ld x12 (+ x2 48))
                (jal x1 strdup)
                (sb x10 x0)
                (sd (+ x2 64) x10)
                ;; openat(AT_FDCWD, file_path, O_RDONLY|O_DIRECTORY)
                (addi x10 x0 AT_FDCWD)
                (ld x11 (+ x2 56))
                (addi x12 x0 1)
                (slli x12 x12 16)
                (addi x17 x0 SYS_OPENAT)
                (ecall)
                (blt x10 x0 open-dir-err)

                (ld x12 (+ x2 64))
                (sub x12 x12 x11)
                (ld x13 (+ x2 16))
                (jal x1 import-dir)
                (beq x10 x0 cont)
                (sd (+ x2 64) x10)
                (ld x10 (+ x2 40))
                (ld x11 (+ x2 48))
                (jal x1 string->symbol)
                (add x11 x0 x10)
                (ld x10 (+ x2 16))
                (ld x13 (+ x2 64))
                (addi x12 x0 (Unit Module))
                (ori x12 x12 (Unit import))
                (addi x10 x10 (Module children))
                (jal x1 (symbol-map24 insert))
                (jal x0 cont)

                file?
                (subi x5 x10 (dirent64 DT_REG))
                (bne x5 x0 cont)
                (addi x10 x11 (dirent64 d_name))
                (add x5 x0 x0)
                (add x6 x0 x10)
                filename-len-loop
                    (lb x7 x6)
                    (addi x6 x6 1)
                    (addi x5 x5 1)
                    (bne x7 x0 filename-len-loop)
                (subi x5 x5 1)
                (sd (+ x2 40) x10)
                (sd (+ x2 48) x5)
                (subi x10 x6 6)
                (defcon extension ".sasm")
                (addi x11 x0 (len extension))
                (la x12 extension)
                (addi x13 x0 (len extension))
                (jal x1 str-eq?)
                (beq x10 x0 cont)
                (ld x5 (+ x2 48))
                (add x10 x25 x5)
                ;; Space for '/' and '\0'
                (addi x10 x10 2)
                (jal x1 malloc)
                (sd (+ x2 56) x10)
                (add x11 x0 x24)
                (add x12 x0 x25)
                (jal x1 strdup)
                (lb x5 x10)
                (subi x5 x5 #'/')
                (beq x5 x0 filepath-push)
                (addi x5 x5 #'/')
                (sb x10 x5)
                (addi x10 x10 1)
                filepath-push
                (ld x11 (+ x2 40))
                (ld x12 (+ x2 48))
                (jal x1 strdup)
                (sb x10 x0)
                (sd (+ x2 64) x10)
                (ld x10 (+ x2 40))
                (ld x11 (+ x2 48))
                (jal x1 symbol->string)
                (add x13 x0 x10)
                (ld x10 (+ x2 56))
                (ld x11 (+ x2 64))
                (sub x11 x11 x10)
                (ld x12 (+ x2 16))
                (sd (+ x2 56) x13)
                (jal x1 import-file)
                (beq x10 x0 cont)
                (add x13 x0 x10)
                (ld x10 (+ x2 16))
                (addi x10 x10 (Module children))
                (ld x11 (+ x2 56))
                (addi x12 x0 (Unit Module))
                (ori x12 x12 (Unit import))
                (jal x1 (symbol-map24 insert))

                cont
                (ld x11 (+ x2 24))
                (ld x10 (+ x2 32))
                (bne x10 x11 dents-loop)
            (jal x0 dirent-loop)
        done
        ;; close(dir-fd)
        (ld x10 (+ x2 8))
        (addi x17 x0 SYS_CLOSE)
        (ecall)
        (ld x1 x2)
        (addi x2 x2 1096)
        (jalr x0 x1)

        open-dir-err
            (defcon opendir-msg "Unable to open directory")
            (la x5 opendir-msg)
            (addi x6 x0 (len opendir-msg))
            (jal x0 print)
        getdents-err
            (defcon getdents-msg "Error calling getdents")
            (la x5 getdents-msg)
            (addi x6 x0 (len getdents-msg))
        print
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 done)
    )

    ;; ARGS:
    ;;  x10 - file-path: String
    ;;  x11 - file-path.len
    ;;  x12 - parent: *Module
    ;;  x13 - path: Symbol
    ;; Ret:
    ;;  x10 - *Module
    (module import-file
        (subi x2 x2 24)
        (sd x2 x1)
        (sd (+ x2 8) x12)
        (sd (+ x2 16) x13)
        (add x24 x0 x10)
        (add x25 x0 x11)
        (ld x26 (+ x20 (Asm import_files.start)))
        (ld x27 (+ x20 (Asm import_files)))
        lookup-loop
            (beq x26 x27 read)
            (add x10 x0 x24)
            (add x11 x0 x25)
            (ld x12 x26)
            (ld x13 (+ x26 8))
            (addi x26 x26 24)
            (jal x1 str-eq?)
            (beq x10 x0 lookup-loop)
        ;; free filepath
        (add x10 x0 x24)
        (jal x1 free)
        (ld x1 x2)
        (addi x2 x2 24)
        (ld x10 (- x26 8))
        (jalr x0 x1)

        read
        (ld x10 (+ x2 8))
        (addi x11 x0 1)
        (jal x1 (Module new))

        ;; TODO
        (ld x11 (+ x2 16))
        (sd (+ x2 16) x10)
        (addi x10 x10 (Module labels))
        (add x12 x0 x0)
        (jal x1 (symbol-map16 insert))

        (ld x6 (+ x20 (Asm import_files.capacity)))
        (bne x6 x27 push-import-files)
        (addi x10 x20 (Asm import_files.start))
        (jal x1 resize-array)
        (add x27 x0 x10)
        push-import-files
        (ld x10 (+ x2 16))
        (sd x27 x24)
        (sd (+ x27 8) x25)
        (sd (+ x27 16) x10)
        (addi x27 x27 24)
        (sd (+ x20 (Asm import_files)) x27)

        (ld x5 (+ x20 (Asm modules)))
        (ld x6 (+ x20 (Asm modules.capacity)))
        (bne x5 x6 push-modules)
        (addi x10 x20 (Asm modules.start))
        (jal x1 resize-array)
        (add x5 x0 x10)
        push-modules
        (ld x10 (+ x2 16))
        (sd x5 x10)
        (addi x5 x5 8)
        (sd (+ x20 (Asm modules)) x5)

        (add x11 x0 x24)
        (jal x1 read-file)
        (bne x12 x0 read-err)
        (ld x5 (+ x2 16))
        (ld x6 (+ x20 (Asm module)))
        (sd (+ x20 (Asm module)) x5)
        (subi x2 x2 16)
        (sd x2 x10)
        (sd (+ x2 24) x6)
        (add x12 x0 x24)
        (add x13 x0 x25)
        (jal x1 (Tokenizer new))
        (sd (+ x2 8) x21)
        (add x21 x0 x10)
        loop
            (jal x1 assemble)
            (beq x10 x0 done)
            (ld x5 (+ x21 (Tokenizer token_pos)))
            (addi x5 x5 16)
            (sd (+ x21 (Tokenizer token_pos)) x5)
            (defcon paren-msg "Unexpected closing parenthesis")
            (la x5 paren-msg)
            (addi x6 x0 (len paren-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 loop)
        done
        ;; munmap(input)
        (ld x10 (+ x21 (Tokenizer input.start)))
        (ld x11 (+ x21 (Tokenizer input.end)))
        (sub x11 x11 x10)
        (addi x17 x0 SYS_MUNMAP)
        (ecall)
        (ld x5 (+ x2 8))
        (ld x6 (+ x21 (Tokenizer err)))
        (ld x7 (+ x5 (Tokenizer err)))
        (or x6 x6 x7)
        (sd (+ x5 (Tokenizer err)) x6)
        (add x10 x0 x21)
        (add x21 x0 x5)
        (jal x1 free)

        (ld x5 (+ x2 24))
        (sd (+ x20 (Asm module)) x5)
        (ld x10 (+ x2 32))
        (ld x1 (+ x2 16))
        (addi x2 x2 40)
        (jalr x0 x1)

        read-err
            (defcon read-msg "Error executing import")
            (la x5 read-msg)
            (addi x6 x0 (len read-msg))
            (add x7 x0 x10)
            (add x8 x0 x11)
            (sd (+ x2 8) x10)
            (jal x1 print-err)
            ;; free(msg)
            (ld x10 (+ x2 8))
            (jal x1 free)
            (ld x1 x2)
            (ld x10 (+ x2 16))
            (addi x2 x2 24)
            (jalr x0 x1)
    )

    ;; x11 - Symbol
    (module handle-opcode
        (addi x5 x0 Instr::add)
        (blt x11 x5 register-err)
        (addi x5 x0 LAST_R)
        (blt x11 x5 rin)
        (addi x5 x0 LAST_I)
        (blt x11 x5 iin)
        (addi x5 x0 LAST_I2)
        (blt x11 x5 i2in)
        (addi x5 x0 LAST_S)
        (blt x11 x5 sin)
        (addi x5 x0 LAST_B)
        (blt x11 x5 bin)
        (addi x5 x0 Instr::jal)
        (beq x11 x5 jal)
        (addi x5 x0 Instr::jalr)
        (beq x11 x5 jalr)
        (addi x5 x0 Instr::ecall)
        (blt x11 x5 lui)
        (beq x11 x5 ecall)
        (addi x5 x0 Instr::ebreak)
        (beq x11 x5 ebreak)
        (addi x5 x0 Instr::la)
        (beq x11 x5 la)

        (defcon unknown-err "Unknown opcode `")
        (la x5 unknown-err)
        (addi x6 x0 (len unknown-err))
        (add x7 x5 x6)
        (subi x7 x7 1)
        (addi x8 x0 1)
        print-sym
        (add x10 x0 x11)
        (add x11 x0 x0)
        (jal x1 print-err-symbol)
        (jal x1 skip-opcode)
        (jal x0 loop)

        register-err
            (defcon reg-msg "Cannot use register `")
            (defcon reg-msg2 "` as opcode")
            (la x5 reg-msg)
            (addi x6 x0 (len reg-msg))
            (la x7 reg-msg2)
            (addi x8 x0 (len reg-msg2))
            (jal x0 print-sym)

        (defcon funct3-table #(0 0 4 6 7 1 5 5 2 3 0 4 6    ;; r
                               0 0 4 6 7 2 3 5 1 5          ;; i
                               0 1 2 3 4 5 6                ;; i2
                               0 1 2 3                      ;; s
                               0 1 4 5 6 7))                ;; b
        (defcon funct7-table #(0 0x20 0 0 0 0 0 0x20 0 0 0x1 0x1 0x1))
        rin
            (addi x23 x0 0b0110011)
            (la x5 funct3-table)
            (add x5 x5 x11)
            (lb x5 (- x5 Instr::add))
            (slli x5 x5 12)
            (or x23 x23 x5)
            (la x5 funct7-table)
            (add x5 x5 x11)
            (lb x5 (- x5 Instr::add))
            (slli x5 x5 25)
            (or x23 x23 x5)
            (jal x1 unwrap-register)
            (slli x10 x10 7)
            (or x23 x23 x10)
            (jal x1 unwrap-register)
            (slli x10 x10 15)
            (or x23 x23 x10)
            (jal x1 unwrap-register)
            (slli x10 x10 20)
            (or x23 x23 x10)
            (jal x0 push)

        iin
            (addi x23 x0 0b0010011)
            (la x5 funct3-table)
            (add x5 x5 x11)
            (lb x5 (- x5 Instr::add))
            (slli x5 x5 12)
            (or x23 x23 x5)
            (add x24 x0 x11)
            (jal x1 unwrap-register)
            (slli x10 x10 7)
            (or x23 x23 x10)
            (jal x1 unwrap-register)
            (slli x10 x10 15)
            (or x23 x23 x10)
            (jal x1 unwrap-imm)
            ;; TODO: delete me v3.0
            (subi x5 x24 Instr::subi)
            (bne x5 x0 iin-after-sub)
            (sub x10 x0 x10)
            (jal x0 iin-after-srai)
        iin-after-sub
            (subi x5 x24 Instr::srai)
            (blt x5 x0 iin-after-srai)
            (addi x6 x0 64)
            (bgeu x10 x6 iin-shift-range)
            (bne x5 x0 iin-after-srai)
            (addi x5 x0 0x20)
            (slli x5 x5 5)
            (or x10 x10 x5)
        iin-after-srai
            (subi x5 x0 2048)
            (blt x10 x5 iin-range)
            (sub x5 x0 x5)
            (bge x10 x5 iin-range)
            (slli x10 x10 20)
            (or x23 x23 x10)
            (jal x0 push)

        iin-range
            (defcon iin-msg "Immediate `")
            (defcon iin-msg2 "` out of range [-2048, 2048)")
            (la x5 iin-msg)
            (addi x6 x0 (len iin-msg))
            (la x7 iin-msg2)
            (addi x8 x0 (len iin-msg2))
            (jal x1 print-err-int)
            (jal x0 push)
        iin-shift-range
            (defcon iin-shift-msg "` out of range [0, 64]")
            (la x5 iin-msg)
            (addi x6 x0 (len iin-msg))
            (la x7 iin-shift-msg)
            (addi x8 x0 (len iin-shift-msg))
            (jal x1 print-err-int)
            (jal x0 push)

        i2in
            (addi x23 x0 0b0000011)
            (la x5 funct3-table)
            (add x5 x5 x11)
            (lb x5 (- x5 Instr::add))
            (slli x5 x5 12)
            (or x23 x23 x5)
            (jal x1 unwrap-register)
            (slli x10 x10 7)
            (or x23 x23 x10)
            (jal x1 unwrap-offset)
            (slli x10 x10 15)
            (or x23 x23 x10)
            (subi x5 x0 2048)
            (blt x11 x5 i2in-range)
            (sub x5 x0 x5)
            (bge x11 x5 i2in-range)
            (slli x11 x11 20)
            (or x23 x23 x11)
            (jal x0 push)

        i2in-range
            (defcon i2in-msg "Offset `")
            (defcon i2in-msg2 "` out of range [-2048, 2048)")
            (la x5 i2in-msg)
            (addi x6 x0 (len i2in-msg))
            (la x7 i2in-msg2)
            (addi x8 x0 (len i2in-msg2))
            (add x10 x0 x11)
            (jal x1 print-err-int)
            (jal x0 push)

        sin
            (addi x23 x0 0b0100011)
            (la x5 funct3-table)
            (add x5 x5 x11)
            (lb x5 (- x5 Instr::add))
            (slli x5 x5 12)
            (or x23 x23 x5)
            (jal x1 unwrap-offset)
            (slli x10 x10 15)
            (or x23 x23 x10)
            (addi x5 x0 -2048)
            (blt x11 x5 sin-range)
            (sub x5 x0 x5)
            (bge x11 x5 sin-range)
            (andi x5 x11 0b11111)
            (slli x5 x5 7)
            (or x23 x23 x5)
            (srai x11 x11 5)
            (slli x11 x11 25)
            (or x23 x23 x11)
        sin-range-after
            (jal x1 unwrap-register)
            (slli x10 x10 20)
            (or x23 x23 x10)
            (jal x0 push)
        sin-range
            (defcon sin-msg "Offset `")
            (defcon sin-msg2 "` out of range [-2048, 2048)")
            (la x5 sin-msg)
            (addi x6 x0 (len sin-msg))
            (la x7 sin-msg2)
            (addi x8 x0 (len sin-msg2))
            (add x10 x0 x11)
            (jal x1 print-err-int)
            (jal x0 sin-range-after)

        bin
            (addi x23 x0 0b1100011)
            (la x5 funct3-table)
            (add x5 x5 x11)
            (lb x5 (- x5 Instr::add))
            (slli x5 x5 12)
            (or x23 x23 x5)
            (jal x1 unwrap-register)
            (slli x10 x10 15)
            (or x23 x23 x10)
            (jal x1 unwrap-register)
            (slli x10 x10 20)
            (or x23 x23 x10)
            (addi x10 x0 1)
            (jal x1 unwrap-label)
            (beq x10 x0 push)
            (addi x5 x0 1)
            (slli x5 x5 12)
            (bge x11 x5 bin-range)
            (sub x5 x0 x5)
            (blt x11 x5 bin-range)
        bin-range-after
            (andi x5 x11 0x1e)
            (srai x6 x11 11)
            (andi x6 x6 1)
            (or x5 x5 x6)
            (slli x5 x5 7)
            (or x23 x23 x5)
            (srai x5 x11 6)
            (andi x5 x5 0x40)
            (srai x6 x11 5)
            (andi x6 x6 0x3f)
            (or x5 x6 x5)
            (slli x5 x5 25)
            (or x23 x23 x5)
            (jal x0 push)
        bin-range
            (defcon bin-msg "Branch to `")
            (defcon bin-msg2 "` too far")
            (la x5 bin-msg)
            (addi x6 x0 (len bin-msg))
            (la x7 bin-msg2)
            (addi x8 x0 (len bin-msg2))
            (add x11 x0 x0)
            (jal x1 print-err-symbol)
            (jal x0 push)

        jal
            (addi x23 x0 0b1101111)
            (jal x1 unwrap-register)
            (slli x10 x10 7)
            (or x23 x23 x10)
            (add x10 x0 x0)
            (jal x1 unwrap-label)
            (beq x10 x0 push)
            ;; 1048576
            (addi x5 x0 1)
            (slli x5 x5 20)
            (bge x11 x5 jal-range)
            (sub x5 x0 x5)
            (blt x11 x5 jal-range)
        jal-range-after
            ;; (imm & 0x10_00_00) >> 1
            (addi x5 x0 1)
            (slli x5 x5 20)
            (and x5 x11 x5)
            (srai x5 x5 1)

            ;;(imm >> 1) & 0x3ff) << 9
            (srai x6 x11 1)
            (andi x6 x6 1023)
            (slli x6 x6 9)
            (or x5 x5 x6)

            ;; ((imm >> 11) & 1) << 8
            (srai x6 x11 11)
            (andi x6 x6 1)
            (slli x6 x6 8)
            (or x5 x5 x6)

            ;; (imm >> 12) & 0xff
            (srai x6 x11 12)
            (andi x6 x6 255)
            (or x5 x5 x6)

            (slli x5 x5 12)
            (or x23 x23 x5)
            (jal x0 push)

        jal-range
            (defcon jal-msg "Jump to `")
            (defcon jal-msg2 "` too far")
            (la x5 jal-msg)
            (addi x6 x0 (len jal-msg))
            (la x7 jal-msg2)
            (addi x8 x0 (len jal-msg2))
            (add x11 x0 x0)
            (jal x1 print-err-symbol)
            (jal x0 jal-range-after)

        jalr
            (addi x23 x0 0b1100111)
            (jal x1 unwrap-register)
            (slli x10 x10 7)
            (or x23 x23 x10)
            (jal x1 unwrap-offset)
            (slli x10 x10 15)
            (or x23 x23 x10)
            ;; TODO: check range x11
            (slli x11 x11 20)
            (or x23 x23 x11)
            (jal x0 push)

        lui
            (addi x23 x0 0b0110111)
            (addi x6 x0 Instr::lui)
            (beq x11 x6 lui-continue)
            (addi x23 x0 0b0010111)
            lui-continue
            (jal x1 unwrap-register)
            (slli x10 x10 7)
            (or x23 x23 x10)
            (jal x1 unwrap-imm)
            ;; 524288
            (addi x5 x0 1)
            (slli x5 x5 19)
            (bge x10 x5 lui-range)
            (sub x5 x0 x5)
            (blt x10 x5 lui-range)
            (slli x10 x10 12)
            (or x23 x23 x10)
            (jal x0 push)
        lui-range
            (defcon lui-msg "Immediate `")
            (defcon lui-msg2 "` out of range [-524288, 524288)")
            (la x5 lui-msg)
            (addi x6 x0 (len lui-msg))
            (la x7 lui-msg2)
            (addi x8 x0 (len lui-msg2))
            (add x10 x0 x11)
            (jal x1 print-err-int)
            (jal x0 push)

        ecall
            (addi x23 x0 0b1110011)
            (jal x0 push)

        ebreak
            (addi x23 x0 0b1110011)
            ;; TODO: lui 1?
            (addi x5 x0 1)
            (slli x5 x5 12)
            (or x23 x23 x5)
            (jal x0 push)

        la
            (jal x1 unwrap-register)
            (add x24 x0 x10)
            (jal x1 tokenize)
            (beq x10 x0 la-eof)
            (subi x5 x10 (Token RightParen))
            (beq x5 x0 la-rparen)
            (subi x5 x10 (Token Symbol))
            (beq x5 x0 la-path)
            (subi x5 x10 (Token LeftParen))
            (bne x5 x0 la-other)
        la-path
            (jal x1 unwrap-path)
            (beq x10 x0 la-empty)
            (subi x5 x11 8)
            (bne x10 x5 la-follow)
            (addi x5 x0 Register::x31)
            (ld x6 x10)
            (bge x5 x6 la-reg)
        la-follow
            (subi x2 x2 16)
            (sd x2 x10)
            (sd (+ x2 8) x11)
            (jal x1 follow-path)
            (andi x13 x10 1)
            (andi x10 x10 (Unit mask))
            (subi x10 x10 (Unit Bytes))
            (bne x10 x0 la-global)
            (ld x10 x2)
            (sd x2 x11)
            (sd (+ x2 8) x13)
            (jal x1 free)
            (ld x10 x2)
            (ld x11 (+ x2 8))
            (addi x2 x2 16)
        la-rewrite
            (slli x10 x10 1)
            (or x10 x10 x11)
            (ld x5 (+ x20 (Asm module)))
            (ld x6 (+ x5 (Module code.start)))
            (ld x7 (+ x5 (Module code)))
            (sub x6 x7 x6)
            (ld x7 (+ x5 (Module rewrites)))
            (ld x8 (+ x5 (Module rewrites.capacity)))
            (bne x7 x8 la-rewrite-after)
                (subi x2 x2 24)
                (sd x2 x10)
                (sd (+ x2 8) x6)
                (sd (+ x2 16) x5)
                (addi x10 x5 (Module rewrites.start))
                (jal x1 resize-array)
                (add x7 x0 x10)
                (ld x10 x2)
                (ld x6 (+ x2 8))
                (ld x5 (+ x2 16))
                (addi x2 x2 24)
        la-rewrite-after
            (sd x7 x6)
            (sd (+ x7 8) x10)
            (addi x7 x7 16)
            (sd (+ x5 (Module rewrites)) x7)

            (slli x24 x24 7)
            (addi x6 x0 0b0110111)
            (or x6 x6 x24)
            (addi x23 x0 0b0010011)
            (or x23 x24 x23)
            (slli x24 x24 8)
            (or x23 x24 x23)
            (add x24 x0 x6)

            ;; push lui
            (ld x6 (+ x5 (Module code)))
            (ld x7 (+ x5 (Module code.capacity)))
            (bne x6 x7 la-resize-after)
                (addi x10 x5 (Module code.start))
                (jal x1 resize-array)
                (add x6 x0 x10)
                (ld x5 (+ x20 (Asm module)))
        la-resize-after
            (sw x6 x24)
            (addi x6 x6 4)
            (sd (+ x5 (Module code)) x6)
            (jal x0 push)

        la-eof
            (defcon la-eof-msg "Unexpected EOF in instruction")
            (la x5 la-eof-msg)
            (addi x6 x0 (len la-eof-msg))
            (jal x0 la-err-ret)
        la-rparen
            (defcon la-rparen-msg "Expected identifier in instruction")
            (la x5 la-rparen-msg)
            (addi x6 x0 (len la-rparen-msg))
        la-err-ret
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 loop)
        la-other
            (defcon la-other-msg "Expected path as argument to `la` instruction")
            (la x5 la-other-msg)
            (addi x6 x0 (len la-other-msg))
        la-err-skip
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x1 skip-opcode)
            (jal x0 loop)
        la-empty
            (defcon la-empty-msg "Expected non-empty path as argument to `la` instruction")
            (la x5 la-empty-msg)
            (addi x6 x0 (len la-empty-msg))
            (jal x0 la-err-skip)
        la-reg
            (defcon la-reg-msg "Expected path as argument to `la` instruction, got register")
            (la x5 la-reg-msg)
            (addi x6 x0 (len la-reg-msg))
            (jal x0 la-err-skip)

        la-global
            (defcon la-global-msg "Global `")
            (defcon la-global-msg2 "` not defined/imported at use")
            (ld x10 x2)
            (ld x11 (+ x2 8))
            (la x5 la-global-msg)
            (addi x6 x0 (len la-global-msg))
            (la x7 la-global-msg2)
            (addi x8 x0 (len la-global-msg2))
            (add x12 x0 x0)
            (jal x1 print-err-path)
            (ld x10 x2)
            (jal x1 free)
            (addi x2 x2 16)
            (addi x10 x0 1)
            (jal x0 la-rewrite)

        push
            (ld x5 (+ x20 (Asm module)))
            (ld x6 (+ x5 (Module code)))
            (ld x7 (+ x5 (Module code.capacity)))
            (bne x6 x7 push-resize-after)
            (addi x10 x5 (Module code.start))
            (jal x1 resize-array)
            (add x6 x0 x10)
            (ld x5 (+ x20 (Asm module)))
            (jal x0 push-resize-after)
        push-resize-after
            (sw x6 x23)
            (addi x6 x6 4)
            (sd (+ x5 (Module code)) x6)
            (jal x1 tokenize)
            (beq x10 x0 unclosed-err)
            (subi x5 x10 (Token LeftParen))
            (beq x5 x0 lparen-err)
            (subi x5 x10 (Token RightParen))
            (bne x5 x0 too-many-err)
            (jal x0 loop)

        unclosed-err
            (defcon unclosed-msg "Unclosed instruction at end of file")
            (la x5 unclosed-msg)
            (addi x6 x0 (len unclosed-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 loop)
        lparen-err
            (defcon lparen-msg "Unclosed instruction")
            ;; backtrack
            (ld x5 (+ x21 24))
            (subi x5 x5 16)
            (sd (+ x21 24) x5)
            (la x5 lparen-msg)
            (addi x6 x0 (len lparen-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 loop)
        too-many-err
            (defcon too-many-msg "Too many arguments or missing parenthesis in instruction")
            (la x5 too-many-msg)
            (addi x6 x0 (len too-many-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x1 skip-opcode)
            (jal x0 loop)
    )

    (module skip-opcode
        (ld x5 (+ x21 32))
        (ld x6 (+ x21 24))
        (sub x5 x6 x5)
        (subi x5 x5 16)
        (ld x6 (+ x21 56))
        (add x5 x6 x5)
        (lw x6 x5)

        (subi x2 x2 16)
        (sd x2 x1)
        (sd (+ x2 8) x6)
        loop
            (jal x1 tokenize)
            (beq x10 x0 eof)
            (subi x5 x10 (Token LeftParen))
            (beq x5 x0 lparen)
            (subi x5 x10 (Token RightParen))
            (bne x5 x0 loop)
        (ld x1 x2)
        (addi x2 x2 8)
        (jalr x0 x1)

        lparen
            (ld x5 (+ x21 32))
            (ld x6 (+ x21 24))
            (sub x5 x6 x5)
            (subi x5 x5 16)
            (ld x6 (+ x21 56))
            (add x5 x6 x5)
            (lw x5 x5)
            (lw x6 (+ x2 8))
            (beq x5 x6 loop)
            (defcon lparen-msg "Unclosed expression")
            ;; backtrack
            (ld x5 (+ x21 24))
            (subi x5 x5 16)
            (sd (+ x21 24) x5)
            (la x5 lparen-msg)
            (addi x6 x0 (len lparen-msg))
            (jal x0 err-ret)
        eof
            (defcon eof-msg "Unclosed expression at end of file")
            (la x5 eof-msg)
            (addi x6 x0 (len eof-msg))
        err-ret
            (add x7 x0 x0)
            (jal x1 print-err)
            (ld x1 x2)
            (addi x2 x2 8)
            (jalr x0 x1)
    )

    ;; RET:
    ;;  x10 - register
    (module unwrap-register
        (subi x2 x2 8)
        (sd x2 x1)
        (jal x1 tokenize)
        (beq x10 x0 eof)
        (subi x5 x10 (Token RightParen))
        (beq x5 x0 paren)
        (subi x5 x10 (Token LeftParen))
        (beq x5 x0 paren)
        (subi x5 x10 (Token Symbol))
        (bne x5 x0 expected)
        (subi x10 x11 1)
        (addi x5 x0 Register::x31)
        (bge x10 x5 ident)
        (ld x1 x2)
        (addi x2 x2 8)
        (jalr x0 x1)

        paren
            ;; backtrack
            (ld x5 (+ x21 24))
            (subi x5 x5 16)
            (sd (+ x21 24) x5)
        expected
            (defcon expected-msg "Expected register in instruction")
            (la x5 expected-msg)
            (addi x6 x0 (len expected-msg))
            (add x7 x0 x0)
            (jal x0 print)
        eof
            (defcon eof-msg "Expected register in instruction, got EOF")
            (la x5 eof-msg)
            (addi x6 x0 (len eof-msg))
            (add x7 x0 x0)
            (jal x0 print)
        ident
            (defcon ident-msg "Expected register in instruction, got identifier `")
            (la x5 ident-msg)
            (addi x6 x0 (len ident-msg))
            (add x7 x5 x6)
            (subi x7 x7 1)
            (addi x8 x0 1)
            (add x10 x0 x11)
            (add x11 x0 x0)
            (jal x1 print-err-symbol)
            (ld x1 x2)
            (addi x2 x2 8)
            (add x10 x0 x0)
            (jalr x0 x1)

        print
            (jal x1 print-err)
            (ld x1 x2)
            (addi x2 x2 8)
            (add x10 x0 x0)
            (jalr x0 x1)
    )

    ;; RET:
    ;;  x10 - imm
    (module unwrap-imm
        (subi x2 x2 8)
        (sd x2 x1)
        (jal x1 tokenize)
        (beq x10 x0 eof)
        (subi x5 x10 (Token RightParen))
        (beq x5 x0 rparen)
        (subi x5 x10 (Token Char))
        (beq x5 x0 imm)
        (subi x5 x10 (Token Integer))
        (beq x5 x0 imm)
        (subi x5 x10 (Token Symbol))
        (beq x5 x0 symbol)
        (subi x5 x10 (Token LeftParen))
        (bne x5 x0 other-err)

        (jal x1 tokenize)
        (beq x10 x0 path-eof)
        (subi x5 x10 (Token RightParen))
        (beq x5 x0 empty)
        (subi x5 x10 (Token Symbol))
        (bne x5 x0 path)
        (subi x5 x11 Instr::len)
        (bne x5 x0 path)

        ;; len
        (jal x1 tokenize)
        (subi x2 x2 8)
        (sd x2 x0)
        (beq x10 x0 len-closer)
        (subi x5 x10 (Token Symbol))
        (beq x5 x0 len-path)
        (subi x5 x10 (Token LeftParen))
        (beq x5 x0 len-path)
        (subi x5 x10 (Token String))
        (beq x5 x0 len-string)
        (subi x5 x10 (Token Pound))
        (bne x5 x0 len-path-err)

        (jal x1 unwrap-array)
        (beq x10 x0 len-closer)
        (jal x0 len-string-free)

        len-string
            (jal x1 get-string)
        len-string-free
            (sd x2 x11)
            (jal x1 free)
            (jal x0 len-closer)

        len-path-err
            (defcon lenpath-msg "Expected path as argument in `len` expression")
            (la x5 lenpath-msg)
            (addi x6 x0 (len lenpath-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 len-closer)
        len-empty
            (defcon lenempty-msg "Empty path in `len` expression")
            (la x5 lenempty-msg)
            (addi x6 x0 (len lenempty-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 len-closer)
        len-undef
            (defcon lenun-msg "Global `")
            (defcon lenun-msg2 "` not defined/imported at use")
            (ld x10 (+ x2 8))
            (ld x11 x2)
            (la x5 lenun-msg)
            (addi x6 x0 (len lenun-msg))
            (la x7 lenun-msg2)
            (addi x8 x0 (len lenun-msg2))
            (add x12 x0 x0)
            (jal x1 print-err-path)
            (ld x10 (+ x2 8))
            (jal x1 free)
            (addi x2 x2 8)
            (sd x2 x0)
            (jal x0 len-closer)

        len-path
            (jal x1 unwrap-path)
            (beq x10 x0 len-empty)
            (subi x2 x2 8)
            (sd x2 x11)
            (sd (+ x2 8) x10)
            (jal x1 follow-path)
            (andi x5 x10 (Unit mask))
            (subi x5 x5 (Unit Bytes))
            (bne x5 x0 len-undef)
            (srai x11 x10 4)
            (addi x2 x2 8)
            (ld x10 x2)
            (sd x2 x11)
            (jal x1 free)

        len-closer
            (jal x1 tokenize)
            (beq x10 x0 len-eof)
            (subi x5 x10 (Token RightParen))
            (beq x5 x0 len-ret)
            (defcon lenargs-msg "Too many arguments or missing parenthesis in `len` expression")
            ;; backtrack
            (ld x5 (+ x21 (Tokenizer token_pos)))
            (subi x5 x5 16)
            (sd (+ x21 (Tokenizer token_pos)) x5)
            (la x5 lenargs-msg)
            (addi x6 x0 (len lenargs-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x1 skip-opcode)
            (jal x0 len-ret)
        len-eof
            (defcon leneof-msg "Unexpected EOF in `len` expression")
            (la x5 leneof-msg)
            (addi x6 x0 (len leneof-msg))
            (add x7 x0 x0)
            (jal x1 print-err)

        len-ret
            (ld x10 x2)
            (ld x1 (+ x2 8))
            (addi x2 x2 16)
            (jalr x0 x1)

        path
            ;; backtrack
            (ld x5 (+ x21 (Tokenizer token_pos)))
            (subi x5 x5 16)
            (sd (+ x21 (Tokenizer token_pos)) x5)
            (jal x1 unwrap-path)
            (beq x10 x0 path-eof)
            (subi x2 x2 16)
            (sd x2 x10)
            (sd (+ x2 8) x11)
            (jal x1 follow-path)
            (beq x10 x0 path-unknown)
            (andi x10 x10 (Unit mask))
            (subi x10 x10 (Unit Constant))
            (bne x10 x0 path-constant)
            (sd (+ x2 8) x11)
            (ld x10 x2)
            (jal x1 free)
            (ld x11 (+ x2 8))
            (addi x2 x2 16)
            (jal x0 imm)

        symbol
            ;; create temporary Vec<Symbol>
            (subi x2 x2 8)
            (sd x2 x11)
            (add x10 x0 x2)
            (addi x11 x10 8)
            (jal x1 follow-path)
            (beq x10 x0 symbol-unknown)
            (andi x10 x10 (Unit mask))
            (subi x10 x10 (Unit Constant))
            (bne x10 x0 symbol-constant)
            (addi x2 x2 8)

        imm
            (add x10 x0 x11)
            (ld x1 x2)
            (addi x2 x2 8)
            (jalr x0 x1)

        eof
            (defcon eof-msg "Unexpected EOF in expression")
            (la x5 eof-msg)
            (addi x6 x0 (len eof-msg))
        print
            (add x7 x0 x0)
            (jal x1 print-err)
            (ld x1 x2)
            (addi x2 x2 8)
            (add x10 x0 x0)
            (jalr x0 x1)
        rparen
            (defcon rparen-msg "Expected immediate in expression")
            (la x5 rparen-msg)
            (addi x6 x0 (len rparen-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            ;; backtrack
            (ld x5 (+ x21 (Tokenizer token_pos)))
            (subi x5 x5 16)
            (sd (+ x21 (Tokenizer token_pos)) x5)
            (ld x1 x2)
            (addi x2 x2 8)
            (add x10 x0 x0)
            (jalr x0 x1)
        other-err
            (la x5 rparen-msg)
            (addi x6 x0 (len rparen-msg))
            (jal x0 print)
        empty
            (defcon empty-msg "Empty path in expression")
            (la x5 empty-msg)
            (addi x6 x0 (len empty-msg))
            (jal x0 print)

        symbol-constant
            (defcon symcon-msg "Variable `")
            (defcon symcon-msg2 "` must be a constant in expression")
            (la x5 symcon-msg)
            (addi x6 x0 (len symcon-msg))
            (la x7 symcon-msg)
            (addi x8 x0 (len symcon-msg2))
        print-var
            (ld x10 x2)
            (add x11 x0 x0)
            (jal x1 print-err-symbol)
            (ld x1 (+ x2 8))
            (addi x2 x2 16)
            (add x10 x0 x0)
            (jalr x0 x1)
        symbol-unknown
            (defcon symun-msg "Unknown variable `")
            (defcon symun-msg2 "` in expression")
            (la x5 symun-msg)
            (addi x6 x0 (len symun-msg))
            (la x7 symun-msg)
            (addi x8 x0 (len symun-msg2))
            (jal x0 print-var)

        path-eof
            (add x10 x0 x0)
            (ld x1 x2)
            (addi x2 x2 8)
            (jalr x0 x1)
        path-constant
            (defcon pathcon-msg "` must be a constant")
            (la x7 pathcon-msg)
            (addi x8 x0 (len pathcon-msg))
        path-print
            (ld x10 x2)
            (ld x11 (+ x2 8))
            (la x5 symcon-msg)
            (addi x6 x0 (len symcon-msg))
            (add x12 x0 x0)
            (jal x1 print-err-path)
            (ld x10 x2)
            (jal x1 free)
            (ld x1 (+ x2 16))
            (addi x2 x2 24)
            (add x10 x0 x0)
            (jalr x0 x1)
        path-unknown
            (defcon pathun-msg "` not defined/imported at use")
            (la x7 pathun-msg)
            (addi x8 x0 (len pathun-msg))
            (jal x0 path-print)
    )

    ;; RET:
    ;;  x10 - register
    ;;  x11 - imm
    (module unwrap-offset
        (subi x2 x2 8)
        (sd x2 x1)
        (jal x1 tokenize)
        (beq x10 x0 eof)
        (subi x5 x10 (Token LeftParen))
        (beq x5 x0 neg)
        (subi x5 x10 (Token Symbol))
        (bne x5 x0 reg/offset)

        ;; backtrack
        (ld x5 (+ x21 (Tokenizer token_pos)))
        (subi x5 x5 16)
        (sd (+ x21 (Tokenizer token_pos)) x5)
        (jal x1 unwrap-register)
        (add x11 x0 x0)
        (ld x1 x2)
        (addi x2 x2 8)
        (jalr x0 x1)

        neg
        (jal x1 tokenize)
        (beq x10 x0 offset-eof)
        (subi x5 x10 (Token RightParen))
        (beq x5 x0 empty)
        (subi x5 x10 (Token Symbol))
        (bne x5 x0 expr)
        (add x27 x0 x0)
        (subi x5 x11 Instr::+)
        (beq x5 x0 get)
        (subi x5 x11 Instr::-)
        (bne x5 x0 symbol)
        (addi x27 x0 1)

        get
            (jal x1 tokenize)
            ;; backtrack
            (ld x5 (+ x21 (Tokenizer token_pos)))
            (subi x5 x5 16)
            (sd (+ x21 (Tokenizer token_pos)) x5)
            (beq x10 x0 offset-eof)
            (subi x5 x10 (Token RightParen))
            (beq x5 x0 reg/imm)
            (subi x5 x10 (Token Integer))
            (beq x5 x0 imm/reg)
            (subi x5 x10 (Token Char))
            (beq x5 x0 imm/reg)
            (subi x5 x10 (Token LeftParen))
            (beq x5 x0 imm/reg)
            (subi x5 x10 (Token Symbol))
            (bne x5 x0 reg/imm-skip)
            (addi x5 x0 Register::x31)
            (blt x5 x11 imm/reg)

            (subi x11 x11 1)
            (subi x2 x2 24)
            (sd (+ x2 16) x27)
            (sd x2 x11)
            ;; next
            (jal x1 tokenize)
            (jal x1 unwrap-imm)
            (sd (+ x2 8) x10)
            (jal x0 close)

        imm/reg
            (jal x1 unwrap-imm)
            (subi x2 x2 24)
            (sd (+ x2 16) x27)
            (sd (+ x2 8) x10)
            (jal x1 unwrap-register)
            (sd x2 x10)

        close
            (jal x1 tokenize)
            (subi x10 x10 (Token RightParen))
            (beq x10 x0 close-neg)
            ;; backtrack
            (ld x5 (+ x21 (Tokenizer token_pos)))
            (subi x5 x5 16)
            (sd (+ x21 (Tokenizer token_pos)) x5)
            (defcon close-msg "Expected closing parenthesis in expression offset")
            (la x5 close-msg)
            (addi x6 x0 (len close-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x1 skip-opcode)
        close-neg
            (ld x10 x2)
            (ld x11 (+ x2 8))
            (ld x27 (+ x2 16))
            (beq x27 x0 close-ret)
            (sub x11 x0 x11)
        close-ret
            (ld x1 (+ x2 24))
            (addi x2 x2 32)
            (jalr x0 x1)

        eof
            (defcon eof-msg "Unexpected EOF in expression")
            (la x5 eof-msg)
            (addi x6 x0 (len eof-msg))
        err-print
            (add x7 x0 x0)
            (jal x1 print-err)
        err-ret
            (add x10 x0 x0)
            (add x11 x0 x0)
            (ld x1 x2)
            (addi x2 x2 8)
            (jalr x0 x1)
        reg/offset
            (defcon reg/offset-msg "Expected register/offset in expression")
            (subi x2 x2 8)
            (sd x2 x10)
            (la x5 reg/offset-msg)
            (addi x6 x0 (len reg/offset-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (ld x10 x2)
            (addi x2 x2 8)
            (subi x10 x10 (Token RightParen))
            (bne x10 x0 err-ret)
            ;; backtrack
            (ld x5 (+ x21 (Tokenizer token_pos)))
            (subi x5 x5 16)
            (sd (+ x21 (Tokenizer token_pos)) x5)
            (jal x0 err-ret)
        offset-eof
            (defcon offset-eof-msg "Unexepcted EOF in expression offset")
            (la x5 offset-eof-msg)
            (addi x6 x0 (len offset-eof-msg))
            (jal x0 err-print)
        empty
            (defcon empty-msg "Empty offset in expression")
            (la x5 empty-msg)
            (addi x6 x0 (len empty-msg))
            (jal x0 err-print)
        expr
            (defcon expr-msg "Expected `+`/`-` in expression offset")
            (la x5 expr-msg)
            (addi x6 x0 (len expr-msg))
        err-skip-ret
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x1 skip-opcode)
            (jal x0 err-ret)
        symbol
            (defcon symbol-msg "Expected `+`/`-`, got `")
            (defcon symbol-msg2 "` in expression offset")
            (la x5 symbol-msg)
            (addi x6 x0 (len symbol-msg))
            (la x7 symbol-msg2)
            (addi x8 x0 (len symbol-msg2))
            (add x10 x0 x11)
            (add x11 x0 x0)
            (jal x1 print-err-symbol)
            (jal x1 skip-opcode)
            (jal x0 err-ret)
        reg/imm
            (defcon reg/imm-msg "Expected register and immediate in expression offset")
            (la x5 reg/imm-msg)
            (addi x6 x0 (len reg/imm-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x1 tokenize)
            (jal x0 err-ret)
        reg/imm-skip
            (la x5 reg/imm-msg)
            (addi x6 x0 (len reg/imm-msg))
            (jal x0 err-skip-ret)
    )

    ;; ARGS:
    ;;  x10 - branch? bool
    ;; RET:
    ;;  x10 - Option<Symbol,
    ;;  x11 - i32>
    (module unwrap-label
        (subi x2 x2 16)
        (sd x2 x1)
        (sd (+ x2 8) x10)
        (jal x1 tokenize)
        (beq x10 x0 eof)
        (subi x5 x10 (Token LeftParen))
        (beq x5 x0 path)
        (subi x5 x10 (Token RightParen))
        (beq x5 x0 rparen)
        (subi x5 x10 (Token Symbol))
        (bne x5 x0 other)

        (subi x2 x2 16)
        (sd x2 x11)
        (ld x5 (+ x20 (Asm module)))
        (sd (+ x2 8) x5)
        (addi x10 x5 (Module labels))
        (jal x1 (symbol-map16 get))
        (beq x11 x0 jumps)
        (add x11 x0 x10)
        (ld x10 x2)
        (ld x5 (+ x2 8))
        (ld x6 (+ x5 (Module code.start)))
        (ld x8 (+ x5 (Module code)))
        (sub x6 x8 x6)
        (sub x11 x11 x6)

        ret
        (ld x1 (+ x2 16))
        (addi x2 x2 32)
        (jalr x0 x1)

        jumps
            (ld x5 (+ x2 8))
            (ld x6 (+ x5 (Module jumps)))
            (ld x7 (+ x5 (Module jumps.capacity)))
            (bne x6 x7 after-resize-jumps)
                (addi x10 x5 (Module jumps.start))
                (jal x1 resize-array)
                (add x6 x0 x10)
                (ld x5 (+ x2 8))
        after-resize-jumps
            (ld x10 x2)
            (sd x6 x10)
            (ld x10 (+ x5 (Module code.start)))
            (ld x11 (+ x5 (Module code)))
            (sub x10 x11 x10)
            (ld x11 (+ x2 24))
            (or x10 x10 x11)
            (sd (+ x6 8) x10)
            (addi x6 x6 16)
            (sd (+ x5 (Module jumps)) x6)
            (add x10 x0 x0)
            (jal x0 ret)

        path
            (jal x1 unwrap-path)
            (beq x10 x0 path-err)
            (ld x5 (+ x20 (Asm module)))
            (ld x7 (+ x5 (Module refs)))
            (ld x8 (+ x5 (Module refs.capacity)))
            (bne x7 x8 after-resize)
            resize
                (subi x2 x2 24)
                (sd x2 x5)
                (sd (+ x2 8) x10)
                (sd (+ x2 16) x11)
                (addi x10 x5 (Module refs.start))
                (jal x1 resize-array)
                (add x7 x0 x10)
                (ld x5 x2)
                (ld x10 (+ x2 8))
                (ld x11 (+ x2 16))
                (addi x2 x2 24)
        after-resize
            (ld x6 (+ x5 (Module code.start)))
            (ld x8 (+ x5 (Module code)))
            (sub x6 x8 x6)
            (ld x31 (+ x2 8))
            (or x6 x6 x31)
            (sd x7 x10)
            (sd (+ x7 8) x11)
            (sd (+ x7 16) x6)
            (addi x7 x7 24)
            (sd (+ x5 (Module refs)) x7)
            (ld x1 x2)
            (addi x2 x2 16)
            (add x10 x0 x0)
            (jalr x0 x1)

        path-err
            (defcon path-msg "Expected non-empty path in instruction")
            (la x5 path-msg)
            (addi x6 x0 (len path-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 err-ret)
        eof
            (defcon eof-msg "Expected label in instruction, got EOF")
            (la x5 eof-msg)
            (addi x6 x0 (len eof-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 err-ret)
        other
            (defcon other-msg "Expected label in instruction")
            (la x5 other-msg)
            (addi x6 x0 (len other-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 err-ret)
        rparen
            (la x5 other-msg)
            (addi x6 x0 (len other-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            ;; backtrack
            (ld x5 (+ x21 24))
            (subi x5 x5 16)
            (sd (+ x21 24) x5)
        err-ret
            (add x10 x0 x0)
            (ld x1 x2)
            (addi x2 x2 16)
            (jalr x0 x1)
    )

    ;; RET:
    ;;  x10 - path: Vec<Symbol>
    ;;  x11 - path.end
    (module unwrap-path
        ;; backtrack
        (ld x5 (+ x21 (Tokenizer token_pos)))
        (subi x5 x5 16)
        (sd (+ x21 (Tokenizer token_pos)) x5)

        (subi x2 x2 8)
        (sd x2 x1)
        (addi x10 x0 64)
        (jal x1 malloc)
        (add x25 x0 x10)
        (add x26 x0 x10)
        (addi x27 x10 64)

        (jal x1 tokenize)
        (subi x5 x10 (Token Symbol))
        (beq x5 x0 symbol)

        loop
            (jal x1 tokenize)
            (beq x10 x0 eof)
            (subi x5 x10 (Token Symbol))
            (beq x5 x0 push)
            (subi x5 x10 (Token RightParen))
            (bne x5 x0 token)
        (sub x10 x26 x25)
        (subi x10 x10 8)
        (beq x10 x0 warn)
        ret
        (add x10 x0 x25)
        (add x11 x0 x26)
        (ld x1 x2)
        (addi x2 x2 8)
        (jalr x0 x1)

        push
            (bne x26 x27 after-resize)
            (subi x2 x2 8)
            (sd x2 x11)
            (add x10 x0 x25)
            (sub x11 x26 x25)
            (slli x11 x11 1)
            (jal x1 malloc)
            (sub x26 x26 x25)
            (slli x27 x26 1)
            (add x25 x0 x10)
            (add x26 x26 x25)
            (add x27 x27 x25)
            (ld x11 x2)
            (addi x2 x2 8)
        after-resize
            (sd x26 x11)
            (addi x26 x26 8)
            (jal x0 loop)

        symbol
            (sd x25 x11)
            (add x10 x0 x25)
            (addi x11 x26 8)
            (ld x1 x2)
            (addi x2 x2 8)
            (jalr x0 x1)

        warn
            (defcon warn-msg "Unnecessary parenthesis in path")
            (ld x5 (+ x21 120))
            (subi x2 x2 8)
            (sd x2 x5)
            (la x5 warn-msg)
            (addi x6 x0 (len warn-msg))
            (jal x1 print-err)
            (ld x5 x2)
            (addi x2 x2 8)
            (sd (+ x21 120) x5)
            (jal x0 ret)
        eof
            (defcon eof-msg "Unexpected EOF in path")
            (la x5 eof-msg)
            (addi x6 x0 (len eof-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 err-ret)
        token
            (defcon token-msg "Unexpected token in path")
            (la x5 token-msg)
            (addi x6 x0 (len token-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x1 skip-opcode)
        err-ret
            (add x10 x0 x25)
            (jal x1 free)
            (add x10 x0 x0)
            (ld x1 x2)
            (addi x2 x2 8)
            (jalr x0 x1)
    )

    ;; RET:
    ;;  x10 - Option<Symbol>
    (module unwrap-ident
        (subi x2 x2 8)
        (sd x2 x1)
        (jal x1 tokenize)
        (beq x10 x0 eof)
        (subi x5 x10 (Token RightParen))
        (beq x5 x0 paren)
        (subi x5 x10 (Token Symbol))
        (bne x5 x0 ident)
        (add x10 x0 x11)
        (ld x1 x2)
        (addi x2 x2 8)
        (jalr x0 x1)

        eof
            (defcon eof-msg "Unexpected EOF in definition")
            (la x5 eof-msg)
            (addi x6 x0 (len eof-msg))
            (jal x0 print)
        paren
            (defcon paren-msg "Definition must have an identifier and value")
            (la x5 paren-msg)
            (addi x6 x0 (len paren-msg))
            (jal x0 print)
        ident
            (defcon ident-msg "Expected identifier in definition")
            (la x5 ident-msg)
            (addi x6 x0 (len ident-msg))
        print
            (add x7 x0 x0)
            (jal x1 print-err)
            (add x10 x0 x0)
            (ld x1 x2)
            (addi x2 x2 8)
            (jalr x0 x1)
    )

    ;; RET:
    ;;  x10 - arr: Vec<u8>
    ;;  x11 - arr.len: Vec<u8>
    (module unwrap-array
        (subi x2 x2 8)
        (sd x2 x1)
        (jal x1 tokenize)
        (beq x10 x0 pound-eof)
        (subi x5 x10 (Token RightParen))
        (beq x5 x0 pound-incomplete)
        (subi x5 x10 (Token LeftParen))
        (bne x5 x0 pound-unexpected)
        (addi x10 x0 32)
        (jal x1 malloc)
        (add x25 x0 x10)
        (add x26 x0 x10)
        (addi x27 x10 32)

        loop
            (jal x1 tokenize)
            (beq x10 x0 eof)
            (subi x5 x10 (Token Symbol))
            (beq x5 x0 variable)
            (subi x5 x10 (Token Integer))
            (beq x5 x0 int)
            (subi x5 x10 (Token Char))
            (beq x5 x0 push)
            (subi x5 x10 (Token RightParen))
            (bne x5 x0 other)

            (add x10 x0 x25)
            (sub x11 x26 x25)
            (ld x1 x2)
            (addi x2 x2 8)
            (jalr x0 x1)

        int
            (blt x11 x0 out-of-range)
            (addi x5 x0 256)
            (bge x11 x5 out-of-range)
        push
            (beq x26 x27 resize)
            (sb x26 x11)
            (addi x26 x26 1)
            (jal x0 loop)
        resize
            (subi x2 x2 8)
            (sd x2 x11)
            (add x10 x0 x25)
            (sub x11 x26 x25)
            (slli x11 x11 1)
            (jal x1 realloc)
            (sub x26 x26 x25)
            (slli x27 x26 1)
            (add x25 x0 x10)
            (add x26 x26 x10)
            (add x27 x27 x10)
            (ld x11 x2)
            (addi x2 x2 8)
            (jal x0 push)

        pound-eof
            (defcon pound-eof-msg "Unexpected `#` at end of file")
            (la x5 pound-eof-msg)
            (addi x6 x0 (len pound-eof-msg))
            (jal x0 print)
        pound-incomplete
            (defcon pound-incomplete-msg "Unexpected `#` in definition, definition incomplete")
            (la x5 pound-incomplete-msg)
            (addi x6 x0 (len pound-incomplete-msg))
            (jal x0 print)
        pound-unexpected
            (defcon pound-unexpected-msg "Unexpected `#` in definition")
            (la x5 pound-incomplete-msg)
            (addi x6 x0 (len pound-incomplete-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x1 skip-opcode)
            (jal x0 err-ret)
        eof
            (defcon eof-msg "Unexpected EOF in array literal")
            (la x5 eof-msg)
            (addi x6 x0 (len eof-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 print)
        variable
            (defcon var-msg "Array literals must consist of u8 integers, cannot use variables")
            (la x5 var-msg)
            (addi x6 x0 (len var-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 loop)
        other
            (defcon other-msg "Array literals must consist of u8 integers")
            (la x5 other-msg)
            (addi x6 x0 (len other-msg))
            (add x7 x0 x0)
            (jal x1 print-err)
            (jal x0 loop)
        print
            (add x7 x0 x0)
            (jal x1 print-err)
        err-ret
            (add x10 x0 x25)
            (jal x1 free)
            (add x10 x0 x0)
            (ld x1 x2)
            (addi x2 x2 8)
            (jalr x0 x1)
        out-of-range
            (defcon oor-msg "Array literals must consist of u8 integers, `")
            (defcon oor-msg2 "` is out of range")
            (la x5 oor-msg)
            (addi x6 x0 (len oor-msg))
            (la x7 oor-msg2)
            (addi x8 x0 (len oor-msg2))
            (add x10 x0 x11)
            (subi x2 x2 8)
            (sd x2 x11)
            (jal x1 print-err-int)
            (ld x11 x2)
            (addi x2 x2 8)
            (jal x0 push)
    )

    ;; ARGS:
    ;;  x10 - path Vec<Symbol>
    ;;  x11 - path.end
    ;; RET:
    ;;  x10 - Option<Unit>
    ;;  x11 - value
    (module follow-path
        (subi x2 x2 32)
        (sd x2 x1)
        (addi x5 x10 8)
        (bne x5 x11 preloop)
        (ld x5 x10)
        (subi x6 x5 Instr::^)
        (beq x6 x0 single-err)
        (subi x6 x5 Instr::*)
        (beq x6 x0 single-err)
        preloop
        (ld x7 (+ x20 (Asm module)))
        (add x5 x0 x10)
        (add x6 x0 x11)
        carat-loop
            (ld x8 x5)
            (subi x9 x8 Instr::^)
            (bne x9 x0 loop)
            (addi x5 x5 8)
            (ld x7 (+ x7 (Module parent)))
            (beq x7 x0 root-err)
            (bne x5 x6 carat-loop)
        loop
            (beq x5 x6 done)
            (ld x11 x5)
            (addi x5 x5 8)
            (subi x8 x11 Instr::^)
            (beq x8 x0 path-^)
            (subi x8 x11 Instr::*)
            (beq x8 x0 path-*)

            (sd (+ x2 8) x5)
            (sd (+ x2 16) x6)
            (sd (+ x2 24) x7)
            (addi x10 x7 (Module children))
            (jal x1 (symbol-map24 get))
            (ld x5 (+ x2 8))
            (ld x6 (+ x2 16))
            (beq x12 x0 check-parent)
            (andi x8 x10 (Unit mask))
            (subi x8 x8 (Unit Module))
            (bne x8 x0 imm)
            (add x7 x0 x11)
            (jal x0 loop)

        check-parent
            (ld x7 (+ x2 24))
            (lw x8 (+ x7 (Module filep)))
            (bne x8 x0 parent-done)
            (ld x7 (+ x7 (Module parent)))
            (subi x5 x5 8)
            (jal x0 loop)
        parent-done
            (addi x10 x0 1)
            (sd (+ x21 (Tokenizer err)) x10)
            (add x10 x0 x0)
            (jal x0 ret)

        imm
            (beq x5 x6 ret)
            (add x10 x0 x0)
            (jal x0 ret)

        done
            (addi x10 x0 (Unit Module))
            (add x11 x0 x7)
        ret
            (ld x1 x2)
            (addi x2 x2 32)
            (jalr x0 x1)


        single-err
            (defcon single-msg "Path cannot consist of just `^`/`*`")
            (la x5 single-msg)
            (addi x6 x0 (len single-msg))
        print
            (add x7 x0 x0)
            (jal x1 print-err)
            (ld x1 x2)
            (addi x2 x2 32)
            (add x10 x0 x0)
            (jalr x0 x1)
        root-err
            (defcon root-msg "Path jumped past root in expression")
            (la x5 root-msg)
            (addi x6 x0 (len root-msg))
            (jal x0 print)
        path-^
            (defcon ^-msg "Bad path, can only move up (`^`) at beginning of path in expression")
            (la x5 ^-msg)
            (addi x6 x0 (len ^-msg))
            (jal x0 print)
        path-*
            (defcon *-msg "Bad path, only import statements can use `*` in expression")
            (la x5 *-msg)
            (addi x6 x0 (len *-msg))
            (jal x0 print)
    )

    ;; ARGS:
    ;;  x10 - path Vec<Symbol>
    ;;  x11 - path.end
    ;; RET:
    ;;  x10 - string
    ;;  x11 - string.len
    (module path->string
        (sub x5 x11 x10)
        (subi x5 x5 8)
        (beq x5 x0 single)
        (subi x2 x2 24)
        (sd x2 x1)

        (add x26 x0 x10)
        (add x27 x0 x11)
        (addi x10 x0 2)
        (jal x1 malloc)
        (add x24 x0 x10)
        (addi x25 x0 2)
        (addi x5 x0 #'(')
        (sb x24 x5)

        loop
            (ld x10 x26)
            (addi x26 x26 8)
            (jal x1 symbol->string)
            (sd (+ x2 8) x10)
            (sd (+ x2 16) x11)
            (add x10 x0 x24)
            (add x11 x11 x25)
            (jal x1 realloc)
            (add x24 x0 x10)
            (add x10 x10 x25)
            (subi x10 x10 2)
            (ld x11 (+ x2 8))
            (ld x12 (+ x2 16))
            (add x25 x25 x12)
            (jal x1 strdup)
            (bne x26 x27 loop)
        (addi x5 x0 #')')
        (add x6 x24 x25)
        (sb (- x6 1) x5)
        (add x10 x0 x24)
        (add x11 x0 x25)
        (ld x1 x2)
        (addi x2 x2 24)
        (jalr x0 x1)

        single
            (subi x2 x2 24)
            (sd x2 x1)
            (ld x10 x10)
            (jal x1 symbol->string)
            (sd (+ x2 8) x10)
            (sd (+ x2 16) x11)
            (add x10 x0 x11)
            (jal x1 malloc)
            (ld x11 (+ x2 8))
            (ld x12 (+ x2 16))
            (sd (+ x2 8) x10)
            (jal x1 strdup)
            (ld x10 (+ x2 8))
            (ld x11 (+ x2 16))
            (ld x1 x2)
            (addi x2 x2 24)
            (jalr x0 x1)
    )

    ;; ARGS:
    ;;  x10 - Symbol
    ;; RET:
    ;;  x10 - bool
    (module in-scope?
        (subi x2 x2 24)
        (sd x2 x1)
        (add x11 x0 x10)
        (ld x10 (+ x20 (Asm module)))
        (sd (+ x2 8) x10)
        (sd (+ x2 16) x11)
        loop
            (addi x10 x10 (Module children))
            (jal x1 (symbol-map24 get))
            (bne x12 x0 ret)
            (ld x10 (+ x2 8))
            (lw x11 (+ x10 (Module filep)))
            (bne x11 x0 ret)
            (ld x10 (+ x10 (Module parent)))
            (sd (+ x2 8) x10)
            (ld x11 (+ x2 16))
            (jal x0 loop)
        ret
        (ld x1 x2)
        (addi x2 x2 24)
        (add x10 x0 x12)
        (jalr x0 x1)
    )

    ;; ARGS:
    ;;  x11 - str.start
    ;;  x12 - str.len
    ;; RET:
    ;;  x10 - str
    ;;  x11 - str.len
    (module get-string
        (subi x2 x2 24)
        (sd x2 x1)
        (sd (+ x2 8) x11)
        (sd (+ x2 16) x12)
        (add x10 x0 x12)
        (jal x1 malloc)
        (ld x1 x2)
        (ld x5 (+ x2 8))
        (ld x6 (+ x2 16))
        (addi x2 x2 24)
        (add x6 x6 x5)
        (add x7 x0 x10)
        (beq x5 x6 ret)
        loop
            (lb x8 x5)
            (subi x9 x8 #'\\')
            (beq x9 x0 escape)
            (sb x7 x8)
            (addi x7 x7 1)
            (addi x5 x5 1)
            (bne x5 x6 loop)
        ret
        (sub x11 x7 x10)
        (jalr x0 x1)

        escape
            (addi x5 x5 1)
            (beq x5 x6 escape-empty)
            (lb x8 x5)
            (addi x31 x0 #'\r')
            (subi x9 x8 #'r')
            (beq x9 x0 escape-push)
            (addi x31 x0 #'\n')
            (subi x9 x8 #'n')
            (beq x9 x0 escape-push)
            (addi x31 x0 #'\t')
            (subi x9 x8 #'t')
            (beq x9 x0 escape-push)
            (add x31 x0 x0)
            (subi x9 x8 #'0')
            (beq x9 x0 escape-push)
            (add x31 x0 x8)
        escape-push
            (sb x7 x31)
            (addi x7 x7 1)
            (addi x5 x5 1)
            (bne x5 x6 loop)
            (jal x0 ret)
        escape-empty
            (defcon escape-msg "Unfinished escape code")
            (la x5 escape-msg)
            (addi x6 x0 (len escape-msg))
            (add x7 x0 x0)
            (subi x2 x2 24)
            (sd x2 x1)
            (sd (+ x2 8) x10)
            (sub x7 x7 x10)
            (sd (+ x2 16) x7)
            (jal x1 print-err)
            (ld x1 x2)
            (ld x10 (+ x2 8))
            (ld x11 (+ x2 16))
            (addi x2 x2 24)
            (jalr x0 x1)
    )


    (module finish
        (define code.start 8)
        (define code 16)
        (define code.capacity 24)
        (define refs.start 32)
        (define refs 40)
        (define refs.capacity 48)
        (define rewrites.start 56)
        (define rewrites 64)
        (define rewrites.capacity 72)

        (subi x2 x2 120)
        (sd x2 x1)

        (addi x10 x0 1)
        (slli x10 x10 12)
        (add x23 x0 x10)
        ;; code
        (jal x1 malloc)
        (sd (+ x2 code.start) x10)
        (sd (+ x2 code) x10)
        (add x10 x10 x23)
        (sd (+ x2 code.capacity) x10)
        ;; refs
        (add x10 x0 x23)
        (jal x1 malloc)
        (sd (+ x2 refs.start) x10)
        (sd (+ x2 refs) x10)
        (add x10 x10 x23)
        (sd (+ x2 refs.capacity) x10)
        ;; rewrites
        (add x10 x0 x23)
        (jal x1 malloc)
        (sd (+ x2 rewrites.start) x10)
        (sd (+ x2 rewrites) x10)
        (add x10 x10 x23)
        (sd (+ x2 rewrites.capacity) x10)

        (ld x5 (+ x20 (Asm modules.start)))
        ;; skip the root module
        (addi x5 x5 8)
        (ld x6 (+ x20 (Asm modules)))
        (sd (+ x2 88) x6)
        module-loop
            (beq x5 x6 module-loop-after)
            (ld x10 x5)
            (addi x5 x5 8)
            (sd (+ x2 80) x5)
            (jal x1 (Module finish))
            (ld x5 (+ x21 (Tokenizer err)))
            (or x5 x5 x12)
            (sd (+ x21 (Tokenizer err)) x5)
            (sd (+ x2 96) x10)
            (sd (+ x2 104) x11)
            (sd (+ x2 112) x10)
            ;; resize refs
            resize-refs
            (sub x10 x11 x10)
            (ld x11 (+ x2 80))
            (ld x11 (- x11 8))
            (ld x12 (+ x11 (Module refs)))
            (ld x11 (+ x11 (Module refs.start)))
            (sub x12 x12 x11)
            (add x11 x10 x12)
            (slli x11 x11 1)
            (ld x5 (+ x2 refs))
            (ld x6 (+ x2 refs.capacity))
            (sub x5 x6 x5)
            (bge x5 x11 resize-rewrites)
            (addi x10 x2 refs.start)
            (jal x1 resize-array)
            (ld x10 (+ x2 96))
            (ld x11 (+ x2 104))
            (jal x0 resize-refs)

            resize-rewrites
            (ld x5 (+ x2 80))
            (ld x5 (- x5 8))
            (ld x6 (+ x5 (Module rewrites)))
            (ld x5 (+ x5 (Module rewrites.start)))
            (sub x6 x6 x5)
            (ld x10 (+ x2 rewrites))
            (ld x11 (+ x2 rewrites.capacity))
            (sub x11 x11 x10)
            (bge x11 x6 resize-code)
            (addi x10 x2 rewrites.start)
            (jal x1 resize-array)
            (jal x0 resize-rewrites)

            resize-code
            (ld x5 (+ x2 80))
            (ld x5 (- x5 8))
            (ld x6 (+ x5 (Module code)))
            (ld x5 (+ x5 (Module code.start)))
            (sub x6 x6 x5)
            (ld x10 (+ x2 code))
            (ld x11 (+ x2 code.capacity))
            (sub x11 x11 x10)
            (bge x11 x6 pre-jumps-loop)
            (addi x10 x2 code.start)
            (jal x1 resize-array)
            (jal x0 resize-code)

            pre-jumps-loop
            (ld x10 (+ x2 96))
            (ld x11 (+ x2 104))
            jumps-loop
                (beq x10 x11 jumps-loop-after)
                (addi x10 x0 8)
                (jal x1 malloc)
                (add x6 x0 x10)
                (ld x10 (+ x2 96))
                (ld x11 (+ x2 104))
                (ld x7 x10)
                (sd x6 x7)
                (ld x5 (+ x2 80))
                (ld x5 (- x5 8))
                (ld x7 (+ x2 refs))
                (sd x7 x5)
                (sd (+ x7 8) x6)
                (addi x6 x6 8)
                (sd (+ x7 16) x6)
                (ld x5 (+ x2 code.start))
                (ld x6 (+ x2 code))
                (sub x5 x6 x5)
                ;(slli x5 x5 1)
                (ld x6 (+ x10 8))
                (add x6 x6 x5)
                (sd (+ x7 24) x6)
                (addi x7 x7 32)
                (sd (+ x2 refs) x7)
                (addi x10 x10 16)
                (sd (+ x2 96) x10)
                (jal x0 jumps-loop)
            jumps-loop-after
            (ld x10 (+ x2 112))
            (beq x10 x0 jumps-loop-after-free)
            (jal x1 free)
            jumps-loop-after-free
            (ld x5 (+ x2 code.start))
            (ld x6 (+ x2 code))
            (sub x5 x6 x5)
            ;(slli x5 x5 1)
            (ld x6 (+ x2 80))
            (ld x8 (- x6 8))
            (ld x7 (+ x8 (Module refs)))
            (ld x6 (+ x8 (Module refs.start)))
            (ld x10 (+ x2 refs))

            refs-loop
                (beq x6 x7 refs-loop-after)
                (ld x28 x6)
                (ld x29 (+ x6 8))
                (ld x30 (+ x6 16))
                (add x30 x30 x5)
                (sd x10 x8)
                (sd (+ x10 8) x28)
                (sd (+ x10 16) x29)
                (sd (+ x10 24) x30)
                (addi x10 x10 32)
                (addi x6 x6 24)
                (jal x0 refs-loop)
            refs-loop-after
            (sd (+ x2 refs) x10)
            (ld x6 (+ x8 (Module rewrites.start)))
            (ld x7 (+ x8 (Module rewrites)))
            (ld x10 (+ x2 rewrites))
            ;(srai x5 x5 1)

            rewrites-loop
                (beq x6 x7 rewrites-loop-after)
                (ld x28 x6)
                (ld x29 (+ x6 8))
                (add x28 x28 x5)
                (sd x10 x28)
                (sd (+ x10 8) x29)
                (addi x6 x6 16)
                (addi x10 x10 16)
                (jal x0 rewrites-loop)
            rewrites-loop-after
            (sd (+ x2 64) x10)

            (sw (+ x8 (Module location)) x5)
            (ld x5 (+ x8 (Module code.start)))
            (ld x6 (+ x8 (Module code)))
            (ld x10 (+ x2 code))
            (beq x5 x6 code-append-after)
            code-append
                (lw x7 x5)
                (sw x10 x7)
                (addi x5 x5 4)
                (addi x10 x10 4)
                (bne x5 x6 code-append)
            code-append-after
            (sw (+ x2 code) x10)
            (ld x5 (+ x2 80))
            (ld x6 (+ x2 88))
            (jal x0 module-loop)
        module-loop-after

        (ld x5 (+ x2 refs.start))
        (ld x6 (+ x2 refs))
        (beq x5 x6 ref-loop-after)
        ;; TODO
        ref-loop
            (ld x10 x5)
            (sd (+ x20 (Asm module)) x10)
            (ld x10 (+ x5 8))
            (ld x11 (+ x5 16))
            (sd (+ x2 refs.capacity) x5)
            (jal x1 follow-path)
            (beq x10 x0 unknown-err)
            (andi x10 x10 (Unit mask))
            (subi x10 x10 (Unit Module))
            (bne x10 x0 module-err)
            (lw x10 (+ x11 (Module location)))
            (ld x5 (+ x2 refs.capacity))
            (ld x12 (+ x5 24))
            (ld x13 (+ x5 8))
            (ld x14 (+ x5 16))
            (ld x11 (+ x2 8))
            (jal x1 rewrite-instruction)
        ref-loop-continue
            (ld x5 (+ x2 refs.capacity))
            (ld x6 (+ x2 refs))
            (addi x5 x5 32)
            (beq x10 x0 ref-err)
            (sd (+ x21 (Tokenizer err)) x10)
            ref-err
            (bne x5 x6 ref-loop)
        ref-loop-after

        (ld x10 (+ x2 code.start))
        (ld x11 (+ x2 code))
        (bne x10 x11 ret)
        (defcon code-msg "Error: No instructions found, cannot build executable.\n")
        (addi x10 x0 STDERR)
        (la x11 code-msg)
        (addi x12 x0 (len code-msg))
        (addi x17 x0 SYS_WRITE)
        (ecall)
        (ld x10 (+ x2 code.start))
        (ld x11 (+ x2 code))
        (addi x5 x0 1)
        (sd (+ x21 (Tokenizer err)) x5)
        ret
        (ld x12 (+ x2 rewrites.start))
        (ld x13 (+ x2 rewrites))
        (ld x1 x2)
        (addi x2 x2 120)
        (jalr x0 x1)

        unknown-err
            (defcon unknown-msg "Unknown module/label `.")
            (la x5 unknown-msg)
            (addi x6 x0 (len unknown-msg))
            (jal x0 err-cont)
        module-err
            (defcon module-msg "Expected module at path `.")
            (la x5 module-msg)
            (addi x6 x0 (len module-msg))
        err-cont
            (subi x6 x6 1)
            (add x7 x5 x6)
            (subi x7 x7 1)
            (addi x8 x0 1)
            (ld x5 (+ x2 48))
            (ld x10 (+ x5 8))
            (ld x11 (+ x5 16))
            (jal x1 print-err-path)
            (addi x10 x0 1)
            (jal x0 ref-loop-continue)
    )

    ;; ARGS:
    ;;  x5 - msg
    ;;  x6 - msg.len
    ;;  x7 - note
    ;;  x8 - note.len
    (module print-err
        (ld x14 (+ x21 (Tokenizer token_pos)))
        (subi x14 x14 16)
        (ld x15 (+ x21 (Tokenizer tokens.start)))
        (sub x14 x14 x15)
        (ld x15 (+ x21 (Tokenizer token_info.start)))
        (add x14 x14 x15)
        (lw x15 x14)
        (ld x14 (+ x14 8))
        (jal x0 (tokenize print-err))
    )

    ;; ARGS:
    ;;  x5 - msg
    ;;  x6 - msg.len
    ;;  x7 - msg2
    ;;  x8 - msg2.len
    ;;  x10 - path
    ;;  x11 - path.end
    ;;  x12 - note
    ;;  x13 - note.len
    (module print-err-path
        (subi x2 x2 72)
        (sd x2 x1)
        (sd (+ x2 8) x5)
        (sd (+ x2 16) x6)
        (sd (+ x2 24) x7)
        (sd (+ x2 32) x8)
        (sd (+ x2 56) x12)
        (sd (+ x2 64) x13)
        (jal x1 path->string)
        (sd (+ x2 40) x10)
        (sd (+ x2 48) x11)
        (ld x6 (+ x2 16))
        (ld x8 (+ x2 32))
        (add x10 x6 x8)
        (add x10 x10 x11)
        (jal x1 malloc)
        (ld x11 (+ x2 8))
        (ld x12 (+ x2 16))
        (sd (+ x2 8) x10)
        (jal x1 strdup)
        (ld x11 (+ x2 40))
        (ld x12 (+ x2 48))
        (jal x1 strdup)
        (ld x11 (+ x2 24))
        (ld x12 (+ x2 32))
        (jal x1 strdup)
        (ld x5 (+ x2 8))
        (sub x6 x11 x5)
        (ld x7 (+ x2 56))
        (ld x8 (+ x2 64))
        (jal x1 print-err)
        (ld x10 (+ x2 8))
        (jal x1 free)
        (ld x10 (+ x2 40))
        (jal x1 free)
        (ld x1 x2)
        (addi x2 x2 72)
        (jalr x0 x1)
    )

    ;; ARGS:
    ;;  x5 - msg
    ;;  x6 - msg.len
    ;;  x7 - msg2
    ;;  x8 - msg2.len
    ;;  x10 - int
    (module print-err-int
        (subi x2 x2 48)
        (sd x2 x1)
        (sd (+ x2 8) x5)
        (sd (+ x2 16) x6)
        (sd (+ x2 24) x7)
        (sd (+ x2 32) x8)
        (sd (+ x2 40) x10)
        (add x10 x6 x8)
        (addi x10 x10 20)
        (jal x1 malloc)
        (ld x11 (+ x2 8))
        (ld x12 (+ x2 16))
        (sd (+ x2 8) x10)
        (jal x1 strdup)
        (ld x11 (+ x2 40))
        (jal x1 format-int)
        (ld x11 (+ x2 24))
        (ld x12 (+ x2 32))
        (jal x1 strdup)
        (ld x5 (+ x2 8))
        (sub x6 x10 x5)
        (add x7 x0 x0)
        (ld x1 x2)
        (addi x2 x2 48)
        (jal x0 print-err)
    )
)

;; INPUT:
;;  x10 - program-ptr: ArrayBuf<u32>
;;  x11 - program-end
;;  x12 - data-ptr: ArrayBuf<u8>
;;  x13 - data-end
;;  x14 - rodata-ptr: ArrayBuf<u8>
;;  x15 - rodata-end
;;  x16 - rewrite-ptr: ArrayBuf<(program-ptr[i], usize, bool)>
;;  x17 - rewrite-end
;;  x18 - Output fd
(module elf
    ;; 0x400000
    (define ENTRY_LOCATION 0x400)
    ;; 0x600000
    (define DATA_LOCATION 0x600)
    ;; 0x800000
    (define RODATA_LOCATION 0x800)
    ;; 64 + 56 + 56
    (define program_offset 176)
    (defvar ehdr #(127 69 76 70 2 1 1 0 0 0 0 0 0 0 0 0
                   2 0 ;; e_type
                   243 0 ;; e_machine
                   1 0 0 0 ;; e_version
                   176 0 64 0 0 0 0 0 ;; e_entry
                   64 0 0 0 0 0 0 0 ;; e_phoff
                   0 0 0 0 0 0 0 0 ;; e_shoff
                   0 0 0 0 ;; e_flags
                   64 0 ;; e_ehsize
                   56 0 ;; e_phentsize
                   0 0 ;; e_phnum
                   64 0 ;; e_shentsize
                   0 0 ;; e_shnum
                   0 0)) ;; e_shstrndx

    (defvar phdr #(1 0 0 0 ;; p_type
                   0 0 0 0 ;; p_flags
                   0 0 0 0 0 0 0 0 ;; p_offset = 0
                   0 0 0 0 0 0 0 0 ;; p_vaddr = ENTRY_LOCATION
                   0 0 0 0 0 0 0 0 ;; p_paddr = ENTRY_LOCATION
                   0 0 0 0 0 0 0 0 ;; p_filesz
                   0 0 0 0 0 0 0 0 ;; p_memsz
                   0 16 0 0 0 0 0 0)) ;; p_align

    (add x20 x0 x10)
    (add x21 x0 x11)
    (add x22 x0 x12)
    (add x23 x0 x13)
    (add x24 x0 x14)
    (add x25 x0 x15)
    (add x26 x0 x16)
    (add x27 x0 x17)
    (add x28 x0 x18)

    ;; align
    (add x5 x0 x0)
    (sub x6 x23 x22)
    ;; -0x200000
    (lui x7 -512)
    (add x6 x6 x7)
    (blt x6 x0 check-data-len)
    (addi x5 x0 1)
    (defcon check-code-str "Code has exceeded 2MB limit.\n")
    ;; write(STDOUT, _, _)
    (addi x10 x0 STDOUT)
    (la x11 check-code-str)
    (addi x12 x0 (len check-code-str))
    (addi x17 x0 SYS_WRITE)
    (ecall)

    check-data-len
    (sub x6 x25 x24)
    ;; -0x200000
    (lui x7 -512)
    (add x6 x6 x7)
    (blt x6 x0 after-check)
    (addi x5 x0 1)
    (defcon check-data-str "Variable data (`defvar`) has exceeded 2MB limit.\n")
    ;; write(STDOUT, _, _)
    (addi x10 x0 STDOUT)
    (la x11 check-data-str)
    (addi x12 x0 (len check-data-str))
    (addi x17 x0 SYS_WRITE)
    (ecall)

    after-check
        (beq x5 x0 check-done)
        ;; exit(1)
        (addi x10 x0 1)
        (addi x17 x0 SYS_EXIT)
        (ecall)
    check-done

    (addi x5 x0 1)
    (sub x6 x23 x22)
    (beq x6 x0 check-phdr-rodata)
    (addi x5 x5 1)
    check-phdr-rodata
    (sub x6 x25 x24)
    (beq x6 x0 check-phdr-done)
    (addi x5 x5 1)
    check-phdr-done
    ;; program-offset
    (addi x6 x0 (len phdr))
    (mul x5 x5 x6)
    (addi x5 x5 (len ehdr))

    ;; ehdr
    (la x11 ehdr)
    (lui x6 ENTRY_LOCATION)
    (add x6 x6 x5)
    (sd (+ x11 24) x6)
    (addi x6 x0 1)
    (sub x7 x23 x22)
    (beq x7 x0 ehdr-rodata)
    (addi x6 x6 1)
    ehdr-rodata
    (sub x7 x25 x24)
    (beq x7 x0 ehdr-write)
    (addi x6 x6 1)
    ehdr-write
    (sh (+ x11 56) x6)
    ;; write(fd, msg, len)
    (add x10 x0 x28)
    (addi x12 x0 (len ehdr))
    (addi x17 x0 SYS_WRITE)
    (ecall)

    (andi x6 x21 7)
    (beq x6 x0 text-phdr)
    (sw x21 x0)
    (addi x21 x21 4)

    text-phdr
    ;;data_offset
    (sub x6 x21 x20)
    (add x5 x6 x5)

    ;; text phdr
    (la x11 phdr)
    ;; p_flags
    (addi x7 x0 5)
    (sw (+ x11 4) x7)
    ;; p_vaddr
    (lui x7 ENTRY_LOCATION)
    (sw (+ x11 16) x7)
    ;; p_paddr
    (sw (+ x11 24) x7)
    ;; p_filesz
    (sw (+ x11 32) x5)
    ;; p_memsz
    (sw (+ x11 40) x5)
    ;; write(fd, msg, len)
    (add x10 x0 x28)
    (addi x12 x0 (len phdr))
    (addi x17 x0 SYS_WRITE)
    (ecall)

    data-align
        (andi x31 x23 7)
        (beq x31 x0 data-phdr)
        (sb x23 x0)
        (addi x23 x23 1)
        (jal x0 data-align)

    data-phdr
    ;; data.len
    (sub x6 x23 x22)
    (beq x6 x0 rodata-phdr)
    ;; data phdr
    (la x11 phdr)
    ;; p_flags
    (addi x7 x0 6)
    (sw (+ x11 4) x7)
    ;; p_offset
    (sw (+ x11 8) x5)
    ;; p_vaddr
    (lui x7 DATA_LOCATION)
    (add x7 x7 x5)
    (sw (+ x11 16) x7)
    ;; p_paddr
    (sw (+ x11 24) x7)
    ;; p_filesz
    (sw (+ x11 32) x6)
    ;; p_memsz
    (sw (+ x11 40) x6)
    ;; write(fd, msg, len)
    (add x10 x0 x28)
    (addi x12 x0 (len phdr))
    (addi x17 x0 SYS_WRITE)
    (ecall)

    rodata-phdr
    ;; rodata_offset
    (add x6 x6 x5)
    ;; rodata.len
    (sub x7 x25 x24)
    (beq x7 x0 after-phdr)

    ;; rodata phdr
    (la x11 phdr)
    ;; p_flags
    (addi x31 x0 4)
    (sw (+ x11 4) x31)
    ;; p_offset
    (sw (+ x11 8) x6)
    ;; p_vaddr
    (lui x31 RODATA_LOCATION)
    (add x31 x31 x6)
    (sw (+ x11 16) x31)
    ;; p_paddr
    (sw (+ x11 24) x31)
    ;; p_filesz
    (sw (+ x11 32) x7)
    ;; p_memsz
    (sw (+ x11 40) x7)
    ;; write(fd, msg, len)
    (add x10 x0 x28)
    (addi x12 x0 (len phdr))
    (addi x17 x0 SYS_WRITE)
    (ecall)

    after-phdr
    ;; data_pos
    (lui x7 DATA_LOCATION)
    (add x5 x5 x7)
    ;; rodata_pos
    (lui x7 RODATA_LOCATION)
    (add x6 x6 x7)
    (add x29 x0 x20)

    (beq x26 x27 rewrite-done)
    rewrite
        (ld x31 (+ x26 8))
        (andi x30 x31 1)
        (srai x31 x31 1)
        (beq x30 x0 rewrite-data)
        ;; offset
        (add x7 x31 x6)
        (jal x0 rewrite-imm)
    rewrite-data
        ;; offset
        (add x7 x31 x5)
    rewrite-imm
        ;; imm20
        (addi x29 x0 1)
        (slli x29 x29 11)
        (add x29 x29 x7)
        (srai x29 x29 12)
        (slli x29 x29 12)
        ;; lui
        (ld x31 x26)
        (add x31 x31 x20)
        (lw x30 x31)
        (or x30 x30 x29)
        (sw x31 x30)
        ;; addi
        ;; imm12
        (addi x30 x0 255)
        (slli x30 x30 4)
        (addi x30 x30 15)
        (and x7 x7 x30)
        (slli x7 x7 20)
        (lw x30 (+ x31 4))
        (or x30 x30 x7)
        (sw (+ x31 4) x30)

        (addi x26 x26 16)
        (bne x26 x27 rewrite)
    rewrite-done

    ;; program
    (add x10 x0 x28)
    (add x11 x0 x20)
    (sub x12 x21 x20)
    (addi x17 x0 SYS_WRITE)
    (ecall)
    ;; data
    (add x10 x0 x28)
    (add x11 x0 x22)
    (sub x12 x23 x22)
    (addi x17 x0 SYS_WRITE)
    (ecall)
    ;; rodata
    (add x10 x0 x28)
    (add x11 x0 x24)
    (sub x12 x25 x24)
    (addi x17 x0 SYS_WRITE)
    (ecall)

    (jalr x0 x1)
)
