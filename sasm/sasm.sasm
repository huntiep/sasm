;; enum Token {
;;     LeftParen,
;;     RightParen,
;;     Symbol(u64),
;;     Integer(i32),
;;     Char(char),
;;     String(startptr, length),
;;     Pound,
;; }
;(define Token::LeftParen 0)
;(define Token::RightParen 1)
;(define Token::Symbol 2)
;(define Token::Integer 3)
;(define Token::Char 4)
;(define Token::String 5)
;(define Token::Pound 6)
(define Token::LeftParen #'(')
(define Token::RightParen #')')
(define Token::Symbol #'s')
(define Token::Integer #'i')
(define Token::Char #'c')
(define Token::String #'t')
(define Token::Pound #'#')

(include! "sasm-strings.sasm")
(include! "syscalls.sasm")

start
    ;; Init malloc
    (jal x1 malloc-init)
    ;;(include! "test-malloc.sasm")
    ;;(include! "test-symbol-table.sasm")
    (jal x1 symbol-table-init)

    ;; Check that argc == 2
    (lw x10 x2)
    (addi x11 x0 2)
    (blt x10 x11 error-argc)

    ;; Open input file
    ;; argv[1]
    (ld x11 (+ x2 16))
    (jal x1 read-file)

    ;; Tokenize(input, input.len) -> (tokens, tokens.len)
    (jal x1 tokenize)

    ;(include! "test-tokenizer.sasm")

    (jal x1 assemble)

;    (addi x10 x0 STDOUT)
;    (add x11 x0 x12)
;    (sub x12 x13 x12)
;    (addi x17 x0 SYS_WRITE)
;    (ecall)
;
;    (add x10 x0 x0)
;    (addi x17 x0 SYS_EXIT)
;    (ecall)

    (ld x6 x2)
    (subi x6 x6 3)
    (bne x6 x0 load-default-output-name)
    (ld x6 (+ x2 24))

    (subi x2 x2 48)
    (sd x2 x10)
    (sd (+ x2 8) x11)
    (sd (+ x2 16) x12)
    (sd (+ x2 24) x13)
    (sd (+ x2 32) x14)
    (sd (+ x2 40) x15)

    open-output-name
    ;; openat(AT_FDCWD, output-name, O_WRONLY|O_CREAT|O_TRUNC, 0o777)
    (addi x10 x0 -100)
    (add x11 x0 x6)
    (addi x12 x0 577)
    (addi x13 x0 511)
    (addi x17 x0 SYS_OPENAT)
    (ecall)
    (blt x10 x0 error-open)
    (add x16 x0 x10)

    (ld x10 x2)
    (ld x11 (+ x2 8))
    (ld x12 (+ x2 16))
    (ld x13 (+ x2 24))
    (ld x14 (+ x2 32))
    (ld x15 (+ x2 40))
    (addi x2 x2 40)
    (sd x2 x16)

    (jal x1 elf)

    ;; close(fd)
    (ld x10 x2)
    (addi x2 x2 8)
    (addi x17 x0 SYS_CLOSE)
    (ecall)

    ;; exit(0)
    (add x10 x0 x0)
    (addi x17 x0 SYS_EXIT)
    (ecall)

    load-default-output-name
        (define default-output-name "bin.elf\0")
        (la x6 default-output-name)
        (jal x0 open-output-name)

    error-argc
        (addi x10 x0 1)
        (addi x17 x0 SYS_EXIT)
        (ecall)

(include! "symbol-table.sasm")
(include! "malloc.sasm")

;; Args:
;;  x11 - filename
;;
;; Ret:
;;  x10 - input: String
;;  x11 - input.len : pointer to end of input
read-file
    ;; openat(AT_FDCWD, input-name, O_RDONLY, 0)
    (addi x10 x0 AT_FDCWD)
    (add x12 x0 x0)
    (add x13 x0 x0)
    (addi x17 x0 SYS_OPENAT)
    (ecall)
    (blt x10 x0 error-open)

    (add x30 x0 x10)
    ;; lseek(fd, 0, SEEK_END)
    (add x11 x0 x0)
    (addi x12 x0 SEEK_END)
    (addi x17 x0 SYS_LSEEK)
    (ecall)
    (add x31 x0 x10)
    ;; lseek(fd, 0, SEEK_SET)
    (add x10 x0 x30)
    (add x11 x0 x0)
    (addi x12 x0 SEEK_SET)
    (addi x17 x0 SYS_LSEEK)
    (ecall)

    ;; Read input file to buffer
    ;; mmap(NULL, 64k, PROT_RW, MAP_PRIVATE, fd, 0)
    (add x14 x0 x30)
    (add x10 x0 x0)
    (addi x11 x0 1)
    (slli x11 x11 16)
    (addi x12 x0 PROT_RW)
    (addi x13 x0 MAP_PRIVATE)
    (add x15 x0 x0)
    (addi x17 x0 SYS_MMAP)
    (ecall)
    (blt x10 x0 error-read-input)
    (beq x10 x0 error-read-input)

    (add x30 x0 x10)

    ;; close(fd)
    (add x10 x0 x14)
    (addi x17 x0 57)
    (ecall)

    (add x10 x0 x30)
    (add x11 x30 x31)

    (jalr x0 x1)
    error-open
        (addi x10 x0 2)
        (addi x17 x0 SYS_EXIT)
        (ecall)
    error-read-input
        (addi x10 x0 3)
        (addi x17 x0 SYS_EXIT)
        (ecall)

;; Args:
;;  x10 - input: String
;;  x11 - len: input.len : pointer to end of input
;; Locals:
;;  x20 - tokens: ArrayBuf<(Token, len, start)>
;;  x21 - capacity: tokens.capacity : pointer to end of tokens capacity
;;  x30 - Current token type
;;  x31 - Start of current token
;;
;; Ret:
;;  x10 - tokens: ArrayBuf<(Token, len, start)>
;;  x11 - len: tokens.len
tokenize
    (subi x2 x2 32)
    (sd (+ x2 8) x10)
    (sd (+ x2 16) x11)
    (sd (+ x2 24) x1)

    ;; allocate tokens arraybuf
    (addi x10 x0 16)
    (jal x1 malloc)
    (add x20 x0 x10)

    (ld x10 (+ x2 8))
    (ld x11 (+ x2 16))

    (addi x2 x2 16)
    (sd x2 x20)
    (addi x21 x20 16)

    tokenize-loop
        (beq x10 x11 tokenize-after-loop)
        (lb x28 x10)
        (add x31 x10 x0)
        (addi x10 x10 1)

        (subi x29 x28 #'(')
        (addi x30 x0 Token::LeftParen)
        (beq x29 x0 tokenize-loop-push-token)

        (subi x29 x28 #')')
        (addi x30 x0 Token::RightParen)
        (beq x29 x0 tokenize-loop-push-token)

        (subi x29 x28 #'"')
        (beq x29 x0 tokenize-string)

        (subi x29 x28 #'#')
        (beq x29 x0 tokenize-literal)

        (subi x29 x28 #';')
        (beq x29 x0 tokenize-comment)

        ;; Skip whitespace
        (subi x29 x28 #' ')
        (beq x29 x0 tokenize-loop)
        (subi x29 x28 #'\t')
        (beq x29 x0 tokenize-loop)
        (subi x29 x28 #'\r')
        (beq x29 x0 tokenize-loop)
        (subi x29 x28 #'\n')
        (beq x29 x0 tokenize-loop)

        ;; Ambiguous, could be a symbol or an integer
        (subi x29 x28 #'0')
        (addi x6 x0 11)
        (bltu x29 x6 tokenize-ambiguous)
        (subi x29 x28 #'+')
        (beq x29 x0 tokenize-ambiguous)
        (subi x29 x28 #'-')
        (beq x29 x0 tokenize-ambiguous)

        (jal x0 tokenize-identifier)

        tokenize-loop-push-token
            (beq x20 x21 tokenize-loop-alloc)
            tokenize-loop-after-alloc
            (sb x20 x30)
            (sd (+ x20 8) x31)
            (sub x31 x10 x31)
            (sw (+ x20 4) x31)
            (addi x20 x20 16)
            (jal x0 tokenize-loop)

            tokenize-loop-alloc
                ;; Double tokens capacity
                (subi x2 x2 40)
                (sd x2 x10)
                (sd (+ x2 8) x11)
                (sd (+ x2 16) x30)
                (sd (+ x2 24) x31)

                (ld x10 (+ x2 40))
                (sub x11 x21 x10)
                (sd (+ x2 32) x11)
                (slli x11 x11 1)

                (jal x1 realloc)
                (sd (+ x2 40) x10)

                (ld x6 (+ x2 32))
                (add x20 x10 x6)
                (slli x6 x6 1)
                (add x21 x10 x6)

                (ld x10 x2)
                (ld x11 (+ x2 8))
                (ld x30 (+ x2 16))
                (ld x31 (+ x2 24))
                (addi x2 x2 40)

                (jal x0 tokenize-loop-after-alloc)

    tokenize-after-loop
        (ld x10 x2)
        (add x11 x0 x20)
        (ld x1 (+ x2 8))
        (addi x2 x2 16)
        (jalr x0 x1)

    tokenize-string
        (addi x30 x0 Token::String)
    tokenize-string-loop
        (beq x10 x11 tokenize-string-error)
        (lb x28 x10)
        (addi x10 x10 1)

        (subi x29 x28 #'\\')
        (beq x29 x0 tokenize-string-escape)
        (subi x29 x28 #'"')
        (bne x29 x0 tokenize-string-loop)
    tokenize-string-done
        (jal x0 tokenize-loop-push-token)
    tokenize-string-escape
        (beq x10 x11 tokenize-string-error)
        (lb x28 x10)
        (addi x10 x10 1)

        (subi x29 x28 #'r')
        (beq x29 x0 tokenize-string-loop)
        (subi x29 x28 #'n')
        (beq x29 x0 tokenize-string-loop)
        (subi x29 x28 #'t')
        (beq x29 x0 tokenize-string-loop)
        (subi x29 x28 #'0')
        (beq x29 x0 tokenize-string-loop)
        (subi x29 x28 #'\\')
        (beq x29 x0 tokenize-string-loop)
        (subi x29 x28 #'"')
        (beq x29 x0 tokenize-string-loop)
    tokenize-string-error
        (addi x10 x0 20)
        (addi x17 x0 SYS_EXIT)
        (ecall)

    tokenize-literal
        (beq x10 x11 tokenize-literal-error)
        (lb x28 x10)
        (addi x30 x0 Token::Pound)
        (subi x28 x28 #'\'')
        (bne x28 x0 tokenize-loop-push-token)
        (addi x10 x10 1)

        (beq x10 x11 tokenize-literal-error)
        (lb x31 x10)
        (addi x10 x10 1)
        (subi x29 x31 #'\'')
        (beq x29 x0 tokenize-literal-error)
        (subi x29 x31 #'\\')
        (bne x29 x0 tokenize-literal-close)

        (beq x10 x11 tokenize-literal-error)
        (lb x28 x10)
        (addi x10 x10 1)
        (addi x31 x0 #'\\')
        (beq x28 x31 tokenize-literal-close)
        (addi x31 x0 #'\'')
        (beq x28 x31 tokenize-literal-close)
        (subi x29 x28 #'r')
        (addi x31 x0 #'\r')
        (beq x29 x0 tokenize-literal-close)
        (subi x29 x28 #'n')
        (addi x31 x0 #'\n')
        (beq x29 x0 tokenize-literal-close)
        (subi x29 x28 #'t')
        (addi x31 x0 #'\t')
        (beq x29 x0 tokenize-literal-close)
        (subi x29 x28 #'0')
        (addi x31 x0 #'\0')
        (beq x29 x0 tokenize-literal-close)

        (jal x0 tokenize-literal-error)
    tokenize-literal-close
        (beq x10 x11 tokenize-literal-error)
        (lb x28 x10)
        (addi x10 x10 1)
        (subi x28 x28 #'\'')
        (bne x28 x0 tokenize-literal-error)
        (addi x30 x0 Token::Char)
        (jal x0 tokenize-loop-push-token)
    tokenize-literal-error
        (addi x10 x0 21)
        (addi x17 x0 SYS_EXIT)
        (ecall)

    tokenize-ambiguous
        (beq x10 x11 distinguish-ambiguous)

        (lb x28 x10)
        (addi x10 x10 1)

        ;; Still ambiguous
        (subi x29 x28 #'0')
        (addi x6 x0 11)
        (bltu x29 x6 tokenize-ambiguous)
        (subi x29 x28 #'+')
        (beq x29 x0 tokenize-ambiguous)
        (subi x29 x28 #'-')
        (beq x29 x0 tokenize-ambiguous)


        ;; Delimiter
        (subi x29 x28 #')')
        (beq x29 x0 distinguish-ambiguous)
        (subi x29 x28 #'(')
        (beq x29 x0 distinguish-ambiguous)
        (subi x29 x28 #'#')
        (beq x29 x0 distinguish-ambiguous)
        (subi x29 x28 #';')
        (beq x29 x0 distinguish-ambiguous)
        (subi x29 x28 #'"')
        (beq x29 x0 distinguish-ambiguous)
        (subi x29 x28 #' ')
        (beq x29 x0 distinguish-ambiguous)
        (subi x29 x28 #'\t')
        (beq x29 x0 distinguish-ambiguous)
        (subi x29 x28 #'\r')
        (beq x29 x0 distinguish-ambiguous)
        (subi x29 x28 #'\n')
        (beq x29 x0 distinguish-ambiguous)

        (jal x0 tokenize-identifier)

    distinguish-ambiguous
        (subi x10 x10 1)
        (add x28 x0 x31)
    distinguish-ambiguous-intp
        (lb x6 x28)
        (subi x7 x6 #'+')
        (beq x7 x0 distinguish-ambiguous-intp-skip-sign)
        (subi x7 x6 #'-')
        (bne x7 x0 distinguish-ambiguous-intp-loop)
        distinguish-ambiguous-intp-skip-sign
            (addi x28 x28 1)
            ;; Needed in case the ambiguous input is just a sign.
            (beq x28 x10 distinguish-ambiguous-symbol)

        distinguish-ambiguous-intp-loop
            (lb x6 x28)
            (addi x28 x28 1)
            (subi x7 x6 #':')
            (bge x7 x0 distinguish-ambiguous-symbol)
            (subi x6 x6 #'0')
            (blt x6 x0 distinguish-ambiguous-symbol)
            (bne x28 x10 distinguish-ambiguous-intp-loop)
        distinguish-ambiguous-int
            (add x6 x0 x31)
            (add x28 x0 x0)
            (addi x29 x0 10)
            (addi x31 x0 1)
            distinguish-ambiguous-int-convert
                (lb x27 x6)
                (addi x6 x6 1)
                (subi x7 x27 #'+')
                (beq x7 x0 distinguish-ambiguous-int-convert)
                (subi x7 x27 #'-')
                (beq x7 x0 distinguish-ambiguous-int-convert-negate)
                (mul x28 x28 x29)
                (subi x27 x27 #'0')
                (add x28 x28 x27)
                (bne x6 x10 distinguish-ambiguous-int-convert)
                (jal x0 distinguish-ambiguous-int-convert-after)
            distinguish-ambiguous-int-convert-negate
                (subi x31 x0 1)
                (jal x0 distinguish-ambiguous-int-convert)
            distinguish-ambiguous-int-convert-after
            (mul x31 x31 x28)
            (addi x30 x0 Token::Integer)
            (jal x0 tokenize-loop-push-token)
        distinguish-ambiguous-symbol
            (subi x2 x2 32)
            (sd x2 x10)
            (sd (+ x2 8) x11)
            (sd (+ x2 16) x20)
            (sd (+ x2 24) x21)

            (sub x11 x10 x31)
            (add x10 x0 x31)
            (jal x1 symbol-table::string->symbol)
            (add x31 x0 x10)

            (ld x10 x2)
            (ld x11 (+ x2 8))
            (ld x20 (+ x2 16))
            (ld x21 (+ x2 24))
            (addi x2 x2 32)

            (addi x30 x0 Token::Symbol)
            (jal x0 tokenize-loop-push-token)

    tokenize-identifier
        (addi x30 x0 Token::Symbol)
        tokenize-identifier-loop
            (beq x10 x11 distinguish-ambiguous-symbol)

            (lb x28 x10)
            (addi x10 x10 1)

            ;; delimiters
            (subi x29 x28 #'\r')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #'\n')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #'\t')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #' ')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #'#')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #'"')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #'(')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #')')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #';')
            (beq x29 x0 tokenize-identifier-after-loop)

            (jal x0 tokenize-identifier-loop)
        tokenize-identifier-after-loop
            (subi x10 x10 1)
            (jal x0 distinguish-ambiguous-symbol)

    tokenize-comment
    (addi x29 x0 #'\n')
    tokenize-comment-loop
        (beq x10 x11 tokenize-after-loop)

        (lb x28 x10)
        (addi x10 x10 1)
        (beq x28 x29 tokenize-loop)
        (jal x0 tokenize-comment-loop)

;; Args:
;;  x10 - tokens: ArrayBuf<(Token, len, start)>
;;  x11 - len: tokens.len : pointer to end of tokens
;; Locals:
;;  x20  - struct {
;;  +0   - program-ptr: ArrayBuf<u32>
;;  +8   - program-start
;;  +16  - data-ptr: ArrayBuf<u8>
;;  +24  - data-start
;;  +32  - rewrite-ptr: ArrayBuf<(program-ptr[i], data-offset)>
;;  +40  - rewrite-start
;;  +48  - labels-ptr: ArrayBuf<(Symbol, usize)>
;;  +56  - labels-start
;;  +64  - constants-ptr: ArrayBuf<(Symbol, u32, u32-padding)>
;;  +72  - constants-start
;;  +80  - globals-ptr: ArrayBuf<(Symbol, data-offset, len)>
;;  +88  - globals-start
;;  +96  - jumps-ptr: ArrayBuf<(Symbol, instruction-offset)> :: instruction-offset is (<< 1) and
;;         lsb is set if branch instruction, 0 if jump
;;  +104 - jumps-start
;;  +112  - include!-stack-ptr: ArrayBuf<(*tokens, *tokens.len)>
;;  +120 - include!-stack-start
;;  128  - }
;; Ret:
;;  x10 - program : ArrayBuf<u32>
;;  x11 - program-end-ptr
;;  x12 - data : ArrayBuf<u8>
;;  x13 - data-end-ptr
;;  x14 - rewrites : ArrayBuf<(program-ptr[i], data-offset)>
;;  x15 - rewrites-end-ptr
assemble
    (subi x2 x2 24)
    (sd x2 x10)
    (sd (+ x2 8) x11)
    (sd (+ x2 16) x1)

    ;; Allocate assembler struct
    (addi x10 x0 128)
    (jal x1 malloc)
    (beq x10 x0 assemble-error)
    (add x20 x0 x10)

    ;; allocate 64k for code
    (addi x10 x0 1)
    (slli x10 x10 16)
    (jal x1 malloc)
    (beq x10 x0 assemble-error)
    (sd x20 x10)
    (sd (+ x20 8) x10)
    ;; allocate 4k for data
    (addi x10 x0 1)
    (slli x10 x10 12)
    (jal x1 malloc)
    (beq x10 x0 assemble-error)
    (sd (+ x20 16) x10)
    (sd (+ x20 24) x10)
    ;; allocate 4k for rewrite
    (addi x10 x0 1)
    (slli x10 x10 12)
    (jal x1 malloc)
    (beq x10 x0 assemble-error)
    (sd (+ x20 32) x10)
    (sd (+ x20 40) x10)
    ;; allocate 4k for labels
    (addi x10 x0 1)
    (slli x10 x10 12)
    (jal x1 malloc)
    (beq x10 x0 assemble-error)
    (sd (+ x20 48) x10)
    (sd (+ x20 56) x10)
    ;; allocate 4k for constants
    (addi x10 x0 1)
    (slli x10 x10 12)
    (jal x1 malloc)
    (beq x10 x0 assemble-error)
    (sd (+ x20 64) x10)
    (sd (+ x20 72) x10)
    ;; allocate 4k for globals
    (addi x10 x0 1)
    (slli x10 x10 12)
    (jal x1 malloc)
    (beq x10 x0 assemble-error)
    (sd (+ x20 80) x10)
    (sd (+ x20 88) x10)
    ;; allocate 4k for jumps
    (addi x10 x0 1)
    (slli x10 x10 12)
    (jal x1 malloc)
    (beq x10 x0 assemble-error)
    (sd (+ x20 96) x10)
    (sd (+ x20 104) x10)
    ;; allocate 4k for include!-stack
    (addi x10 x0 1)
    (slli x10 x10 12)
    (jal x1 malloc)
    (beq x10 x0 assemble-error)
    (sd (+ x20 112) x10)
    (sd (+ x20 120) x10)

    (ld x10 x2)
    (ld x11 (+ x2 8))
    (addi x2 x2 16)

    assemble-loop
        (beq x11 x10 assemble-after-loop)

        (lb x28 x10)
        (addi x10 x10 16)

        (subi x29 x28 Token::Symbol)
        (beq x29 x0 assemble-add-label)
        (subi x29 x28 Token::LeftParen)
        (bne x29 x0 assemble-error)

        (beq x11 x10 assemble-error)
        (lb x28 x10)
        (subi x29 x28 Token::Symbol)
        (bne x29 x0 assemble-error)
        (ld x28 (+ x10 8))
        (addi x10 x10 16)

        (addi x6 x0 Instr::include!)
        (beq x28 x6 assemble-handle-include)
        (addi x6 x0 Instr::define)
        (bne x28 x6 assemble-handle-opcode)
    assemble-handle-define
        (beq x11 x10 assemble-error)
        (lb x28 x10)
        (subi x29 x28 Token::Symbol)
        (bne x29 x0 assemble-error)
        (ld x28 (+ x10 8))
        (addi x10 x10 16)

        (beq x11 x10 assemble-error)
        (lb x6 x10)
        (ld x30 (+ x10 8))
        (lw x31 (+ x10 4))
        (addi x10 x10 16)
        (subi x7 x6 Token::Integer)
        (beq x7 x0 assemble-handle-define-int)
        (subi x7 x6 Token::Char)
        (beq x7 x0 assemble-handle-define-char)
        (subi x7 x6 Token::Pound)
        (beq x7 x0 assemble-handle-define-vec)
        (subi x7 x6 Token::String)
        (bne x7 x0 assemble-error)

        assemble-handle-define-string
            (subi x31 x31 2)
            (beq x31 x0 assemble-error)
            ;; add to globals
            (ld x24 (+ x20 80))
            (ld x23 (+ x20 16))

            (sw x24 x28)
            (sd (+ x24 8) x23)

            (addi x30 x30 1)
            (add x31 x31 x30)
            (add x28 x0 x0)

            assemble-handle-define-string-loop
                (lb x6 x30)
                (addi x30 x30 1)
                (addi x28 x28 1)
                (subi x7 x6 #'\\')
                (beq x7 x0 assemble-handle-define-string-loop-escape)
                assemble-handle-define-string-loop-escape-after
                (sb x23 x6)
                (addi x23 x23 1)
                (bne x30 x31 assemble-handle-define-string-loop)
            assemble-handle-define-string-loop-after
                (sd (+ x24 16) x28)
                (addi x24 x24 24)
                (sd (+ x20 80) x24)
                (andi x6 x23 7)
                (addi x7 x0 8)
                (sub x7 x7 x6)
                (bne x6 x0 assemble-handle-define-align)
                (sd (+ x20 16) x23)
                (jal x0 assemble-handle-define-after)
            assemble-handle-define-align
                (sb x23 x0)
                (addi x23 x23 1)
                (subi x7 x7 1)
                (bne x7 x0 assemble-handle-define-align)
                (sd (+ x20 16) x23)
                (jal x0 assemble-handle-define-after)
            assemble-handle-define-string-loop-escape
                (beq x30 x31 assemble-error)
                (lb x5 x30)
                (addi x30 x30 1)
                (subi x7 x5 #'\\')
                (addi x6 x0 #'\\')
                (beq x7 x0 assemble-handle-define-string-loop-escape-after)
                (subi x7 x5 #'"')
                (addi x6 x0 #'"')
                (beq x7 x0 assemble-handle-define-string-loop-escape-after)
                (subi x7 x5 #'r')
                (addi x6 x0 #'\r')
                (beq x7 x0 assemble-handle-define-string-loop-escape-after)
                (subi x7 x5 #'n')
                (addi x6 x0 #'\n')
                (beq x7 x0 assemble-handle-define-string-loop-escape-after)
                (subi x7 x5 #'t')
                (addi x6 x0 #'\t')
                (beq x7 x0 assemble-handle-define-string-loop-escape-after)
                (subi x7 x5 #'0')
                (addi x6 x0 #'\0')
                (beq x7 x0 assemble-handle-define-string-loop-escape-after)
                (jal x0 assemble-error)

        assemble-handle-define-vec
            (beq x11 x10 assemble-error)
            (lb x6 x10)
            (addi x10 x10 16)
            (subi x6 x6 Token::LeftParen)
            (bne x6 x0 assemble-error)

            ;; add to globals
            (ld x24 (+ x20 80))
            (ld x23 (+ x20 16))
            (sw x24 x28)
            (sd (+ x24 8) x23)

            (add x28 x0 x0)

            assemble-handle-define-vec-loop
                (beq x11 x10 assemble-error)
                (lb x6 x10)
                (ld x7 (+ x10 8))
                (addi x10 x10 16)
                (subi x5 x6 Token::RightParen)
                (beq x5 x0 assemble-handle-define-vec-loop-after)
                (subi x5 x6 Token::Integer)
                (bne x5 x0 assemble-error)

                (addi x28 x28 1)
                (sb x23 x7)
                (addi x23 x23 1)

                (jal x0 assemble-handle-define-vec-loop)
            assemble-handle-define-vec-loop-after
            (beq x28 x0 assemble-error)
            (sd (+ x24 16) x28)
            (addi x24 x24 24)
            (sd (+ x20 80) x24)

            (andi x6 x23 7)
            (addi x7 x0 8)
            (sub x7 x7 x6)
            (bne x6 x0 assemble-handle-define-align)
            (sd (+ x20 16) x23)
            (jal x0 assemble-handle-define-after)

        assemble-handle-define-int
        assemble-handle-define-char
            (ld x22 (+ x20 64))
            (sw x22 x28)
            (sw (+ x22 4) x30)
            (addi x22 x22 8)
            (sd (+ x20 64) x22)
        assemble-handle-define-after
            (beq x11 x10 assemble-error)
            (lb x28 x10)
            (subi x28 x28 Token::RightParen)
            (addi x10 x10 16)
            (bne x28 x0 assemble-error)
            (jal x0 assemble-loop)
    assemble-handle-include
        (beq x10 x11 assemble-error)
        (lb x6 x10)
        (subi x6 x6 Token::String)
        (bne x6 x0 assemble-error)
        (addi x10 x10 16)
        (lb x6 x10)
        (subi x6 x6 Token::RightParen)
        (bne x6 x0 assemble-error)
        (ld x6 (- x10 8))
        (lw x7 (- x10 12))
        (addi x10 x10 16)

        (subi x2 x2 8)
        (sd x2 x20)
        (ld x25 (+ x20 112))
        (sd x25 x10)
        (sd (+ x25 8) x11)
        (addi x25 x25 16)
        (sd (+ x20 112) x25)

        (addi x6 x6 1)
        (subi x7 x7 2)
        (add x11 x0 x6)
        (add x7 x6 x7)
        (sb x7 x0)

        (jal x1 read-file)
        (jal x1 tokenize)

        (ld x20 x2)
        (addi x2 x2 8)
        (jal x0 assemble-loop)

    assemble-add-label
        (ld x28 (- x10 8))
        (ld x23 (+ x20 48))
        (sd x23 x28)
        (ld x6 (+ x20 8))
        (ld x21 x20)
        (sub x6 x21 x6)
        (sd (+ 8 x23) x6)
        (addi x23 x23 16)
        (sd (+ x20 48) x23)
        (jal x0 assemble-loop)

    assemble-handle-opcode
        (ld x6 (- x10 8))
        ;; R instructions
        (subi x7 x6 Instr::rem)
        (subi x7 x7 1)
        (blt x7 x0 assemble-r)

        ;; I instructions
        (subi x7 x6 Instr::sltiu)
        (subi x7 x7 1)
        (blt x7 x0 assemble-i)

        ;; I2 instructions
        (subi x7 x6 Instr::lwu)
        (subi x7 x7 1)
        (blt x7 x0 assemble-i2)
        (subi x7 x6 Instr::la)
        (beq x7 x0 assemble-la)

        ;; S instructions
        (subi x7 x6 Instr::sd)
        (subi x7 x7 1)
        (blt x7 x0 assemble-s)

        ;; B instructions
        (subi x7 x6 Instr::bgeu)
        (subi x7 x7 1)
        (blt x7 x0 assemble-b)

        ;; Other instructions
        (subi x7 x6 Instr::jal)
        (beq x7 x0 assemble-jal)

        (subi x7 x6 Instr::jalr)
        (beq x7 x0 assemble-jalr)

        (subi x7 x6 Instr::lui)
        (beq x7 x0 assemble-lui)

        (subi x7 x6 Instr::auipc)
        (beq x7 x0 assemble-auipc)

        (subi x7 x6 Instr::ecall)
        (beq x7 x0 assemble-ecall)

        (subi x7 x6 Instr::ebreak)
        (beq x7 x0 assemble-ebreak)

    (define funct3-table #(0 0 4 6 7 1 5 5 2 3 0 4 6    ;; r
                           0 0 4 6 7 1 5 5 2 3          ;; i
                           0 1 2 3 4 5 6 0              ;; i2 - last item is gap for la
                           0 1 2 3                      ;; s
                           0 1 4 5 6 7))                ;; b
    assemble-r
        (addi x5 x0 51)
        ;; funct3
        (la x7 funct3-table)
        (add x7 x7 x6)
        (lb x7 (- x7 Instr::add))
        (slli x7 x7 12)
        (or x5 x5 x7)
        ;; funct7
        (subi x7 x6 Instr::sub)
        (beq x7 x0 assemble-r-funct7-sub)
        (subi x7 x6 Instr::sra)
        (beq x7 x0 assemble-r-funct7-sub)
        (subi x7 x6 Instr::mul)
        (beq x7 x0 assemble-r-funct7-mul)
        (subi x7 x6 Instr::div)
        (beq x7 x0 assemble-r-funct7-mul)
        (subi x7 x6 Instr::rem)
        (beq x7 x0 assemble-r-funct7-mul)
        (add x7 x0 x0)
        assemble-r-funct7-after
        (slli x7 x7 25)
        (or x5 x5 x7)
        ;; rd
        (jal x1 assemble-unwrap-register)
        (slli x6 x6 7)
        (or x5 x5 x6)
        ;; rs1
        (jal x1 assemble-unwrap-register)
        (slli x6 x6 15)
        (or x5 x5 x6)
        ;; rs2
        (jal x1 assemble-unwrap-register)
        (slli x6 x6 20)
        (or x5 x5 x6)
        (jal x0 assemble-after-opcode)

        assemble-r-funct7-sub
            (addi x7 x0 32)
            (jal x0 assemble-r-funct7-after)
        assemble-r-funct7-mul
            (addi x7 x0 1)
            (jal x0 assemble-r-funct7-after)

    assemble-i
        (add x31 x0 x6)

        (addi x5 x0 19)
        ;; funct3
        (la x7 funct3-table)
        (add x7 x7 x6)
        (lb x7 (- x7 Instr::add))
        (slli x7 x7 12)
        (or x5 x5 x7)
        ;; rd
        (jal x1 assemble-unwrap-register)
        (slli x6 x6 7)
        (or x5 x5 x6)
        ;; rs1
        (jal x1 assemble-unwrap-register)
        (slli x6 x6 15)
        (or x5 x5 x6)
        ;; imm
        (jal x1 assemble-unwrap-imm)

        (subi x7 x31 Instr::subi)
        (addi x30 x0 1)
        (bne x7 x0 assemble-i-subi)
        (subi x30 x0 1)
    assemble-i-subi
        (mul x6 x6 x30)

        (subi x7 x31 Instr::srai)
        (bne x7 x0 assemble-i-srai)
        (addi x7 x0 32)
        (slli x7 x7 5)
        (or x6 x6 x7)

    assemble-i-srai
        (slli x6 x6 20)
        (or x5 x5 x6)
        (jal x0 assemble-after-opcode)

    assemble-i2
        (addi x5 x0 3)
        ;; funct3
        (la x7 funct3-table)
        (add x7 x7 x6)
        (lb x7 (- x7 Instr::add))
        (slli x7 x7 12)
        (or x5 x5 x7)

        ;; rd
        (jal x1 assemble-unwrap-register)
        (slli x6 x6 7)
        (or x5 x5 x6)

        ;; (rs1, imm)
        (jal x1 assemble-unwrap-offset)
        (slli x6 x6 15)
        (or x5 x5 x6)
        (slli x6 x7 20)
        (or x5 x5 x6)
        (jal x0 assemble-after-opcode)

    assemble-s
        (addi x5 x0 35)
        ;; funct3
        (la x7 funct3-table)
        (add x7 x7 x6)
        (lb x7 (- x7 Instr::add))
        (slli x7 x7 12)
        (or x5 x5 x7)

        ;; (rs1, imm)
        (jal x1 assemble-unwrap-offset)
        (slli x6 x6 15)
        (or x5 x5 x6)
        ;; (imm >> 5) << 25
        (srai x6 x7 5)
        (slli x6 x6 25)
        (or x5 x5 x6)
        ;; (imm & 0b11111) << 7
        (addi x6 x0 31)
        (and x6 x7 x6)
        (slli x6 x6 7)
        (or x5 x5 x6)

        ;; rd
        (jal x1 assemble-unwrap-register)
        (slli x6 x6 20)
        (or x5 x5 x6)
        (jal x0 assemble-after-opcode)

    assemble-b
        (addi x5 x0 99)

        ;; funct3
        (la x7 funct3-table)
        (add x7 x7 x6)
        (lb x7 (- x7 Instr::add))
        (slli x7 x7 12)
        (or x5 x5 x7)
        ;; rs1
        (jal x1 assemble-unwrap-register)
        (slli x6 x6 15)
        (or x5 x5 x6)
        ;; rs2
        (jal x1 assemble-unwrap-register)
        (slli x6 x6 20)
        (or x5 x5 x6)

        ;; label
        (addi x31 x0 1)
        (jal x1 assemble-unwrap-label)
        (beq x6 x0 assemble-after-opcode)

        ;; imm1
        (andi x7 x6 30)
        (srai x31 x6 11)
        (andi x31 x31 1)
        (or x7 x31 x7)
        (slli x7 x7 7)
        (or x5 x7 x5)

        ;; imm2
        (srai x7 x6 6)
        (andi x7 x7 64)
        (srai x6 x6 5)
        (andi x6 x6 63)
        (or x6 x6 x7)
        (slli x6 x6 25)
        (or x5 x6 x5)
        (jal x0 assemble-after-opcode)

    assemble-la
        ;; rd
        (jal x1 assemble-unwrap-register)
        (beq x10 x11 assemble-error)
        (lb x7 x10)
        (subi x7 x7 Token::Symbol)
        (bne x7 x0 assemble-error)
        (ld x7 (+ x10 8))
        (addi x10 x10 16)
        (ld x21 (+ x20 88))
        (ld x22 (+ x20 80))
        assemble-la-global-loop
            (beq x21 x22 assemble-error)
            (ld x28 x21)
            (beq x28 x7 assemble-la-global-loop-after)
            (addi x21 x21 24)
            (jal x0 assemble-la-global-loop)
        assemble-la-global-loop-after
            (ld x7 (+ x21 8))
            (ld x21 (+ x20 32))
            (ld x22 x20)
            (sd x21 x22)
            (sd (+ x21 8) x7)
            (addi x21 x21 16)
            (sd (+ x20 32) x21)
            ;; lui
            (addi x5 x0 55)
            (slli x7 x6 7)
            (or x5 x5 x7)
            (ld x21 x20)
            (sw x21 x5)
            (addi x21 x21 4)
            (sd x20 x21)
            ;; addi
            (addi x5 x0 19)
            (or x5 x5 x7)
            (slli x7 x6 15)
            (or x5 x5 x7)
            (jal x0 assemble-after-opcode)

    assemble-jal
        (addi x5 x0 111)
        ;; rd
        (jal x1 assemble-unwrap-register)
        (slli x6 x6 7)
        (or x5 x5 x6)

        (add x31 x0 x0)
        (jal x1 assemble-unwrap-label)
        (beq x6 x0 assemble-after-opcode)

        ;; (imm & 0x10_00_00) >> 1
        (addi x29 x0 1)
        (slli x29 x29 20)
        (and x28 x6 x29)
        (srai x28 x28 1)

        ;;(imm >> 1) & 0x3ff) << 9
        (srai x29 x6 1)
        (andi x29 x29 1023)
        (slli x29 x29 9)
        (or x28 x28 x29)

        ;; ((imm >> 11) & 1) << 8
        (srai x29 x6 11)
        (andi x29 x29 1)
        (slli x29 x29 8)
        (or x28 x28 x29)

        ;; (imm >> 12) & 0xff
        (srai x29 x6 12)
        (andi x29 x29 255)
        (or x6 x28 x29)

        (slli x6 x6 12)
        (or x5 x5 x6)
        (jal x0 assemble-after-opcode)

    assemble-jalr
        (addi x5 x0 103)
        ;; rd
        (jal x1 assemble-unwrap-register)
        (slli x6 x6 7)
        (or x5 x5 x6)
        ;; (rs, imm)
        (jal x1 assemble-unwrap-offset)
        (slli x6 x6 15)
        (or x5 x5 x6)
        (slli x7 x7 20)
        (or x5 x5 x7)
        (jal x0 assemble-after-opcode)

    assemble-lui
        (addi x5 x0 55)
    assemble-lui-body
        ;; rd
        (jal x1 assemble-unwrap-register)
        (slli x6 x6 7)
        (or x5 x5 x6)
        ;; imm
        (jal x1 assemble-unwrap-imm)
        (slli x6 x6 12)
        (or x5 x5 x6)
        (jal x0 assemble-after-opcode)

    assemble-auipc
        (addi x5 x0 23)
        (jal x0 assemble-lui-body)

    assemble-ecall
        (addi x5 x0 115)
        (jal x0 assemble-after-opcode)

    assemble-ebreak
        (addi x5 x0 115)
        (addi x6 x0 1)
        (slli x6 x0 12)
        (or x5 x5 x6)
        (jal x0 assemble-after-opcode)

    assemble-after-opcode
        (ld x21 x20)
        (sw x21 x5)
        (addi x21 x21 4)
        (sd x20 x21)

        (beq x10 x11 assemble-error)
        (lb x6 x10)
        (subi x6 x6 Token::RightParen)
        (bne x6 x0 assemble-error)
        (addi x10 x10 16)
        (jal x0 assemble-loop)

    assemble-unwrap-label
        (beq x10 x11 assemble-error)
        (lb x6 x10)
        (subi x6 x6 Token::Symbol)
        (bne x6 x0 assemble-error)
        (ld x6 (+ x10 8))
        (addi x10 x10 16)
        (ld x28 (+ x20 56))
        (ld x29 (+ x20 48))
        assemble-unwrap-label-loop
            (beq x28 x29 assemble-unwrap-add-jump)
            (ld x30 x28)
            (beq x6 x30 assemble-unwrap-label-loop-after)
            (addi x28 x28 16)
            (jal x0 assemble-unwrap-label-loop)
        assemble-unwrap-add-jump
            (ld x28 (+ x20 96))
            (sd x28 x6)
            (ld x29 x20)
            (ld x30 (+ x20 8))
            (sub x29 x29 x30)
            (slli x29 x29 1)
            (or x29 x29 x31)
            (sd (+ x28 8) x29)
            (addi x28 x28 16)
            (sd (+ x20 96) x28)
            (add x6 x0 x0)
            (jalr x0 x1)
        assemble-unwrap-label-loop-after
            (ld x6 (+ x28 8))
            (ld x28 x20)
            (ld x29 (+ x20 8))
            (sub x28 x28 x29)
            (sub x6 x6 x28)
            ;; 0 upper 32 bits
            (slli x6 x6 32)
            (srai x6 x6 32)
            (jalr x0 x1)

    assemble-unwrap-register
        (beq x10 x11 assemble-error)
        (lb x6 x10)
        (subi x6 x6 Token::Symbol)
        (bne x6 x0 assemble-error)
        (ld x6 (+ x10 8))
        (addi x10 x10 16)
        (subi x6 x6 Register::x31)
        (subi x6 x6 1)
        (bge x6 x0 assemble-error)
        (addi x6 x6 Register::x31)
        (jalr x0 x1)

    assemble-unwrap-imm
        (beq x10 x11 assemble-error)
        (lb x6 x10)
        (addi x10 x10 16)
        (subi x7 x6 Token::LeftParen)
        (beq x7 x0 assemble-unwrap-imm-len)
        (subi x7 x6 Token::Symbol)
        (beq x7 x0 assemble-unwrap-imm-symbol)
        (subi x7 x6 Token::Char)
        (beq x7 x0 assemble-unwrap-imm-imm)
        (subi x7 x6 Token::Integer)
        (beq x7 x0 assemble-unwrap-imm-imm)
        (jal x0 assemble-error)

        assemble-unwrap-imm-imm
            (ld x6 (- x10 8))
            (jalr x0 x1)

        assemble-unwrap-imm-symbol
            (ld x6 (- x10 8))
            (ld x28 (+ x20 72))
            (ld x29 (+ x20 64))
            assemble-unwrap-imm-symbol-loop
                (beq x28 x29 assemble-error)
                (lw x7 x28)
                (beq x6 x7 assemble-unwrap-imm-symbol-loop-after)
                (addi x28 x28 8)
                (jal x0 assemble-unwrap-imm-symbol-loop)
            assemble-unwrap-imm-symbol-loop-after
                (lw x6 (+ x28 4))
                (jalr x0 x1)

        assemble-unwrap-imm-len
            (lb x6 x10)
            (subi x6 x6 Token::Symbol)
            (bne x6 x0 assemble-error)
            (ld x6 (+ x10 8))
            (subi x6 x6 Instr::len)
            (bne x6 x0 assemble-error)
            (addi x10 x10 16)

            (lb x6 x10)
            (subi x6 x6 Token::Symbol)
            (bne x6 x0 assemble-error)
            (ld x6 (+ x10 8))
            (addi x10 x10 16)
            (ld x28 (+ x20 88))
            (ld x29 (+ x20 80))
            assemble-unwrap-imm-len-loop
                (beq x28 x29 assemble-error)
                (ld x7 x28)
                (beq x6 x7 assemble-unwrap-imm-len-loop-after)
                (addi x28 x28 24)
                (jal x0 assemble-unwrap-imm-len-loop)
            assemble-unwrap-imm-len-loop-after
                (lw x6 (+ x28 16))
                (lb x7 x10)
                (addi x10 x10 16)
                (subi x7 x7 Token::RightParen)
                (bne x7 x0 assemble-error)
                (jalr x0 x1)

    assemble-unwrap-offset
        ;; Have to zero this in case it is just a register
        (add x7 x0 x0)
        (beq x10 x11 assemble-error)
        (lb x6 x10)
        (subi x7 x6 Token::Symbol)
        (beq x7 x0 assemble-unwrap-register)
        (subi x7 x6 Token::LeftParen)
        (bne x7 x0 assemble-error)
        (addi x10 x10 16)

        (beq x10 x11 assemble-error)
        (lb x6 x10)
        (subi x7 x6 Token::Symbol)
        (bne x7 x0 assemble-error)
        (ld x6 (+ x10 8))
        (addi x10 x10 16)
        (addi x25 x0 1)
        (subi x7 x6 Instr::+)
        (beq x7 x0 assemble-unwrap-offset-after-negate)
        (addi x25 x0 -1)
        (subi x7 x6 Instr::-)
        (bne x7 x0 assemble-error)

        assemble-unwrap-offset-after-negate
        (subi x2 x2 8)
        (sd x2 x1)

        (beq x10 x11 assemble-error)
        (lb x6 x10)
        (subi x7 x6 Token::Symbol)
        (beq x7 x0 assemble-unwrap-offset-reg-first)

        (subi x7 x6 Token::Integer)
        (bne x7 x0 assemble-error)
        (jal x1 assemble-unwrap-imm)
        (add x27 x0 x6)
        (jal x1 assemble-unwrap-register)
        (add x26 x0 x6)
        (jal x0 assemble-unwrap-offset-after)

        assemble-unwrap-offset-reg-first
        (lb x6 (+ x10 8))
        (subi x7 x6 Register::x31)
        (subi x7 x7 1)
        (bge x7 x0 assemble-unwrap-offset-reg-first-constant)
        (addi x10 x10 16)
        (subi x26 x6 1)
        (jal x1 assemble-unwrap-imm)
        (add x27 x0 x6)
        (jal x0 assemble-unwrap-offset-after)

        assemble-unwrap-offset-reg-first-constant
        (jal x1 assemble-unwrap-imm)
        (add x27 x0 x6)
        (jal x1 assemble-unwrap-register)
        (add x26 x0 x6)

        assemble-unwrap-offset-after
        (beq x10 x11 assemble-error)
        (lb x6 x10)
        (subi x6 x6 Token::RightParen)
        (bne x6 x0 assemble-error)
        (addi x10 x10 16)
        (add x6 x0 x26)
        (mul x7 x27 x25)
        (ld x1 x2)
        (addi x2 x2 8)
        (jalr x0 x1)

    assemble-after-loop
        (ld x25 (+ x20 112))
        (ld x26 (+ x20 120))
        (beq x25 x26 assemble-after-loop-free)
        (subi x25 x25 16)
        (sd (+ x20 112) x25)
        (ld x10 x25)
        (ld x11 (+ x25 8))
        (jal x0 assemble-loop)
    assemble-after-loop-free
        ;; replace jumps
        (ld x21 (+ x20 104))
        (ld x22 (+ x20 96))
        (ld x24 (+ x20 48))
        (ld x25 (+ x20 8))
        assemble-after-loop-free-jumps
            (beq x21 x22 assemble-after-loop-free-after)
            (ld x6 x21)
            (ld x23 (+ x20 56))
            assemble-after-loop-free-loop
                (beq x23 x24 assemble-error)
                (ld x7 x23)
                (beq x6 x7 assemble-after-loop-free-loop-after)
                (addi x23 x23 16)
                (jal x0 assemble-after-loop-free-loop)
            assemble-after-loop-free-loop-after
                (ld x6 (+ x21 8))
                (andi x7 x6 1)
                (srai x6 x6 1)
                (ld x5 (+ x23 8))
                (add x28 x25 x6)
                (lw x29 x28)
                (sub x5 x5 x6)
                (bne x7 x0 assemble-after-loop-free-b)
                ;; j
                ;; (imm & 0x10_00_00) >> 1
                (addi x31 x0 1)
                (slli x31 x31 20)
                (and x31 x5 x31)
                (srai x31 x31 1)

                ;;(imm >> 1) & 0x3ff) << 9
                (srai x6 x5 1)
                (andi x6 x6 1023)
                (slli x6 x6 9)
                (or x31 x31 x6)

                ;; ((imm >> 11) & 1) << 8
                (srai x6 x5 11)
                (andi x6 x6 1)
                (slli x6 x6 8)
                (or x31 x31 x6)

                ;; (imm >> 12) & 0xff
                (srai x6 x5 12)
                (andi x6 x6 255)
                (or x31 x31 x6)
                (slli x31 x31 12)
                (or x29 x31 x29)
                (jal x0 assemble-after-loop-free-after-rewrite)

            assemble-after-loop-free-b
                ;; imm1
                (andi x7 x5 30)
                (srai x31 x5 11)
                (andi x31 x31 1)
                (or x7 x31 x7)
                (slli x7 x7 7)
                (or x29 x7 x29)
                ;; imm2
                (srai x7 x5 6)
                (andi x7 x7 64)
                (srai x6 x5 5)
                (andi x6 x6 63)
                (or x6 x6 x7)
                (slli x6 x6 25)
                (or x29 x6 x29)
            assemble-after-loop-free-after-rewrite
                (sw x28 x29)
                (addi x21 x21 16)
                (jal x0 assemble-after-loop-free-jumps)

        assemble-after-loop-free-after
        ;; Free memory
        (ld x10 (+ x20 56))
        (jal x1 free)
        (ld x10 (+ x20 72))
        (jal x1 free)
        (ld x10 (+ x20 88))
        (jal x1 free)
        (ld x10 (+ x20 104))
        (jal x1 free)
        (ld x10 (+ x20 120))
        (jal x1 free)

        (ld x21 (+ x20 8))
        (ld x22 x20)
        (ld x23 (+ x20 24))
        (ld x24 (+ x20 16))
        (ld x25 (+ x20 40))
        (ld x26 (+ x20 32))
        (add x10 x0 x20)
        (jal x1 free)
        (add x10 x0 x21)
        (add x11 x0 x22)
        (add x12 x0 x23)
        (add x13 x0 x24)
        (add x14 x0 x25)
        (add x15 x0 x26)
        (ld x1 x2)
        (addi x2 x2 8)
        (jalr x0 x1)
    assemble-error
        (addi x10 x0 30)
        (addi x17 x0 SYS_EXIT)
        (ecall)

;; INPUT:
;;  x10 - program-ptr: ArrayBuf<u32>
;;  x11 - program-end
;;  x12 - data-ptr: ArrayBuf<u8>
;;  x13 - data-end
;;  x14 - rewrite-ptr: ArrayBuf<(program-ptr[i], usize)>
;;  x15 - rewrite-end
;;  x16 - Output fd
elf
    ;; 0x400000
    (define Elf::ENTRY_LOCATION 4194304)
    ;; 0x600000
    (define Elf::DATA_LOCATION 6291456)
    ;; 64 + 56 + 56
    (define Elf::program_offset 176)
    (define elf-ehdr #(127 69 76 70 2 1 1 0 0 0 0 0 0 0 0 0
                       2 0 ;; e_type
                       243 0 ;; e_machine
                       1 0 0 0 ;; e_version
                       176 0 64 0 0 0 0 0 ;; e_entry
                       64 0 0 0 0 0 0 0 ;; e_phoff
                       0 0 0 0 0 0 0 0 ;; e_shoff
                       0 0 0 0 ;; e_flags
                       64 0 ;; e_ehsize
                       56 0 ;; e_phentsize
                       2 0 ;; e_num
                       64 0 ;; e_shentsize
                       0 0 ;; e_num
                       0 0)) ;; e_shstrndx

    (define elf-phdr-text #(1 0 0 0 ;; p_type
                            5 0 0 0 ;; p_flags
                            0 0 0 0 0 0 0 0 ;; p_offset = 0
                            0 0 64 0 0 0 0 0 ;; p_vaddr = ENTRY_LOCATION
                            0 0 64 0 0 0 0 0 ;; p_paddr = ENTRY_LOCATION
                            0 0 0 0 0 0 0 0 ;; p_filesz
                            0 0 0 0 0 0 0 0 ;; p_memsz
                            0 16 0 0 0 0 0 0)) ;; p_align

    (define elf-phdr-data #(1 0 0 0 ;; p_type
                            6 0 0 0 ;; p_flags
                            0 0 0 0 0 0 0 0 ;; p_offset
                            0 0 0 0 0 0 0 0 ;; p_vaddr
                            0 0 0 0 0 0 0 0 ;; p_paddr
                            0 0 0 0 0 0 0 0 ;; p_filesz
                            0 0 0 0 0 0 0 0 ;; p_memsz
                            0 16 0 0 0 0 0 0)) ;; p_align

    (add x20 x0 x10)
    (add x21 x0 x11)
    (add x22 x0 x12)
    (add x23 x0 x13)
    (add x24 x0 x14)
    (add x25 x0 x15)
    (add x26 x0 x16)

    (andi x5 x21 7)
    (beq x5 x0 elf-rewrite)
    (sw x21 x0)
    (addi x21 x21 4)

    elf-rewrite
    (sub x31 x21 x20)
    (addi x31 x31 Elf::program_offset)
    (addi x30 x0 96)
    (slli x30 x30 16)
    (add x31 x31 x30)
    elf-rewrite-loop
        (beq x24 x25 elf-rewrite-done)
        (ld x5 x24)
        (ld x6 (+ x24 8))
        (addi x24 x24 16)
        ;;offset
        (sub x6 x6 x22)
        (add x6 x6 x31)
        ;; imm20
        (addi x30 x0 1)
        (slli x30 x30 11)
        (add x7 x6 x30)
        (srai x7 x7 12)
        (slli x7 x7 12)
        ;; imm12
        (addi x30 x0 255)
        (slli x30 x30 4)
        (addi x30 x30 15)
        (and x6 x6 x30)
        (slli x6 x6 20)
        ;; lui
        (lw x30 x5)
        (or x30 x30 x7)
        (sw x5 x30)
        ;; addi
        (lw x30 (+ x5 4))
        (or x30 x30 x6)
        (sw (+ x5 4) x30)
        (jal x0 elf-rewrite-loop)
    elf-rewrite-done

    ;; ehdr
    ;; write(fd, msg, len)
    (add x10 x0 x26)
    (la x11 elf-ehdr)
    (addi x12 x0 (len elf-ehdr))
    (addi x17 x0 SYS_WRITE)
    (ecall)

    ;; phdrs
    (la x11 elf-phdr-text)
    (addi x5 x21 Elf::program_offset)
    (sub x5 x5 x20)
    (sd (+ x11 32) x5)
    (sd (+ x11 40) x5)

    ;; write(fd, msg, len)
    (add x10 x0 x26)
    (addi x12 x0 (len elf-phdr-text))
    (addi x17 x0 SYS_WRITE)
    (ecall)

    (la x11 elf-phdr-data)
    (sd (+ x11 8) x5)
    (addi x6 x0 96)
    (slli x6 x6 16)
    (add x5 x5 x6)
    (sd (+ x11 16) x5)
    (sd (+ x11 24) x5)
    (sub x5 x23 x22)
    (sd (+ x11 32) x5)
    (sd (+ x11 40) x5)

    ;; write(fd, msg, len)
    (add x10 x0 x26)
    (addi x12 x0 (len elf-phdr-data))
    (addi x17 x0 SYS_WRITE)
    (ecall)

    ;; program
    (add x10 x0 x26)
    (add x11 x0 x20)
    (sub x12 x21 x20)
    (addi x17 x0 SYS_WRITE)
    (ecall)
    ;; data
    (add x10 x0 x26)
    (add x11 x0 x22)
    (sub x12 x23 x22)
    (addi x17 x0 SYS_WRITE)
    (ecall)

    (jalr x0 x1)
