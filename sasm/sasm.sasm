;; enum Token {
;;     LeftParen,
;;     RightParen,
;;     Symbol(u64),
;;     Integer(i32),
;;     Char(char),
;;     String(startptr, length),
;;     Pound,
;; }
;(define Token::LeftParen 0)
;(define Token::RightParen 1)
;(define Token::Symbol 2)
;(define Token::Integer 3)
;(define Token::Char 4)
;(define Token::String 5)
;(define Token::Pound 6)
(define Token::LeftParen #'(')
(define Token::RightParen #')')
(define Token::Symbol #'s')
(define Token::Integer #'i')
(define Token::Char #'c')
(define Token::String #'t')
(define Token::Pound #'#')

;(include! "sasm-strings.sasm")
(include! "syscalls.sasm")

start
    ;; Init malloc
    (jal x1 malloc-init)
    ;;(include! "test-malloc.sasm")
    ;;(jal x1 symbol-table-init)
    (include! "test-symbol-table.sasm")

    ;; Check that argc == 2
    (lw x10 x2)
    (addi x11 x0 2)
    (bne x10 x11 error-argc)

    ;; Open input file
    ;; openat(AT_FDCWD, input-name, O_RDONLY, 0)
    (addi x10 x0 -100)
    ;; argv[1]
    (ld x11 (+ x2 16))
    (add x12 x0 x0)
    (add x13 x0 x0)
    (addi x17 x0 SYS_OPENAT)
    (ecall)
    (blt x10 x0 error-open)

    ;; Read input file to buffer
    ;; mmap(NULL, 64k, PROT_READ, MAP_PRIVATE, fd, 0)
    (add x14 x0 x10)
    (add x10 x0 x0)
    (addi x11 x0 1)
    (slli x11 x11 16)
    (addi x12 x0 1)
    (addi x13 x0 2)
    (add x15 x0 x0)
    (addi x17 x0 SYS_MMAP)
    (ecall)
    (blt x10 x0 error-read-input)
    (beq x10 x0 error-read-input)

    (add x31 x0 x10)

    ;; close(fd)
    (add x10 x0 x14)
    (addi x17 x0 57)
    (ecall)

    (add x10 x0 x31)
    (addi x11 x10 -1)
    read-file-length-loop
        (addi x11 x11 1)
        (lb x28 x11)
        (bne x28 x0 read-file-length-loop)

    ;; Tokenize(input, input.len) -> (tokens, tokens.len)
    (jal x1 tokenize)

    (include! "test-tokenizer.sasm")

    (jal x1 assemble)
    (jal x1 elf)
    (sd (- 8 x2) x10)
    (sd (- 16 x2) x11)

    ; Get output file name
    (ld x11 (+ x2 16))
    (addi x21 x11 -1)
    (addi x22 x0 #'.')
    find-dot
        (addi x21 x21 1)
        (lb x28 x21)
        (beq x28 x0 load-default-output-name)
        (bne x28 x22 find-dot)
    (sb x21 x0)

    ;; Write to output file
    open-output-name
    ;; openat(AT_FDCWD, output-name, O_WRONLY|O_CREAT|O_TRUNC, 0o777)
    (addi x10 x0 -100)
    (addi x12 x0 577)
    (addi x13 x0 511)
    (addi x17 x0 SYS_OPENAT)
    (ecall)
    (blt x10 x0 error-open)

    ;; Save fd
    (add x28 x10 x0)
    ;; write(fd, msg, len)
    (ld x11 (- 8 x2))
    (ld x12 (- 16 x2))
    (sub x12 x12 x11)
    (addi x17 x0 SYS_WRITE)
    (ecall)

    ;; close(fd)
    (add x10 x28 x0)
    (addi x17 x0 SYS_CLOSE)
    (ecall)

    ;; exit(0)
    (add x10 x0 x0)
    (addi x17 x0 SYS_EXIT)
    (ecall)

    load-default-output-name
        (define default-output-name "bin.elf\0")
        (la x11 default-output-name)
        (jal x0 open-output-name)

    error-argc
        (addi x10 x0 1)
        (jal x0 exit-error)
    error-open
        (addi x10 x0 2)
        (jal x0 exit-error)
    error-read-input
        (addi x10 x0 3)
        (jal x0 exit-error)
    exit-error
        (addi x17 x0 SYS_EXIT)
        (ecall)

(include! "symbol-table.sasm")

;; Args:
;;  x10 - input: String
;;  x11 - len: input.len : pointer to end of input
;; Locals:
;;  x20 - tokens: ArrayBuf<(Token, len, start)>
;;  x21 - capacity: tokens.capacity : pointer to end of tokens capacity
;;  x30 - Current token type
;;  x31 - Start of current token
tokenize
    (define input x10)
    (define input.len x11)
    (define tokens x20)
    (define tokens.capacity x21)

    (sd (- x2 8) x1)
    (sd (- x2 16) input)
    (sd (- x2 24) input.len)
    (subi x2 x2 24)
    (addi x10 x0 16)
    (jal x1 malloc)
    (add tokens x0 x10)
    (ld input.len x2)
    (ld input (+ x2 8))
    (addi x2 x2 8)
    (sd x2 tokens)
    (addi tokens.capacity tokens 16)

    tokenize-loop
        (beq input input.len tokenize-after-loop)
        (lb x28 input)
        (add x31 input x0)
        (addi input input 1)

        (subi x29 x28 #'(')
        (addi x30 x0 Token::LeftParen)
        (beq x29 x0 tokenize-loop-push-token)

        (subi x29 x28 #')')
        (addi x30 x0 Token::RightParen)
        (beq x29 x0 tokenize-loop-push-token)

        (subi x29 x28 #'"')
        (beq x29 x0 tokenize-string)

        (subi x29 x28 #'#')
        (beq x29 x0 tokenize-literal)

        (subi x29 x28 #';')
        (beq x29 x0 tokenize-comment)

        ;; Skip whitespace
        (subi x29 x28 #' ')
        (beq x29 x0 tokenize-loop)
        (subi x29 x28 #'\t')
        (beq x29 x0 tokenize-loop)
        (subi x29 x28 #'\r')
        (beq x29 x0 tokenize-loop)
        (subi x29 x28 #'\n')
        (beq x29 x0 tokenize-loop)

        ;; Ambiguous, could be a symbol or an integer
        (subi x29 x28 #'0')
        (addi x6 x0 11)
        (bltu x29 x6 tokenize-ambiguous)
        (subi x29 x28 #'+')
        (beq x29 x0 tokenize-ambiguous)
        (subi x29 x28 #'-')
        (beq x29 x0 tokenize-ambiguous)

        (jal x0 tokenize-identifier)

        tokenize-loop-push-token
            (beq tokens tokens.capacity tokenize-loop-alloc)
            tokenize-loop-after-alloc
            (sb tokens x30)
            (sd (+ tokens 8) x31)
            (sub x31 x10 x31)
            (sw (+ tokens 4) x31)
            (addi tokens tokens 16)
            (jal x0 tokenize-loop)

            tokenize-loop-alloc
                ;; Double tokens capacity
                (sd (- x2 8) input)
                (sd (- x2 16) input.len)
                (sd (- x2 24) x30)
                (sd (- x2 32) x31)
                (ld x10 x2)
                (sub x11 tokens.capacity x10)
                (sd (- x2 40) x11)
                (subi x2 x2 40)
                (slli x11 x11 1)
                (jal x1 realloc)
                (ld x6 x2)
                (add tokens.capacity x10 x6)
                (add tokens x10 x6)
                (addi x2 x2 40)
                (ld input (- x2 8))
                (ld input.len (- x2 16))
                (ld x30 (- x2 24))
                (ld x31 (- x2 32))
                (jal x0 tokenize-loop-after-alloc)

    tokenize-after-loop
        (ld x10 x2)
        (ld x1 (+ x2 8))
        (addi x2 x2 16)
        (add x11 x0 tokens)
        (jalr x0 x1)

    tokenize-string
        (addi x30 x0 Token::String)
    tokenize-string-loop
        (beq input input.len tokenize-string-error)
        (lb x28 input)
        (addi input input 1)

        (subi x29 x28 #'\\')
        (beq x29 x0 tokenize-string-escape)
        (subi x29 x28 #'"')
        (bne x29 x0 tokenize-string-loop)
    tokenize-string-done
        (jal x0 tokenize-loop-push-token)
    tokenize-string-escape
        (beq input input.len tokenize-string-error)
        (lb x28 input)
        (addi input input 1)

        (subi x29 x28 #'r')
        (beq x29 x0 tokenize-string-loop)
        (subi x29 x28 #'n')
        (beq x29 x0 tokenize-string-loop)
        (subi x29 x28 #'t')
        (beq x29 x0 tokenize-string-loop)
        (subi x29 x28 #'0')
        (beq x29 x0 tokenize-string-loop)
        (subi x29 x28 #'\\')
        (beq x29 x0 tokenize-string-loop)
        (subi x29 x28 #'"')
        (beq x29 x0 tokenize-string-loop)
    tokenize-string-error
        (addi x10 x0 20)
        (addi x17 x0 SYS_EXIT)
        (ecall)

    tokenize-literal
        (beq input input.len tokenize-literal-error)
        (lb x28 (+ input 1))
        (addi x30 x0 Token::Pound)
        (subi x28 x28 #'\'')
        (bne x28 x0 tokenize-loop-push-token)
        (addi input input 1)

        (beq input input.len tokenize-literal-error)
        (lb x31 input)
        (addi input input 1)
        (subi x29 x31 #'\'')
        (beq x29 x0 tokenize-literal-error)
        (subi x29 x31 #'\\')
        (bne x29 x0 tokenize-literal-close)

        (beq input input.len tokenize-literal-error)
        (lb x28 input)
        (addi input input 1)
        (addi x31 x0 #'\\')
        (beq x28 x31 tokenize-literal-close)
        (addi x31 x0 #'\'')
        (beq x28 x31 tokenize-literal-close)
        (subi x29 x28 #'r')
        (addi x31 x0 #'\r')
        (beq x29 x0 tokenize-literal-close)
        (subi x29 x28 #'n')
        (addi x31 x0 #'\n')
        (beq x29 x0 tokenize-literal-close)
        (subi x29 x28 #'t')
        (addi x31 x0 #'\t')
        (beq x29 x0 tokenize-literal-close)
        (subi x29 x28 #'0')
        (addi x31 x0 #'\0')
        (beq x29 x0 tokenize-literal-close)

        (jal x0 tokenize-literal-error)
    tokenize-literal-close
        (beq input input.len tokenize-literal-error)
        (lb x28 input)
        (addi input input 1)
        (subi x28 x28 #'\'')
        (bne x28 x0 tokenize-literal-error)
        (addi x30 x0 Token::Char)
        (jal x0 tokenize-loop-push-token)
    tokenize-literal-error
        (addi x10 x0 21)
        (addi x17 x0 SYS_EXIT)
        (ecall)

    tokenize-ambiguous
        (beq input input.len distinguish-ambiguous)

        (lb x28 input)
        (addi input input 1)

        ;; Still ambiguous
        (subi x29 x28 #'0')
        (addi x6 x0 11)
        (bltu x29 x6 tokenize-ambiguous)
        (subi x29 x28 #'+')
        (beq x29 x0 tokenize-ambiguous)
        (subi x29 x28 #'-')
        (beq x29 x0 tokenize-ambiguous)


        ;; Delimiter
        (subi x29 x28 #')')
        (beq x29 x0 distinguish-ambiguous-pair)
        (subi x29 x28 #'(')
        (beq x29 x0 distinguish-ambiguous-pair)
        (subi x29 x28 #'#')
        (beq x29 x0 distinguish-ambiguous-pair)
        (subi x29 x28 #';')
        (beq x29 x0 distinguish-ambiguous-pair)
        (subi x29 x28 #'"')
        (beq x29 x0 distinguish-ambiguous-pair)
        (subi x29 x28 #' ')
        (beq x29 x0 distinguish-ambiguous)
        (subi x29 x28 #'\t')
        (beq x29 x0 distinguish-ambiguous)
        (subi x29 x28 #'\r')
        (beq x29 x0 distinguish-ambiguous)
        (subi x29 x28 #'\n')
        (beq x29 x0 distinguish-ambiguous)

        (jal x0 tokenize-identifier)

    ;; There is some other token that we need to account for after this, so we move our cursor back.
    distinguish-ambiguous-pair
        (subi input input 1)
    distinguish-ambiguous
        (add x28 x0 x31)
    distinguish-ambiguous-intp
        (lb x6 x28)
        (subi x7 x6 #'+')
        (beq x7 x0 distinguish-ambiguous-intp-skip-sign)
        (subi x7 x6 #'-')
        (bne x7 x0 distinguish-ambiguous-intp-loop)
        distinguish-ambiguous-intp-skip-sign
            (addi x28 x28 1)
            ;; Needed in case the ambiguous input is just a sign.
            (beq x28 input distinguish-ambiguous-symbol)

        distinguish-ambiguous-intp-loop
            (lb x6 x28)
            (addi x28 x28 1)
            (subi x6 x6 #'0')
            (addi x7 x0 11)
            (bgeu x29 x7 distinguish-ambiguous-symbol)
            (bne x28 input distinguish-ambiguous-intp-loop)
        distinguish-ambiguous-int
            (add x6 x0 input)
            (add x27 x0 x0)
            (addi x29 x0 1)
            distinguish-ambiguous-int-convert
                (lb x27 (- x6 1))
                (subi x6 x6 1)
                (subi x7 x27 #'+')
                (beq x7 x0 distinguish-ambiguous-int-convert-after)
                (subi x7 x27 #'-')
                (beq x7 x0 distinguish-ambiguous-int-convert-after)
                (subi x27 x27 #'0')
                (mul x27 x27 x29)
                (add x28 x28 x27)
                (addi x27 x0 10)
                (mul x29 x29 x27)
                (bne x6 x31 distinguish-ambiguous-int-convert)
            distinguish-ambiguous-int-convert-after
            (add x31 x0 x28)
            (addi x30 x0 Token::Integer)
            (jal x0 tokenize-loop-push-token)
        distinguish-ambiguous-symbol
            (sd (- x2 8) input)
            (sd (- x2 16) input.len)
            (sd (- x2 24) tokens)
            (sd (- x2 32) tokens.capacity)
            (subi x2 x2 32)
            (add x11 x0 x10)
            (add x10 x0 x31)
            (jal x1 symbol-table::string->symbol)
            (add x31 x0 x10)
            (addi x2 x2 32)
            (ld input (- x2 8))
            (ld input.len (- x2 16))
            (ld tokens (- x2 24))
            (ld tokens.capacity (- x2 32))
            (addi x30 x0 Token::Symbol)
            (jal x0 tokenize-loop-push-token)

    tokenize-identifier
        (addi x30 x0 Token::Symbol)
        tokenize-identifier-loop
            (beq input input.len tokenize-loop-push-token)

            (lb x28 input)
            (addi input input 1)

            ;; delimiters
            (subi x29 x28 #'\r')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #'\n')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #'\t')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #' ')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #'#')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #'"')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #'(')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #')')
            (beq x29 x0 tokenize-identifier-after-loop)
            (subi x29 x28 #';')
            (beq x29 x0 tokenize-identifier-after-loop)

            (jal x0 tokenize-identifier-loop)
        tokenize-identifier-after-loop
            (subi input input 1)
            (sd (- x2 8) input)
            (sd (- x2 16) input.len)
            (sd (- x2 24) tokens)
            (sd (- x2 32) tokens.capacity)
            (subi x2 x2 32)
            (add x11 x0 x10)
            (add x10 x0 x31)
            (jal x1 symbol-table::string->symbol)
            (add x31 x0 x10)
            (addi x2 x2 32)
            (ld input (- x2 8))
            (ld input.len (- x2 16))
            (ld tokens (- x2 24))
            (ld tokens.capacity (- x2 32))
            (jal x0 tokenize-loop-push-token)

    tokenize-comment
    (addi x29 x0 #'\n')
    tokenize-comment-loop
        (beq input input.len tokenize-after-loop)

        (lb x28 input)
        (addi input input 1)
        (beq x28 x29 tokenize-loop)
        (jal x0 tokenize-comment-loop)

;; Args:
;;  x10 - tokens: ArrayBuf<(Token, len, start)>
;;  x11 - len: tokens.len
;; Locals:
;;  x20 - output-ptr: ArrayBuf<u32>
;;  &x2 - output-start
;;  x21 - labels-ptr: ArrayBuf<(String, len, usize)>
;;  &x2+8 - labels-start
;;  x22 - constants-ptr: ArrayBuf<(String, len, u32, u32-padding)>
;;  &x2+16 - constants-start
;;  x23 - data-ptr: ArrayBuf<u8>
;;  &x2+24 - data-start
;;  x24 - globals-ptr: ArrayBuf<String, str.len, data-offset>
;;  &x2+32 - globals-start

;;  x20 - output-begin: ArrayBuf<u32>
;;  x21 - output-ptr: ArrayBuf<u32>
;;  x22 - labels-begin: ArrayBuf<(String, len, usize)>
;;  x23 - labels-ptr: ArrayBuf<(String, len, usize)>
;;  x24 - constants-begin: ArrayBuf<(String, len, u32, u32-padding)>
;;  x25 - constants-ptr: ArrayBuf<(String, len, u32, u32-padding)>
assemble
    (sd (- 8 x2) x1)
    (subi x2 x2 48)
    (sd (- x2 8) x10)
    ;; allocate 64k for code
    (addi x10 x0 1)
    (slli x10 x10 16)
    (jal x1 malloc)
    (add x20 x0 x10)
    (sd x2 x10)

    ;; allocate 4k for labels
    (addi x10 x0 1)
    (slli x10 x10 12)
    (jal x1 malloc)
    (add x21 x0 x10)
    (sd (+ 8 x2) x10)

    ;; allocate 4k for constants
    (addi x10 x0 1)
    (slli x10 x10 12)
    (jal x1 malloc)
    (add x22 x0 x10)
    (sd (+ 16 x2) x10)

    ;; allocate 4k for data
    (addi x10 x0 1)
    (slli x10 x10 12)
    (jal x1 malloc)
    (add x23 x0 x10)
    (sd (+ 24 x2) x10)

    ;; allocate 4k for globals
    (addi x10 x0 1)
    (slli x10 x10 12)
    (jal x1 malloc)
    (add x24 x0 x10)
    (sd (+ 32 x2) x10)

    (ld x10 (- x2 8))

    assemble-loop
        (beq x11 x10 assemble-after-loop)

        (lb x28 x10)
        (addi x10 x10 16)

        (subi x29 x28 Token::Symbol)
        (beq x29 x0 assemble-add-label)
        (subi x29 x28 Token::LeftParen)
        (bne x29 x0 assemble-error)

        (lb x28 x10)
        (subi x29 x28 Token::Symbol)
        (bne x29 x0 assemble-error)
        (ld x28 (+ x10 8))
        (lw x29 (+ x10 4))
        (addi x10 x10 16)

        (sd (- x2 8) x10)
        (sd (- x2 16) x11)
        (add x10 x0 x28)
        (add x11 x0 x29)
        ;;(la x12 Instr::define)
        (addi x13 x0 6)
        (jal x1 str-eq)
        (add x6 x0 x10)
        (ld x11 (- x2 16))
        (ld x10 (- x2 8))

        (beq x6 x0 assemble-handle-opcode)
    assemble-handle-define
        (lb x28 x10)
        (subi x29 x28 Token::Symbol)
        (bne x29 x0 assemble-error)
        (ld x28 (+ x10 8))
        (ld x29 (+ x10 4))
        (addi x10 x10 16)

        (lb x6 x10)
        (lb x30 (+ x10 8))
        (lb x31 (+ x10 4))
        (addi x10 x10 16)
        (subi x7 x6 Token::Integer)
        (beq x7 x0 assemble-handle-define-int)
        (subi x7 x6 Token::Char)
        (beq x7 x0 assemble-handle-define-char)
        (subi x7 x6 Token::String)
        (bne x7 x0 assemble-error)

        assemble-handle-define-string
            (subi x31 x31 2)
            (beq x31 x0 assemble-error)
            (addi x30 x30 1)
            (add x31 x31 x30)

            (sd (- 8 x2) x1)
            (sd (- 16 x2) x10)
            (add x10 x0 x31)
            (jal x0 malloc)
            (add x6 x0 x10)
            (add x7 x0 x10)
            (ld x1 (- 8 x2))
            (ld x10 (- 16 x2))
            assemble-handle-define-string-loop
                (lb x8 x30)
                (subi x9 x8 #'\\')
                (bne x9 x0 assemble-handle-define-string-loop-no-escape)
                (addi x30 x30 1)
                (lb x8 x30)
                (subi x9 x8 #'\\')
                (beq x9 x0 assemble-handle-define-string-loop-no-escape)
                (subi x9 x8 #'"')
                (beq x9 x0 assemble-handle-define-string-loop-no-escape)
                (subi x9 x8 #'r')
                (addi x8 x0 #'\r')
                (beq x9 x0 assemble-handle-define-string-loop-no-escape)
                (subi x9 x8 #'n')
                (addi x8 x0 #'\n')
                (beq x9 x0 assemble-handle-define-string-loop-no-escape)
                (subi x9 x8 #'t')
                (addi x8 x0 #'\t')
                (beq x9 x0 assemble-handle-define-string-loop-no-escape)
                (subi x9 x8 #'0')
                (addi x8 x0 #'\0')
                (bne x9 x0 assemble-error)

                assemble-handle-define-string-loop-no-escape
                (sb x7 x8)
                (addi x7 x7 1)
                (addi x30 x30 1)
                (bne x30 x31 assemble-handle-define-string-loop)

            (sd x24 x28)
            (sd (+ 8 x24) x29)
            ;; TODO: maybe x23 - data-start?
            (sd (+ 16 x24) x23)
            ;; TODO - globals.insert(x28, x29, data.len())
            assemble-handle-define-string-push
                (lb x8 x6)
                (sb x8 x23)
                (addi x6 x6 1)
                (addi x23 x23 1)
                (bne x6 x7 assemble-handle-define-string-push)
                (jal x0 assemble-handle-define-after)
        assemble-handle-define-int
            (add x6 x0 x0)
            (add x31 x31 x30)
            (addi x8 x0 1)
            (subi x31 x31 1)
            assemble-handle-define-int-loop
                (lb x7 x31)
            ;; TODO
        assemble-handle-define-char
            (addi x30 x30 2)
            (subi x31 x31 3)
            (lb x6 x30)
            (subi x7 x6 #'\\')
            (bne x7 x0 assemble-handle-define-char-after)
            assemble-handle-define-char-escape
                (lb x30 (+ x30 1))
                (subi x7 x30 #'\\')
                (addi x6 x0 #'\\')
                (beq x7 x0 assemble-handle-define-char-after)
                (subi x7 x30 #'\'')
                (addi x6 x0 #'\'')
                (beq x7 x0 assemble-handle-define-char-after)
                (subi x7 x30 #'r')
                (addi x6 x0 #'\r')
                (beq x7 x0 assemble-handle-define-char-after)
                (subi x7 x30 #'n')
                (addi x6 x0 #'\n')
                (beq x7 x0 assemble-handle-define-char-after)
                (subi x7 x30 #'t')
                (addi x6 x0 #'\t')
                (beq x7 x0 assemble-handle-define-char-after)
                (subi x7 x30 #'0')
                (addi x6 x0 #'\0')
            assemble-handle-define-char-after
                (sd x25 x28)
                (sd (+ 8 x25) x29)
                (sw (+ 16 x25) x6)
                (addi x25 x25 24)
        assemble-handle-define-after
            (lb x28 x10)
            (subi x28 x28 Token::RightParen)
            (addi x10 x0 16)
            (bne x28 x0 assemble-error)
            (jal x0 assemble-loop)
    assemble-add-label
        (ld x28 (- x10 8))
        (lw x29 (- x10 12))
        (sd x23 x28)
        (sd (+ 8 x23) x29)
        (sd (+ 16 x23) x21)
        (addi x23 x23 24)
        (jal x0 assemble-loop)
    assemble-handle-opcode
        (ld x10 (- x10 8))
        (ld x11 (- x10 12))
        ;;(la x12 Instr::add)
        (addi x13 x0 3)
        (jal x1 str-eq)
        ;; TODO
        (bne x10 x0 assemble-r)

        (ld x11 (- x2 16))
        (ld x10 (- x2 8))
    assemble-r
        ;; TODO
        ;; rd
        (jal x1 assemble-unwrap-register)
        (slli x6 x6 7)
        ;(or _ _ x6)
        ;; rs1
        (jal x1 assemble-unwrap-register)
        (slli x6 x6 15)
        ;(or _ _ x6)
        ;; rs2
        (jal x1 assemble-unwrap-register)
        (slli x6 x6 20)
        ;(or _ _ x6)
    assemble-unwrap-register
        (lb x6 x10)
        (subi x6 x6 Token::Symbol)
        (bne x6 x0 assemble-error)
        (ld x6 (+ x10 8))
        (lw x7 (+ x10 4))
        (addi x10 x10 16)
        (sd (- x2 8) x1)
        (sd (- x2 16) x10)
        (sd (- x2 24) x11)
        (sd (- x2 32) x6)
        (sw (- x2 36) x7)

        (add x10 x0 x6)
        (add x11 x0 x7)
        ;;(la x12 Register::x0)
        (addi x13 x0 2)
        (jal x1 str-eq)
        (add x6 x0 x0)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x1)
        (addi x13 x0 2)
        (jal x1 str-eq)
        (addi x6 x0 1)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x2)
        (addi x13 x0 2)
        (jal x1 str-eq)
        (addi x6 x0 2)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x3)
        (addi x13 x0 2)
        (jal x1 str-eq)
        (addi x6 x0 3)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x4)
        (addi x13 x0 2)
        (jal x1 str-eq)
        (addi x6 x0 4)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x5)
        (addi x13 x0 2)
        (jal x1 str-eq)
        (addi x6 x0 5)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x6)
        (addi x13 x0 2)
        (jal x1 str-eq)
        (addi x6 x0 6)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x7)
        (addi x13 x0 2)
        (jal x1 str-eq)
        (addi x6 x0 7)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x8)
        (addi x13 x0 2)
        (jal x1 str-eq)
        (addi x6 x0 8)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x9)
        (addi x13 x0 2)
        (jal x1 str-eq)
        (addi x6 x0 9)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x10)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 10)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x11)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 11)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x12)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 12)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x13)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 13)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x14)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 14)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x15)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 15)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x16)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 16)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x17)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 17)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x18)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 18)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x19)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 19)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x20)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 20)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x21)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 21)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x22)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 22)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x23)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 23)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x24)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 24)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x25)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 25)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x26)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 26)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x27)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 27)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x28)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 28)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x29)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 29)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x30)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 30)
        (bne x10 x0 assemble-unwrap-register-after)

        (ld x10 (- x2 32))
        (lw x11 (- x2 36))
        ;;(la x12 Register::x31)
        (addi x13 x0 3)
        (jal x1 str-eq)
        (addi x6 x0 31)
        (beq x10 x0 assemble-error)
        assemble-unwrap-register-after
            (sd (- x2 8) x1)
            (sd (- x2 16) x10)
            (sd (- x2 24) x11)
            ;; TODO - return value is in x6
            (jalr x0 x1)
    assemble-after-loop
        (ld x1 x2)
        (addi x2 x2 8)
        (jalr x0 x1)
    assemble-error
        (addi x10 x0 30)
        (addi x17 x0 SYS_EXIT)
        (ecall)

;; Args
;;   x10 - str1
;;   x11 - str1.len
;;   x12 - str2
;;   x13 - str2.len
str-eq
    (bne x11 x13 str-eq-false)
    str-eq-loop
        (beq x11 x0 str-eq-true)
        (subi x11 x11 1)
        (lb x6 x10)
        (addi x10 x10 1)
        (lb x7 x12)
        (addi x12 x12 1)
        (beq x6 x7 str-eq-loop)
    str-eq-false
        (add x10 x0 x0)
        (jalr x0 x1)
    str-eq-true
        (addi x10 x0 1)
        (jalr x0 x1)

;; Hack to avoid making global ints for now.
(define HEAP-START "\0\0\0\0\0\0\0\0")
(define HEAP-END "\0\0\0\0\0\0\0\0")
malloc-init
    (add x10 x0 x0)
    (addi x17 x0 SYS_BRK)
    (ecall)
    (la x6 HEAP-START)
    (sd x6 x10)
    (la x6 HEAP-END)
    (sd x6 x10)
    (jalr x0 x1)

;; Based on simple design outlined near the beginning of https://moss.cs.iit.edu/cs351/slides/slides-malloc.pdf
;; Args
;;   x10 - size in bytes
;; Locals
;;   x6 - temp
;;   x7 - temp
;;   x28 - temp
;;   x29 - temp
(define Malloc::Alignment 7)
(define Malloc::SIZE_T_SIZE 8)
malloc
    ;; Align(size)
    (addi x10 x10 Malloc::SIZE_T_SIZE)
    (addi x10 x10 Malloc::Alignment)
    (andi x10 x10 -8)
    (sd (- x2 8) x10)
    (sd (- x2 16) x1)
    (jal x1 find-fit)

    ;; header - x10
    ;; blk_size - x6
    (ld x1 (- x2 16))
    (beq x10 x0 malloc-allocate)
    (ld x6 (- x2 8))
    (ld x7 x10)
    (bge x7 x6 malloc-done)

    (sub x7 x7 x6)
    (add x28 x10 x6)
    (sd x28 x7)
    (jal x0 malloc-done)

    malloc-allocate
        ;; brk(CURRENT_END+blk_size)
        (la x7 HEAP-END)
        (ld x10 x7)
        (ld x6 (- x2 8))
        (add x10 x10 x6)
        (addi x17 x0 SYS_BRK)
        (ecall)
        (sd x7 x10)
        (sub x10 x10 x6)

    malloc-done
        (ori x6 x6 1)
        (sd x10 x6)
        (addi x10 x10 Malloc::SIZE_T_SIZE)
        (jalr x0 x1)

    find-fit
        (la x6 HEAP-START)
        (ld x6 x6)
        (la x7 HEAP-END)
        (ld x7 x7)
        (bge x6 x7 find-fit-null)
        (subi x10 x10 1)
        find-fit-loop
            (ld x28 x6)
            (andi x29 x28 1)
            (bne x29 x0 find-fit-set-header)
            (blt x10 x28 find-fit-done)

            (add x28 x28 x6)
            (bge x7 x28 find-fit-null)
            (ld x29 x28)
            (andi x29 x29 1)
            (bne x29 x0 find-fit-set-header)
            (ld x29 x6)
            (ld x28 x28)
            (add x28 x28 x29)
            (sd x6 x28)
            (jal x0 find-fit-loop)

            find-fit-set-header
                (xori x28 x28 1)
                (add x6 x6 x28)
                (blt x6 x7 find-fit-loop)
        find-fit-null
            (add x10 x0 x0)
            (jalr x0 x1)
        find-fit-done
            (add x10 x0 x6)
            (jalr x0 x1)

;; x10 - pointer to free
;; x6 - temporary
free
    ;; SIZE_T_SIZE = 8
    (subi x10 x10 Malloc::SIZE_T_SIZE)
    (ld x6 x10)
    (subi x6 x6 1)
    (sd x10 x6)
    (jalr x0 x1)

;; x10 - old pointer
;; x11 - new size in bytes
realloc
    (ld x6 (- x10 Malloc::SIZE_T_SIZE))
    (subi x6 x6 9)
    ;; ALIGN(size + SIZE_T_SIZE)
    (addi x11 x11 Malloc::Alignment)
    (andi x11 x11 -8)

    (bge x6 x11 realloc-done)

    (add x7 x6 x10)
    (la x28 HEAP-END)
    (ld x28 x28)
    (beq x7 x28 realloc-extend)

    (subi x2 x2 16)
    (sd (+ x2 8) x10)
    (sd x2 x1)
    (add x10 x0 x11)
    (jal x1 malloc)
    (ld x1 x2)
    (ld x11 (+ x2 8))
    (addi x2 x2 16)
    (add x6 x0 x10)

    (add x29 x0 x11)
    ;; Load the header/length of the old block
    (ld x7 (- x11 8))
    (subi x7 x7 1)
    realloc-copy-loop
        ;; Note we load a u64 at a time to save on iterations. This is okay because we
        ;; are 8-byte aligned.
        (ld x28 x11)
        (sd x6 x28)
        (addi x6 x6 8)
        (addi x11 x11 8)
        (subi x7 x7 8)
        (bne x7 x0 realloc-copy-loop)
    realloc-after-loop
        (sd (- x2 8) x10)
        (sd (- x2 16) x1)
        (add x10 x0 x29)
        (jal x1 free)
        (ld x10 (- x2 8))
        (ld x1 (- x2 16))
    realloc-done
        (jalr x0 x1)
    realloc-extend
        ;; brk(HEAP-END+new_size-old_size)
        (add x29 x0 x10)
        (add x10 x28 x11)
        (sub x10 x10 x6)
        (addi x17 x0 SYS_BRK)
        (ecall)
        (la x6 HEAP-END)
        (sd x6 x10)
        (add x10 x0 x29)
        (ori x11 x11 1)
        (sd (- x10 8) x11)
        (jalr x0 x1)

;; x10 - &program
;; x11 - program.len
;; x12 - &data (len, &data)
;; x13 - data.len
;; x14 - &rewrites (program_index, data_index)
;; x15 - rewrites.len
;; Locals
;;   x20 - elf output buffer
;;   x21 - data_offset
;;   x22 - data_len
;;   x23 - shstrtab_offset
;;   x24 - &data_position (offset)
;;   x25 - elf output buffer beginning
elf
    ;; 0x600000
    (define Elf::DATA_LOCATION 6291456)
    ;; 64 + 56 + 56
    (define Elf::data_offset 176)

    ;; Register aliases
    (define out x20)
    (define out-start x20)

    ;; Allocate 64k for exe output
    (sd (- 8 x2) x10)
    (sd (- 16 x2) x1)
    (addi x10 x0 1)
    (slli x10 x10 16)
    (jal x1 malloc)
    (add out x0 x10)
    (add out-start x0 x10)
    (ld x10 (- x2 8))
    (ld x1 (- x2 16))

    (sub x21 x11 x10)
    (addi x21 x21 Elf::data_offset)

    (add x28 x0 x13)
    (sub x31 x2 x28)
    (sub x24 x2 x28)
    (add x29 x0 x12)
    (add x22 x0 x0)
    (beq x28 x0 elf-get-data-len-loop-after)
    ;; 0x600000
    (addi x6 x0 6)
    (slli x6 x6 20)
    (add x6 x21 x6)
    elf-get-data-len-loop
        (ld x30 x29)
        (add x22 x22 x30)
        (addi x29 x29 16)
        (subi x13 x0 1)
        (sd x31 x6)
        (add x6 x6 x30)
        (addi x31 x31 8)
        (bne x28 x0 elf-get-data-len-loop)
    elf-get-data-len-loop-after
    (add x23 x21 x30)

    elf-rewrites
        (beq x15 x0 elf-write-ehdr)
        (ld x28 x14)
        (add x28 x28 x10)
        (ld x29 (+ x14 8))
        (add x6 x0 x24)
        elf-rewrites-mult
            (beq x29 x0 elf-rewrites-mult-after)
            (addi x6 x6 8)
            (subi x29 x29 1)
            (jal x0 elf-rewrites-mult)
        elf-rewrites-mult-after
        ;; offset
        (ld x6 x6)
        ;; lui
        (lw x30 x28)
        ;; 0xff_ff_f0_00
        ;(addi x7 x0 65535)
        ;(slli x7 x7 16)
        ;(addi x7 x7 61440)
        ;(and x7 x6 x7)
        (srai x7 x6 12)
        (slli x7 x7 12)
        (or x30 x30 x7)
        (sw x28 x30)
        ;; addi
        (lw x30 (+ x28 4))
        ;; 0xf_ff
        (addi x7 x0 15)
        (slli x7 x7 8)
        (addi x7 x7 255)
        (and x7 x6 x7)
        (slli x7 x7 20)
        (or x30 x30 x7)
        (sw (+ x28 4) x30)
        (addi x14 x14 16)
        (subi x15 x15 1)
        (jal x0 elf-rewrites)

    elf-write-ehdr
    (define elf-ehdr #(127 69 76 70 2 1 1 0 0 0 0 0 0 0 0 0 
                       2 0 ;; e_type
                       243 0 ;; e_machine
                       1 0 0 0 ;; e_version
                       176 0 64 0 0 0 0 0 ;; e_entry
                       64 0 0 0 0 0 0 0 ;; e_phoff
                       0 0 0 0 0 0 0 0 ;; e_shoff
                       0 0 0 0 ;; e_flags
                       64 0 ;; e_ehsize
                       56 0 ;; e_phentsize
                       2 0 ;; e_num
                       64 0 ;; e_shentsize
                       0 0 ;; e_num
                       0 0)) ;; e_shstrndx
        (addi x6 x0 8)
        (la x7 elf-ehdr)
        elf-write-ehdr-loop
            (ld x8 x7)
            (sd out x7)
            (addi out out 8)
            (addi x7 x7 8)
            (subi x6 x6 1)
            (bne x6 x0 elf-write-ehdr-loop)

    elf-write-phdrs
        (define elf-phdr-text #(1 0 0 0
                                5 0 0 0
                                0 0 0 0 0 0 0 0
                                0 0 64 0 0 0 0 0
                                0 0 64 0 0 0 0 0
                                0 0 0 0 0 0 0 0
                                0 0 0 0 0 0 0 0
                                0 16 0 0 0 0 0 0))

        (define elf-phdr-data #(1 0 0 0
                                6 0 0 0
                                0 0 0 0 0 0 0 0
                                0 0 96 0 0 0 0 0
                                0 0 96 0 0 0 0 0
                                0 0 0 0 0 0 0 0
                                0 0 0 0 0 0 0 0
                                0 16 0 0 0 0 0 0))
        (addi x6 x0 7)
        (la x7 elf-phdr-text)
        elf-write-phdrs-text-loop
            (ld x8 x7)
            (sd out x7)
            (addi out out 8)
            (addi x7 x7 8)
            (subi x6 x6 1)
            (bne x6 x0 elf-write-phdrs-text-loop)
            (sd (- out 24) x21)
            (sd (- out 16) x21)

        (addi x6 x0 7)
        (la x7 elf-phdr-data)
        elf-write-phdrs-data-loop
            (ld x8 x7)
            (sd out x7)
            (addi out out 8)
            (addi x7 x7 8)
            (subi x6 x6 1)
            (bne x6 x0 elf-write-phdrs-data-loop)
            (sd (- out 24) x22)
            (sd (- out 16) x22)

    elf-write-program
        (lw x6 x10)
        (sw out x6)
        (addi x10 x10 4)
        (addi out out 4)
        (bne x10 x11 elf-write-program)
    elf-write-data
        (beq x13 x0 elf-write-program)
        (ld x28 x12)
        (ld x29 (+ 8 x12))
        elf-write-data-inner
            (lb x30 x29)
            (sb out x30)
            (addi out out 1)
            (addi x29 x29 1)
            (subi x28 x28 1)
            (bne x28 x0 elf-write-data-inner)
        (addi x12 x12 16)
        (subi x13 x13 1)
        (jal x0 elf-write-data)
    elf-after
        (add x10 x0 out-start)
        (add x11 x0 out)
        (jalr x0 x1)
