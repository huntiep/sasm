(import (syscalls *))

(defvar HEAP-START 0)
(defvar HEAP-END 0)
(module init
    (add x10 x0 x0)
    (addi x17 x0 SYS_BRK)
    (ecall)
    (la x6 HEAP-START)
    (sd x6 x10)
    (la x6 HEAP-END)
    (sd x6 x10)
    (jalr x0 x1)
)

;; Based on simple design outlined near the beginning of https://moss.cs.iit.edu/cs351/slides/slides-malloc.pdf
;; Args
;;   x10 - size in bytes
;; Locals
;;   x6 - temp
;;   x7 - temp
;;   x28 - temp
;;   x29 - temp
(define Malloc::Alignment 7)
(define Malloc::SIZE_T_SIZE 8)
(module malloc
    (beq x10 x0 ret)
    ;; Align(size)
    (addi x10 x10 Malloc::SIZE_T_SIZE)
    (addi x10 x10 Malloc::Alignment)
    (andi x5 x10 -8)

    find-fit
        (la x6 HEAP-START)
        (ld x6 x6)
        (la x7 HEAP-END)
        (ld x7 x7)
        (bge x6 x7 malloc-allocate)
        find-fit-loop
            (ld x28 x6)
            (andi x29 x28 1)
            (bne x29 x0 find-fit-set-header)
            (bge x28 x5 set-header)

            (add x28 x28 x6)
            (bge x7 x28 malloc-allocate)
            (ld x29 x28)
            (andi x29 x29 1)
            (bne x29 x0 find-fit-set-header)
            (ld x29 x6)
            (ld x28 x28)
            (add x28 x28 x29)
            (sd x6 x28)
            (jal x0 find-fit-loop)

            find-fit-set-header
                (xori x28 x28 1)
                (add x6 x6 x28)
                (blt x6 x7 find-fit-loop)
                (jal x0 malloc-allocate)

    set-header
    ;; header - x10
    ;; blk_size - x5
    (add x10 x0 x6)
    (ld x7 x10)
    (sub x6 x7 x5)
    (addi x28 x0 8)
    (bge x28 x6 malloc-done)
    (add x28 x10 x5)
    (sd x28 x6)
    (add x7 x0 x5)
    (jal x0 malloc-done)

    malloc-allocate
        ;; brk(CURRENT_END+blk_size)
        (add x10 x7 x5)
        (addi x17 x0 SYS_BRK)
        (ecall)
        (la x7 HEAP-END)
        (sd x7 x10)
        (sub x10 x10 x5)
        (add x7 x0 x5)

    malloc-done
        (ori x7 x7 1)
        (sd x10 x7)
        (addi x10 x10 Malloc::SIZE_T_SIZE)
    ret
        (jalr x0 x1)
)

;; Allocate and zero memory
;; ARGS:
;;  x10 - size in bytes
;; RET:
;;  x10 - ptr
(module calloc
    (subi x2 x2 16)
    (sd x2 x1)
    (sd (+ x2 8) x10)
    (jal x1 malloc)
    (add x6 x0 x10)
    (ld x1 x2)
    (ld x5 (+ x2 8))
    (addi x2 x2 16)

    ;; Align(size)
    (addi x5 x5 Malloc::Alignment)
    (andi x5 x5 -8)
    (add x5 x5 x6)
    zero
        (sd x6 x0)
        (addi x6 x6 8)
        (bne x6 x5 zero)
    (jalr x0 x1)
)

;; x10 - pointer to free
;; x6 - temporary
(module free
    (ld x6 (- x10 Malloc::SIZE_T_SIZE))
    (andi x6 x6 -2)
    (sd (- x10 Malloc::SIZE_T_SIZE) x6)
    (jalr x0 x1)
)

;; x10 - old pointer
;; x11 - new size in bytes
(module realloc
    (ld x6 (- x10 Malloc::SIZE_T_SIZE))
    (subi x6 x6 9)
    ;; ALIGN(size + SIZE_T_SIZE)
    (addi x11 x11 Malloc::Alignment)
    (andi x11 x11 -8)

    (bge x6 x11 realloc-done)

    (add x7 x6 x10)
    (la x28 HEAP-END)
    (ld x28 x28)
    (beq x7 x28 realloc-extend)

    (subi x2 x2 16)
    (sd (+ x2 8) x10)
    (sd x2 x1)
    (add x10 x0 x11)
    (jal x1 malloc)
    (ld x1 x2)
    (ld x11 (+ x2 8))
    (addi x2 x2 16)
    (add x6 x0 x10)

    (add x29 x0 x11)
    ;; Load the header/length of the old block
    (ld x7 (- x11 Malloc::SIZE_T_SIZE))
    (andi x7 x7 -2)
    (subi x7 x7 Malloc::SIZE_T_SIZE)
    realloc-copy-loop
        ;; Note we load a u64 at a time to save on iterations. This is okay because we
        ;; are 8-byte aligned.
        (ld x28 x11)
        (sd x6 x28)
        (addi x6 x6 8)
        (addi x11 x11 8)
        (subi x7 x7 8)
        (bne x7 x0 realloc-copy-loop)
    realloc-after-loop
        (sd (- x2 8) x10)
        (sd (- x2 16) x1)
        (add x10 x0 x29)
        (jal x1 free)
        (ld x10 (- x2 8))
        (ld x1 (- x2 16))
    realloc-done
        (jalr x0 x1)
    realloc-extend
        ;; brk(HEAP-END+new_size-old_size)
        (add x29 x0 x10)
        (add x10 x28 x11)
        (sub x10 x10 x6)
        (addi x17 x0 SYS_BRK)
        (ecall)
        (la x6 HEAP-END)
        (sd x6 x10)
        (add x10 x0 x29)
        (addi x11 x11 Malloc::SIZE_T_SIZE)
        (ori x11 x11 1)
        (sd (- x10 Malloc::SIZE_T_SIZE) x11)
        (jalr x0 x1)
)
